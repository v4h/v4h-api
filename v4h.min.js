var v4h=function(){"use strict";var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function n(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function t(e,n){return e(n={exports:{}},n.exports),n.exports}function a(e){return e&&e.default||e}var i=t((function(e,n){Object.defineProperty(n,"__esModule",{value:!0});class t extends Error{constructor(e,n=500,t=!1){super(e),this.message=e,this.code=n,this.internal=t,this.code=n,this.internal=t,Error.captureStackTrace(this,this.constructor)}}n.default=t}));n(i);var o=function(e,n){return function(){for(var t=new Array(arguments.length),a=0;a<t.length;a++)t[a]=arguments[a];return e.apply(n,t)}},s=Object.prototype.toString;function r(e){return"[object Array]"===s.call(e)}function c(e){return void 0===e}function p(e){return null!==e&&"object"==typeof e}function l(e){if("[object Object]"!==s.call(e))return!1;var n=Object.getPrototypeOf(e);return null===n||n===Object.prototype}function u(e){return"[object Function]"===s.call(e)}function d(e,n){if(null!=e)if("object"!=typeof e&&(e=[e]),r(e))for(var t=0,a=e.length;t<a;t++)n.call(null,e[t],t,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&n.call(null,e[i],i,e)}var h={isArray:r,isArrayBuffer:function(e){return"[object ArrayBuffer]"===s.call(e)},isBuffer:function(e){return null!==e&&!c(e)&&null!==e.constructor&&!c(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:p,isPlainObject:l,isUndefined:c,isDate:function(e){return"[object Date]"===s.call(e)},isFile:function(e){return"[object File]"===s.call(e)},isBlob:function(e){return"[object Blob]"===s.call(e)},isFunction:u,isStream:function(e){return p(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:d,merge:function e(){var n={};function t(t,a){l(n[a])&&l(t)?n[a]=e(n[a],t):l(t)?n[a]=e({},t):r(t)?n[a]=t.slice():n[a]=t}for(var a=0,i=arguments.length;a<i;a++)d(arguments[a],t);return n},extend:function(e,n,t){return d(n,(function(n,a){e[a]=t&&"function"==typeof n?o(n,t):n})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}};function m(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var f=function(e,n,t){if(!n)return e;var a;if(t)a=t(n);else if(h.isURLSearchParams(n))a=n.toString();else{var i=[];h.forEach(n,(function(e,n){null!=e&&(h.isArray(e)?n+="[]":e=[e],h.forEach(e,(function(e){h.isDate(e)?e=e.toISOString():h.isObject(e)&&(e=JSON.stringify(e)),i.push(m(n)+"="+m(e))})))})),a=i.join("&")}if(a){var o=e.indexOf("#");-1!==o&&(e=e.slice(0,o)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e};function v(){this.handlers=[]}v.prototype.use=function(e,n){return this.handlers.push({fulfilled:e,rejected:n}),this.handlers.length-1},v.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},v.prototype.forEach=function(e){h.forEach(this.handlers,(function(n){null!==n&&e(n)}))};var x=v,g=function(e,n,t){return h.forEach(t,(function(t){e=t(e,n)})),e},b=function(e){return!(!e||!e.__CANCEL__)},w="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{};function _(){throw new Error("setTimeout has not been defined")}function y(){throw new Error("clearTimeout has not been defined")}var k=_,E=y;function j(e){if(k===setTimeout)return setTimeout(e,0);if((k===_||!k)&&setTimeout)return k=setTimeout,setTimeout(e,0);try{return k(e,0)}catch(n){try{return k.call(null,e,0)}catch(n){return k.call(this,e,0)}}}"function"==typeof w.setTimeout&&(k=setTimeout),"function"==typeof w.clearTimeout&&(E=clearTimeout);var A,R=[],z=!1,C=-1;function S(){z&&A&&(z=!1,A.length?R=A.concat(R):C=-1,R.length&&O())}function O(){if(!z){var e=j(S);z=!0;for(var n=R.length;n;){for(A=R,R=[];++C<n;)A&&A[C].run();C=-1,n=R.length}A=null,z=!1,function(e){if(E===clearTimeout)return clearTimeout(e);if((E===y||!E)&&clearTimeout)return E=clearTimeout,clearTimeout(e);try{return E(e)}catch(n){try{return E.call(null,e)}catch(n){return E.call(this,e)}}}(e)}}function T(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)n[t-1]=arguments[t];R.push(new L(e,n)),1!==R.length||z||j(O)}function L(e,n){this.fun=e,this.array=n}function q(){}L.prototype.run=function(){this.fun.apply(null,this.array)};var B=q,U=q,M=q,P=q,F=q,N=q,I=q,$=w.performance||{},D=$.now||$.mozNow||$.msNow||$.oNow||$.webkitNow||function(){return(new Date).getTime()},Z=new Date,H={nextTick:T,title:"browser",browser:!0,env:{},argv:[],version:"",versions:{},on:B,addListener:U,once:M,off:P,removeListener:F,removeAllListeners:N,emit:I,binding:function(e){throw new Error("process.binding is not supported")},cwd:function(){return"/"},chdir:function(e){throw new Error("process.chdir is not supported")},umask:function(){return 0},hrtime:function(e){var n=.001*D.call($),t=Math.floor(n),a=Math.floor(n%1*1e9);return e&&(t-=e[0],(a-=e[1])<0&&(t--,a+=1e9)),[t,a]},platform:"browser",release:{},config:{},uptime:function(){return(new Date-Z)/1e3}},Y=function(e,n){h.forEach(e,(function(t,a){a!==n&&a.toUpperCase()===n.toUpperCase()&&(e[n]=t,delete e[a])}))},V=function(e,n,t,a,i){return e.config=n,t&&(e.code=t),e.request=a,e.response=i,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e},W=function(e,n,t,a,i){var o=new Error(e);return V(o,n,t,a,i)},K=function(e,n,t){var a=t.config.validateStatus;t.status&&a&&!a(t.status)?n(W("Request failed with status code "+t.status,t.config,null,t.request,t)):e(t)},G=h.isStandardBrowserEnv()?{write:function(e,n,t,a,i,o){var s=[];s.push(e+"="+encodeURIComponent(n)),h.isNumber(t)&&s.push("expires="+new Date(t).toGMTString()),h.isString(a)&&s.push("path="+a),h.isString(i)&&s.push("domain="+i),!0===o&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var n=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}},J=function(e,n){return e&&!/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(n)?function(e,n){return n?e.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):e}(e,n):n},X=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"],Q=h.isStandardBrowserEnv()?function(){var e,n=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");function a(e){var a=e;return n&&(t.setAttribute("href",a),a=t.href),t.setAttribute("href",a),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return e=a(window.location.href),function(n){var t=h.isString(n)?a(n):n;return t.protocol===e.protocol&&t.host===e.host}}():function(){return!0},ee=[],ne=[],te="undefined"!=typeof Uint8Array?Uint8Array:Array,ae=!1;function ie(){ae=!0;for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=0,t=e.length;n<t;++n)ee[n]=e[n],ne[e.charCodeAt(n)]=n;ne["-".charCodeAt(0)]=62,ne["_".charCodeAt(0)]=63}function oe(e,n,t){for(var a,i,o=[],s=n;s<t;s+=3)a=(e[s]<<16)+(e[s+1]<<8)+e[s+2],o.push(ee[(i=a)>>18&63]+ee[i>>12&63]+ee[i>>6&63]+ee[63&i]);return o.join("")}function se(e){var n;ae||ie();for(var t=e.length,a=t%3,i="",o=[],s=16383,r=0,c=t-a;r<c;r+=s)o.push(oe(e,r,r+s>c?c:r+s));return 1===a?(n=e[t-1],i+=ee[n>>2],i+=ee[n<<4&63],i+="=="):2===a&&(n=(e[t-2]<<8)+e[t-1],i+=ee[n>>10],i+=ee[n>>4&63],i+=ee[n<<2&63],i+="="),o.push(i),o.join("")}function re(e,n,t,a,i){var o,s,r=8*i-a-1,c=(1<<r)-1,p=c>>1,l=-7,u=t?i-1:0,d=t?-1:1,h=e[n+u];for(u+=d,o=h&(1<<-l)-1,h>>=-l,l+=r;l>0;o=256*o+e[n+u],u+=d,l-=8);for(s=o&(1<<-l)-1,o>>=-l,l+=a;l>0;s=256*s+e[n+u],u+=d,l-=8);if(0===o)o=1-p;else{if(o===c)return s?NaN:1/0*(h?-1:1);s+=Math.pow(2,a),o-=p}return(h?-1:1)*s*Math.pow(2,o-a)}function ce(e,n,t,a,i,o){var s,r,c,p=8*o-i-1,l=(1<<p)-1,u=l>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=a?0:o-1,m=a?1:-1,f=n<0||0===n&&1/n<0?1:0;for(n=Math.abs(n),isNaN(n)||n===1/0?(r=isNaN(n)?1:0,s=l):(s=Math.floor(Math.log(n)/Math.LN2),n*(c=Math.pow(2,-s))<1&&(s--,c*=2),(n+=s+u>=1?d/c:d*Math.pow(2,1-u))*c>=2&&(s++,c/=2),s+u>=l?(r=0,s=l):s+u>=1?(r=(n*c-1)*Math.pow(2,i),s+=u):(r=n*Math.pow(2,u-1)*Math.pow(2,i),s=0));i>=8;e[t+h]=255&r,h+=m,r/=256,i-=8);for(s=s<<i|r,p+=i;p>0;e[t+h]=255&s,h+=m,s/=256,p-=8);e[t+h-m]|=128*f}var pe={}.toString,le=Array.isArray||function(e){return"[object Array]"==pe.call(e)};me.TYPED_ARRAY_SUPPORT=void 0===w.TYPED_ARRAY_SUPPORT||w.TYPED_ARRAY_SUPPORT;var ue=de();function de(){return me.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function he(e,n){if(de()<n)throw new RangeError("Invalid typed array length");return me.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(n)).__proto__=me.prototype:(null===e&&(e=new me(n)),e.length=n),e}function me(e,n,t){if(!(me.TYPED_ARRAY_SUPPORT||this instanceof me))return new me(e,n,t);if("number"==typeof e){if("string"==typeof n)throw new Error("If encoding is specified then the first argument must be a string");return xe(this,e)}return fe(this,e,n,t)}function fe(e,n,t,a){if("number"==typeof n)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&n instanceof ArrayBuffer?function(e,n,t,a){if(n.byteLength,t<0||n.byteLength<t)throw new RangeError("'offset' is out of bounds");if(n.byteLength<t+(a||0))throw new RangeError("'length' is out of bounds");return n=void 0===t&&void 0===a?new Uint8Array(n):void 0===a?new Uint8Array(n,t):new Uint8Array(n,t,a),me.TYPED_ARRAY_SUPPORT?(e=n).__proto__=me.prototype:e=ge(e,n),e}(e,n,t,a):"string"==typeof n?function(e,n,t){if("string"==typeof t&&""!==t||(t="utf8"),!me.isEncoding(t))throw new TypeError('"encoding" must be a valid string encoding');var a=0|_e(n,t),i=(e=he(e,a)).write(n,t);return i!==a&&(e=e.slice(0,i)),e}(e,n,t):function(e,n){if(we(n)){var t=0|be(n.length);return 0===(e=he(e,t)).length||n.copy(e,0,0,t),e}if(n){if("undefined"!=typeof ArrayBuffer&&n.buffer instanceof ArrayBuffer||"length"in n)return"number"!=typeof n.length||(a=n.length)!=a?he(e,0):ge(e,n);if("Buffer"===n.type&&le(n.data))return ge(e,n.data)}var a;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,n)}function ve(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function xe(e,n){if(ve(n),e=he(e,n<0?0:0|be(n)),!me.TYPED_ARRAY_SUPPORT)for(var t=0;t<n;++t)e[t]=0;return e}function ge(e,n){var t=n.length<0?0:0|be(n.length);e=he(e,t);for(var a=0;a<t;a+=1)e[a]=255&n[a];return e}function be(e){if(e>=de())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+de().toString(16)+" bytes");return 0|e}function we(e){return!(null==e||!e._isBuffer)}function _e(e,n){if(we(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var t=e.length;if(0===t)return 0;for(var a=!1;;)switch(n){case"ascii":case"latin1":case"binary":return t;case"utf8":case"utf-8":case void 0:return We(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*t;case"hex":return t>>>1;case"base64":return Ke(e).length;default:if(a)return We(e).length;n=(""+n).toLowerCase(),a=!0}}function ye(e,n,t){var a=!1;if((void 0===n||n<0)&&(n=0),n>this.length)return"";if((void 0===t||t>this.length)&&(t=this.length),t<=0)return"";if((t>>>=0)<=(n>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return Me(this,n,t);case"utf8":case"utf-8":return Le(this,n,t);case"ascii":return Be(this,n,t);case"latin1":case"binary":return Ue(this,n,t);case"base64":return Te(this,n,t);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Pe(this,n,t);default:if(a)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),a=!0}}function ke(e,n,t){var a=e[n];e[n]=e[t],e[t]=a}function Ee(e,n,t,a,i){if(0===e.length)return-1;if("string"==typeof t?(a=t,t=0):t>2147483647?t=2147483647:t<-2147483648&&(t=-2147483648),t=+t,isNaN(t)&&(t=i?0:e.length-1),t<0&&(t=e.length+t),t>=e.length){if(i)return-1;t=e.length-1}else if(t<0){if(!i)return-1;t=0}if("string"==typeof n&&(n=me.from(n,a)),we(n))return 0===n.length?-1:je(e,n,t,a,i);if("number"==typeof n)return n&=255,me.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,n,t):Uint8Array.prototype.lastIndexOf.call(e,n,t):je(e,[n],t,a,i);throw new TypeError("val must be string, number or Buffer")}function je(e,n,t,a,i){var o,s=1,r=e.length,c=n.length;if(void 0!==a&&("ucs2"===(a=String(a).toLowerCase())||"ucs-2"===a||"utf16le"===a||"utf-16le"===a)){if(e.length<2||n.length<2)return-1;s=2,r/=2,c/=2,t/=2}function p(e,n){return 1===s?e[n]:e.readUInt16BE(n*s)}if(i){var l=-1;for(o=t;o<r;o++)if(p(e,o)===p(n,-1===l?0:o-l)){if(-1===l&&(l=o),o-l+1===c)return l*s}else-1!==l&&(o-=o-l),l=-1}else for(t+c>r&&(t=r-c),o=t;o>=0;o--){for(var u=!0,d=0;d<c;d++)if(p(e,o+d)!==p(n,d)){u=!1;break}if(u)return o}return-1}function Ae(e,n,t,a){t=Number(t)||0;var i=e.length-t;a?(a=Number(a))>i&&(a=i):a=i;var o=n.length;if(o%2!=0)throw new TypeError("Invalid hex string");a>o/2&&(a=o/2);for(var s=0;s<a;++s){var r=parseInt(n.substr(2*s,2),16);if(isNaN(r))return s;e[t+s]=r}return s}function Re(e,n,t,a){return Ge(We(n,e.length-t),e,t,a)}function ze(e,n,t,a){return Ge(function(e){for(var n=[],t=0;t<e.length;++t)n.push(255&e.charCodeAt(t));return n}(n),e,t,a)}function Ce(e,n,t,a){return ze(e,n,t,a)}function Se(e,n,t,a){return Ge(Ke(n),e,t,a)}function Oe(e,n,t,a){return Ge(function(e,n){for(var t,a,i,o=[],s=0;s<e.length&&!((n-=2)<0);++s)a=(t=e.charCodeAt(s))>>8,i=t%256,o.push(i),o.push(a);return o}(n,e.length-t),e,t,a)}function Te(e,n,t){return 0===n&&t===e.length?se(e):se(e.slice(n,t))}function Le(e,n,t){t=Math.min(e.length,t);for(var a=[],i=n;i<t;){var o,s,r,c,p=e[i],l=null,u=p>239?4:p>223?3:p>191?2:1;if(i+u<=t)switch(u){case 1:p<128&&(l=p);break;case 2:128==(192&(o=e[i+1]))&&(c=(31&p)<<6|63&o)>127&&(l=c);break;case 3:o=e[i+1],s=e[i+2],128==(192&o)&&128==(192&s)&&(c=(15&p)<<12|(63&o)<<6|63&s)>2047&&(c<55296||c>57343)&&(l=c);break;case 4:o=e[i+1],s=e[i+2],r=e[i+3],128==(192&o)&&128==(192&s)&&128==(192&r)&&(c=(15&p)<<18|(63&o)<<12|(63&s)<<6|63&r)>65535&&c<1114112&&(l=c)}null===l?(l=65533,u=1):l>65535&&(l-=65536,a.push(l>>>10&1023|55296),l=56320|1023&l),a.push(l),i+=u}return function(e){var n=e.length;if(n<=qe)return String.fromCharCode.apply(String,e);for(var t="",a=0;a<n;)t+=String.fromCharCode.apply(String,e.slice(a,a+=qe));return t}(a)}me.poolSize=8192,me._augment=function(e){return e.__proto__=me.prototype,e},me.from=function(e,n,t){return fe(null,e,n,t)},me.TYPED_ARRAY_SUPPORT&&(me.prototype.__proto__=Uint8Array.prototype,me.__proto__=Uint8Array),me.alloc=function(e,n,t){return function(e,n,t,a){return ve(n),n<=0?he(e,n):void 0!==t?"string"==typeof a?he(e,n).fill(t,a):he(e,n).fill(t):he(e,n)}(null,e,n,t)},me.allocUnsafe=function(e){return xe(null,e)},me.allocUnsafeSlow=function(e){return xe(null,e)},me.isBuffer=Je,me.compare=function(e,n){if(!we(e)||!we(n))throw new TypeError("Arguments must be Buffers");if(e===n)return 0;for(var t=e.length,a=n.length,i=0,o=Math.min(t,a);i<o;++i)if(e[i]!==n[i]){t=e[i],a=n[i];break}return t<a?-1:a<t?1:0},me.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},me.concat=function(e,n){if(!le(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return me.alloc(0);var t;if(void 0===n)for(n=0,t=0;t<e.length;++t)n+=e[t].length;var a=me.allocUnsafe(n),i=0;for(t=0;t<e.length;++t){var o=e[t];if(!we(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(a,i),i+=o.length}return a},me.byteLength=_e,me.prototype._isBuffer=!0,me.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var n=0;n<e;n+=2)ke(this,n,n+1);return this},me.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var n=0;n<e;n+=4)ke(this,n,n+3),ke(this,n+1,n+2);return this},me.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var n=0;n<e;n+=8)ke(this,n,n+7),ke(this,n+1,n+6),ke(this,n+2,n+5),ke(this,n+3,n+4);return this},me.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?Le(this,0,e):ye.apply(this,arguments)},me.prototype.equals=function(e){if(!we(e))throw new TypeError("Argument must be a Buffer");return this===e||0===me.compare(this,e)},me.prototype.inspect=function(){var e="";return this.length>0&&(e=this.toString("hex",0,50).match(/.{2}/g).join(" "),this.length>50&&(e+=" ... ")),"<Buffer "+e+">"},me.prototype.compare=function(e,n,t,a,i){if(!we(e))throw new TypeError("Argument must be a Buffer");if(void 0===n&&(n=0),void 0===t&&(t=e?e.length:0),void 0===a&&(a=0),void 0===i&&(i=this.length),n<0||t>e.length||a<0||i>this.length)throw new RangeError("out of range index");if(a>=i&&n>=t)return 0;if(a>=i)return-1;if(n>=t)return 1;if(this===e)return 0;for(var o=(i>>>=0)-(a>>>=0),s=(t>>>=0)-(n>>>=0),r=Math.min(o,s),c=this.slice(a,i),p=e.slice(n,t),l=0;l<r;++l)if(c[l]!==p[l]){o=c[l],s=p[l];break}return o<s?-1:s<o?1:0},me.prototype.includes=function(e,n,t){return-1!==this.indexOf(e,n,t)},me.prototype.indexOf=function(e,n,t){return Ee(this,e,n,t,!0)},me.prototype.lastIndexOf=function(e,n,t){return Ee(this,e,n,t,!1)},me.prototype.write=function(e,n,t,a){if(void 0===n)a="utf8",t=this.length,n=0;else if(void 0===t&&"string"==typeof n)a=n,t=this.length,n=0;else{if(!isFinite(n))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");n|=0,isFinite(t)?(t|=0,void 0===a&&(a="utf8")):(a=t,t=void 0)}var i=this.length-n;if((void 0===t||t>i)&&(t=i),e.length>0&&(t<0||n<0)||n>this.length)throw new RangeError("Attempt to write outside buffer bounds");a||(a="utf8");for(var o=!1;;)switch(a){case"hex":return Ae(this,e,n,t);case"utf8":case"utf-8":return Re(this,e,n,t);case"ascii":return ze(this,e,n,t);case"latin1":case"binary":return Ce(this,e,n,t);case"base64":return Se(this,e,n,t);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Oe(this,e,n,t);default:if(o)throw new TypeError("Unknown encoding: "+a);a=(""+a).toLowerCase(),o=!0}},me.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var qe=4096;function Be(e,n,t){var a="";t=Math.min(e.length,t);for(var i=n;i<t;++i)a+=String.fromCharCode(127&e[i]);return a}function Ue(e,n,t){var a="";t=Math.min(e.length,t);for(var i=n;i<t;++i)a+=String.fromCharCode(e[i]);return a}function Me(e,n,t){var a=e.length;(!n||n<0)&&(n=0),(!t||t<0||t>a)&&(t=a);for(var i="",o=n;o<t;++o)i+=Ve(e[o]);return i}function Pe(e,n,t){for(var a=e.slice(n,t),i="",o=0;o<a.length;o+=2)i+=String.fromCharCode(a[o]+256*a[o+1]);return i}function Fe(e,n,t){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+n>t)throw new RangeError("Trying to access beyond buffer length")}function Ne(e,n,t,a,i,o){if(!we(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(n>i||n<o)throw new RangeError('"value" argument is out of bounds');if(t+a>e.length)throw new RangeError("Index out of range")}function Ie(e,n,t,a){n<0&&(n=65535+n+1);for(var i=0,o=Math.min(e.length-t,2);i<o;++i)e[t+i]=(n&255<<8*(a?i:1-i))>>>8*(a?i:1-i)}function $e(e,n,t,a){n<0&&(n=4294967295+n+1);for(var i=0,o=Math.min(e.length-t,4);i<o;++i)e[t+i]=n>>>8*(a?i:3-i)&255}function De(e,n,t,a,i,o){if(t+a>e.length)throw new RangeError("Index out of range");if(t<0)throw new RangeError("Index out of range")}function Ze(e,n,t,a,i){return i||De(e,0,t,4),ce(e,n,t,a,23,4),t+4}function He(e,n,t,a,i){return i||De(e,0,t,8),ce(e,n,t,a,52,8),t+8}me.prototype.slice=function(e,n){var t,a=this.length;if((e=~~e)<0?(e+=a)<0&&(e=0):e>a&&(e=a),(n=void 0===n?a:~~n)<0?(n+=a)<0&&(n=0):n>a&&(n=a),n<e&&(n=e),me.TYPED_ARRAY_SUPPORT)(t=this.subarray(e,n)).__proto__=me.prototype;else{var i=n-e;t=new me(i,void 0);for(var o=0;o<i;++o)t[o]=this[o+e]}return t},me.prototype.readUIntLE=function(e,n,t){e|=0,n|=0,t||Fe(e,n,this.length);for(var a=this[e],i=1,o=0;++o<n&&(i*=256);)a+=this[e+o]*i;return a},me.prototype.readUIntBE=function(e,n,t){e|=0,n|=0,t||Fe(e,n,this.length);for(var a=this[e+--n],i=1;n>0&&(i*=256);)a+=this[e+--n]*i;return a},me.prototype.readUInt8=function(e,n){return n||Fe(e,1,this.length),this[e]},me.prototype.readUInt16LE=function(e,n){return n||Fe(e,2,this.length),this[e]|this[e+1]<<8},me.prototype.readUInt16BE=function(e,n){return n||Fe(e,2,this.length),this[e]<<8|this[e+1]},me.prototype.readUInt32LE=function(e,n){return n||Fe(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},me.prototype.readUInt32BE=function(e,n){return n||Fe(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},me.prototype.readIntLE=function(e,n,t){e|=0,n|=0,t||Fe(e,n,this.length);for(var a=this[e],i=1,o=0;++o<n&&(i*=256);)a+=this[e+o]*i;return a>=(i*=128)&&(a-=Math.pow(2,8*n)),a},me.prototype.readIntBE=function(e,n,t){e|=0,n|=0,t||Fe(e,n,this.length);for(var a=n,i=1,o=this[e+--a];a>0&&(i*=256);)o+=this[e+--a]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*n)),o},me.prototype.readInt8=function(e,n){return n||Fe(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},me.prototype.readInt16LE=function(e,n){n||Fe(e,2,this.length);var t=this[e]|this[e+1]<<8;return 32768&t?4294901760|t:t},me.prototype.readInt16BE=function(e,n){n||Fe(e,2,this.length);var t=this[e+1]|this[e]<<8;return 32768&t?4294901760|t:t},me.prototype.readInt32LE=function(e,n){return n||Fe(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},me.prototype.readInt32BE=function(e,n){return n||Fe(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},me.prototype.readFloatLE=function(e,n){return n||Fe(e,4,this.length),re(this,e,!0,23,4)},me.prototype.readFloatBE=function(e,n){return n||Fe(e,4,this.length),re(this,e,!1,23,4)},me.prototype.readDoubleLE=function(e,n){return n||Fe(e,8,this.length),re(this,e,!0,52,8)},me.prototype.readDoubleBE=function(e,n){return n||Fe(e,8,this.length),re(this,e,!1,52,8)},me.prototype.writeUIntLE=function(e,n,t,a){e=+e,n|=0,t|=0,a||Ne(this,e,n,t,Math.pow(2,8*t)-1,0);var i=1,o=0;for(this[n]=255&e;++o<t&&(i*=256);)this[n+o]=e/i&255;return n+t},me.prototype.writeUIntBE=function(e,n,t,a){e=+e,n|=0,t|=0,a||Ne(this,e,n,t,Math.pow(2,8*t)-1,0);var i=t-1,o=1;for(this[n+i]=255&e;--i>=0&&(o*=256);)this[n+i]=e/o&255;return n+t},me.prototype.writeUInt8=function(e,n,t){return e=+e,n|=0,t||Ne(this,e,n,1,255,0),me.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[n]=255&e,n+1},me.prototype.writeUInt16LE=function(e,n,t){return e=+e,n|=0,t||Ne(this,e,n,2,65535,0),me.TYPED_ARRAY_SUPPORT?(this[n]=255&e,this[n+1]=e>>>8):Ie(this,e,n,!0),n+2},me.prototype.writeUInt16BE=function(e,n,t){return e=+e,n|=0,t||Ne(this,e,n,2,65535,0),me.TYPED_ARRAY_SUPPORT?(this[n]=e>>>8,this[n+1]=255&e):Ie(this,e,n,!1),n+2},me.prototype.writeUInt32LE=function(e,n,t){return e=+e,n|=0,t||Ne(this,e,n,4,4294967295,0),me.TYPED_ARRAY_SUPPORT?(this[n+3]=e>>>24,this[n+2]=e>>>16,this[n+1]=e>>>8,this[n]=255&e):$e(this,e,n,!0),n+4},me.prototype.writeUInt32BE=function(e,n,t){return e=+e,n|=0,t||Ne(this,e,n,4,4294967295,0),me.TYPED_ARRAY_SUPPORT?(this[n]=e>>>24,this[n+1]=e>>>16,this[n+2]=e>>>8,this[n+3]=255&e):$e(this,e,n,!1),n+4},me.prototype.writeIntLE=function(e,n,t,a){if(e=+e,n|=0,!a){var i=Math.pow(2,8*t-1);Ne(this,e,n,t,i-1,-i)}var o=0,s=1,r=0;for(this[n]=255&e;++o<t&&(s*=256);)e<0&&0===r&&0!==this[n+o-1]&&(r=1),this[n+o]=(e/s>>0)-r&255;return n+t},me.prototype.writeIntBE=function(e,n,t,a){if(e=+e,n|=0,!a){var i=Math.pow(2,8*t-1);Ne(this,e,n,t,i-1,-i)}var o=t-1,s=1,r=0;for(this[n+o]=255&e;--o>=0&&(s*=256);)e<0&&0===r&&0!==this[n+o+1]&&(r=1),this[n+o]=(e/s>>0)-r&255;return n+t},me.prototype.writeInt8=function(e,n,t){return e=+e,n|=0,t||Ne(this,e,n,1,127,-128),me.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[n]=255&e,n+1},me.prototype.writeInt16LE=function(e,n,t){return e=+e,n|=0,t||Ne(this,e,n,2,32767,-32768),me.TYPED_ARRAY_SUPPORT?(this[n]=255&e,this[n+1]=e>>>8):Ie(this,e,n,!0),n+2},me.prototype.writeInt16BE=function(e,n,t){return e=+e,n|=0,t||Ne(this,e,n,2,32767,-32768),me.TYPED_ARRAY_SUPPORT?(this[n]=e>>>8,this[n+1]=255&e):Ie(this,e,n,!1),n+2},me.prototype.writeInt32LE=function(e,n,t){return e=+e,n|=0,t||Ne(this,e,n,4,2147483647,-2147483648),me.TYPED_ARRAY_SUPPORT?(this[n]=255&e,this[n+1]=e>>>8,this[n+2]=e>>>16,this[n+3]=e>>>24):$e(this,e,n,!0),n+4},me.prototype.writeInt32BE=function(e,n,t){return e=+e,n|=0,t||Ne(this,e,n,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),me.TYPED_ARRAY_SUPPORT?(this[n]=e>>>24,this[n+1]=e>>>16,this[n+2]=e>>>8,this[n+3]=255&e):$e(this,e,n,!1),n+4},me.prototype.writeFloatLE=function(e,n,t){return Ze(this,e,n,!0,t)},me.prototype.writeFloatBE=function(e,n,t){return Ze(this,e,n,!1,t)},me.prototype.writeDoubleLE=function(e,n,t){return He(this,e,n,!0,t)},me.prototype.writeDoubleBE=function(e,n,t){return He(this,e,n,!1,t)},me.prototype.copy=function(e,n,t,a){if(t||(t=0),a||0===a||(a=this.length),n>=e.length&&(n=e.length),n||(n=0),a>0&&a<t&&(a=t),a===t)return 0;if(0===e.length||0===this.length)return 0;if(n<0)throw new RangeError("targetStart out of bounds");if(t<0||t>=this.length)throw new RangeError("sourceStart out of bounds");if(a<0)throw new RangeError("sourceEnd out of bounds");a>this.length&&(a=this.length),e.length-n<a-t&&(a=e.length-n+t);var i,o=a-t;if(this===e&&t<n&&n<a)for(i=o-1;i>=0;--i)e[i+n]=this[i+t];else if(o<1e3||!me.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)e[i+n]=this[i+t];else Uint8Array.prototype.set.call(e,this.subarray(t,t+o),n);return o},me.prototype.fill=function(e,n,t,a){if("string"==typeof e){if("string"==typeof n?(a=n,n=0,t=this.length):"string"==typeof t&&(a=t,t=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==a&&"string"!=typeof a)throw new TypeError("encoding must be a string");if("string"==typeof a&&!me.isEncoding(a))throw new TypeError("Unknown encoding: "+a)}else"number"==typeof e&&(e&=255);if(n<0||this.length<n||this.length<t)throw new RangeError("Out of range index");if(t<=n)return this;var o;if(n>>>=0,t=void 0===t?this.length:t>>>0,e||(e=0),"number"==typeof e)for(o=n;o<t;++o)this[o]=e;else{var s=we(e)?e:We(new me(e,a).toString()),r=s.length;for(o=0;o<t-n;++o)this[o+n]=s[o%r]}return this};var Ye=/[^+\/0-9A-Za-z-_]/g;function Ve(e){return e<16?"0"+e.toString(16):e.toString(16)}function We(e,n){var t;n=n||1/0;for(var a=e.length,i=null,o=[],s=0;s<a;++s){if((t=e.charCodeAt(s))>55295&&t<57344){if(!i){if(t>56319){(n-=3)>-1&&o.push(239,191,189);continue}if(s+1===a){(n-=3)>-1&&o.push(239,191,189);continue}i=t;continue}if(t<56320){(n-=3)>-1&&o.push(239,191,189),i=t;continue}t=65536+(i-55296<<10|t-56320)}else i&&(n-=3)>-1&&o.push(239,191,189);if(i=null,t<128){if((n-=1)<0)break;o.push(t)}else if(t<2048){if((n-=2)<0)break;o.push(t>>6|192,63&t|128)}else if(t<65536){if((n-=3)<0)break;o.push(t>>12|224,t>>6&63|128,63&t|128)}else{if(!(t<1114112))throw new Error("Invalid code point");if((n-=4)<0)break;o.push(t>>18|240,t>>12&63|128,t>>6&63|128,63&t|128)}}return o}function Ke(e){return function(e){var n,t,a,i,o,s;ae||ie();var r=e.length;if(r%4>0)throw new Error("Invalid string. Length must be a multiple of 4");o="="===e[r-2]?2:"="===e[r-1]?1:0,s=new te(3*r/4-o),a=o>0?r-4:r;var c=0;for(n=0,t=0;n<a;n+=4,t+=3)i=ne[e.charCodeAt(n)]<<18|ne[e.charCodeAt(n+1)]<<12|ne[e.charCodeAt(n+2)]<<6|ne[e.charCodeAt(n+3)],s[c++]=i>>16&255,s[c++]=i>>8&255,s[c++]=255&i;return 2===o?(i=ne[e.charCodeAt(n)]<<2|ne[e.charCodeAt(n+1)]>>4,s[c++]=255&i):1===o&&(i=ne[e.charCodeAt(n)]<<10|ne[e.charCodeAt(n+1)]<<4|ne[e.charCodeAt(n+2)]>>2,s[c++]=i>>8&255,s[c++]=255&i),s}(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(Ye,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Ge(e,n,t,a){for(var i=0;i<a&&!(i+t>=n.length||i>=e.length);++i)n[i+t]=e[i];return i}function Je(e){return null!=e&&(!!e._isBuffer||Xe(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&Xe(e.slice(0,0))}(e))}function Xe(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}var Qe,en,nn=Object.freeze({__proto__:null,Buffer:me,INSPECT_MAX_BYTES:50,SlowBuffer:function(e){return+e!=e&&(e=0),me.alloc(+e)},isBuffer:Je,kMaxLength:ue}),tn=dn(w.fetch)&&dn(w.ReadableStream);function an(e){en||(en=new w.XMLHttpRequest).open("GET",w.location.host?"/":"https://example.com");try{return en.responseType=e,en.responseType===e}catch(e){return!1}}var on=void 0!==w.ArrayBuffer,sn=on&&dn(w.ArrayBuffer.prototype.slice),rn=on&&an("arraybuffer"),cn=!tn&&sn&&an("ms-stream"),pn=!tn&&on&&an("moz-chunked-arraybuffer"),ln=dn(en.overrideMimeType),un=dn(w.VBArray);function dn(e){return"function"==typeof e}en=null;var hn="function"==typeof Object.create?function(e,n){e.super_=n,e.prototype=Object.create(n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:function(e,n){e.super_=n;var t=function(){};t.prototype=n.prototype,e.prototype=new t,e.prototype.constructor=e},mn=/%[sdj%]/g;function fn(e){if(!On(e)){for(var n=[],t=0;t<arguments.length;t++)n.push(wn(arguments[t]));return n.join(" ")}t=1;for(var a=arguments,i=a.length,o=String(e).replace(mn,(function(e){if("%%"===e)return"%";if(t>=i)return e;switch(e){case"%s":return String(a[t++]);case"%d":return Number(a[t++]);case"%j":try{return JSON.stringify(a[t++])}catch(e){return"[Circular]"}default:return e}})),s=a[t];t<i;s=a[++t])zn(s)||!qn(s)?o+=" "+s:o+=" "+wn(s);return o}function vn(e,n){if(Tn(w.process))return function(){return vn(e,n).apply(this,arguments)};if(!0===H.noDeprecation)return e;var t=!1;return function(){if(!t){if(H.throwDeprecation)throw new Error(n);H.traceDeprecation?console.trace(n):console.error(n),t=!0}return e.apply(this,arguments)}}var xn,gn={};function bn(e){return Tn(xn)&&(xn=H.env.NODE_DEBUG||""),e=e.toUpperCase(),gn[e]||(new RegExp("\\b"+e+"\\b","i").test(xn)?gn[e]=function(){var n=fn.apply(null,arguments);console.error("%s %d: %s",e,0,n)}:gn[e]=function(){}),gn[e]}function wn(e,n){var t={seen:[],stylize:yn};return arguments.length>=3&&(t.depth=arguments[2]),arguments.length>=4&&(t.colors=arguments[3]),Rn(n)?t.showHidden=n:n&&$n(t,n),Tn(t.showHidden)&&(t.showHidden=!1),Tn(t.depth)&&(t.depth=2),Tn(t.colors)&&(t.colors=!1),Tn(t.customInspect)&&(t.customInspect=!0),t.colors&&(t.stylize=_n),kn(t,e,t.depth)}function _n(e,n){var t=wn.styles[n];return t?"["+wn.colors[t][0]+"m"+e+"["+wn.colors[t][1]+"m":e}function yn(e,n){return e}function kn(e,n,t){if(e.customInspect&&n&&Mn(n.inspect)&&n.inspect!==wn&&(!n.constructor||n.constructor.prototype!==n)){var a=n.inspect(t,e);return On(a)||(a=kn(e,a,t)),a}var i=function(e,n){if(Tn(n))return e.stylize("undefined","undefined");if(On(n)){var t="'"+JSON.stringify(n).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(t,"string")}return Sn(n)?e.stylize(""+n,"number"):Rn(n)?e.stylize(""+n,"boolean"):zn(n)?e.stylize("null","null"):void 0}(e,n);if(i)return i;var o=Object.keys(n),s=function(e){var n={};return e.forEach((function(e,t){n[e]=!0})),n}(o);if(e.showHidden&&(o=Object.getOwnPropertyNames(n)),Un(n)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return En(n);if(0===o.length){if(Mn(n)){var r=n.name?": "+n.name:"";return e.stylize("[Function"+r+"]","special")}if(Ln(n))return e.stylize(RegExp.prototype.toString.call(n),"regexp");if(Bn(n))return e.stylize(Date.prototype.toString.call(n),"date");if(Un(n))return En(n)}var c,p="",l=!1,u=["{","}"];return An(n)&&(l=!0,u=["[","]"]),Mn(n)&&(p=" [Function"+(n.name?": "+n.name:"")+"]"),Ln(n)&&(p=" "+RegExp.prototype.toString.call(n)),Bn(n)&&(p=" "+Date.prototype.toUTCString.call(n)),Un(n)&&(p=" "+En(n)),0!==o.length||l&&0!=n.length?t<0?Ln(n)?e.stylize(RegExp.prototype.toString.call(n),"regexp"):e.stylize("[Object]","special"):(e.seen.push(n),c=l?function(e,n,t,a,i){for(var o=[],s=0,r=n.length;s<r;++s)Dn(n,String(s))?o.push(jn(e,n,t,a,String(s),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(jn(e,n,t,a,i,!0))})),o}(e,n,t,s,o):o.map((function(a){return jn(e,n,t,s,a,l)})),e.seen.pop(),function(e,n,t){var a=e.reduce((function(e,n){return n.indexOf("\n"),e+n.replace(/\u001b\[\d\d?m/g,"").length+1}),0);return a>60?t[0]+(""===n?"":n+"\n ")+" "+e.join(",\n  ")+" "+t[1]:t[0]+n+" "+e.join(", ")+" "+t[1]}(c,p,u)):u[0]+p+u[1]}function En(e){return"["+Error.prototype.toString.call(e)+"]"}function jn(e,n,t,a,i,o){var s,r,c;if((c=Object.getOwnPropertyDescriptor(n,i)||{value:n[i]}).get?r=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(r=e.stylize("[Setter]","special")),Dn(a,i)||(s="["+i+"]"),r||(e.seen.indexOf(c.value)<0?(r=zn(t)?kn(e,c.value,null):kn(e,c.value,t-1)).indexOf("\n")>-1&&(r=o?r.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+r.split("\n").map((function(e){return"   "+e})).join("\n")):r=e.stylize("[Circular]","special")),Tn(s)){if(o&&i.match(/^\d+$/))return r;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+r}function An(e){return Array.isArray(e)}function Rn(e){return"boolean"==typeof e}function zn(e){return null===e}function Cn(e){return null==e}function Sn(e){return"number"==typeof e}function On(e){return"string"==typeof e}function Tn(e){return void 0===e}function Ln(e){return qn(e)&&"[object RegExp]"===Fn(e)}function qn(e){return"object"==typeof e&&null!==e}function Bn(e){return qn(e)&&"[object Date]"===Fn(e)}function Un(e){return qn(e)&&("[object Error]"===Fn(e)||e instanceof Error)}function Mn(e){return"function"==typeof e}function Pn(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e}function Fn(e){return Object.prototype.toString.call(e)}function Nn(e){return e<10?"0"+e.toString(10):e.toString(10)}wn.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},wn.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"};var In=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function $n(e,n){if(!n||!qn(n))return e;for(var t=Object.keys(n),a=t.length;a--;)e[t[a]]=n[t[a]];return e}function Dn(e,n){return Object.prototype.hasOwnProperty.call(e,n)}var Zn={inherits:hn,_extend:$n,log:function(){console.log("%s - %s",function(){var e=new Date,n=[Nn(e.getHours()),Nn(e.getMinutes()),Nn(e.getSeconds())].join(":");return[e.getDate(),In[e.getMonth()],n].join(" ")}(),fn.apply(null,arguments))},isBuffer:function(e){return me.isBuffer(e)},isPrimitive:Pn,isFunction:Mn,isError:Un,isDate:Bn,isObject:qn,isRegExp:Ln,isUndefined:Tn,isSymbol:function(e){return"symbol"==typeof e},isString:On,isNumber:Sn,isNullOrUndefined:Cn,isNull:zn,isBoolean:Rn,isArray:An,inspect:wn,deprecate:vn,format:fn,debuglog:bn};function Hn(){}function Yn(){Yn.init.call(this)}function Vn(e){return void 0===e._maxListeners?Yn.defaultMaxListeners:e._maxListeners}function Wn(e,n,t,a){var i,o,s,r;if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');if((o=e._events)?(o.newListener&&(e.emit("newListener",n,t.listener?t.listener:t),o=e._events),s=o[n]):(o=e._events=new Hn,e._eventsCount=0),s){if("function"==typeof s?s=o[n]=a?[t,s]:[s,t]:a?s.unshift(t):s.push(t),!s.warned&&(i=Vn(e))&&i>0&&s.length>i){s.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+n+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=n,c.count=s.length,r=c,"function"==typeof console.warn?console.warn(r):console.log(r)}}else s=o[n]=t,++e._eventsCount;return e}function Kn(e,n,t){var a=!1;function i(){e.removeListener(n,i),a||(a=!0,t.apply(e,arguments))}return i.listener=t,i}function Gn(e){var n=this._events;if(n){var t=n[e];if("function"==typeof t)return 1;if(t)return t.length}return 0}function Jn(e,n){for(var t=new Array(n);n--;)t[n]=e[n];return t}function Xn(){this.head=null,this.tail=null,this.length=0}Hn.prototype=Object.create(null),Yn.EventEmitter=Yn,Yn.usingDomains=!1,Yn.prototype.domain=void 0,Yn.prototype._events=void 0,Yn.prototype._maxListeners=void 0,Yn.defaultMaxListeners=10,Yn.init=function(){this.domain=null,Yn.usingDomains&&(void 0).active,this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new Hn,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},Yn.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=e,this},Yn.prototype.getMaxListeners=function(){return Vn(this)},Yn.prototype.emit=function(e){var n,t,a,i,o,s,r,c="error"===e;if(s=this._events)c=c&&null==s.error;else if(!c)return!1;if(r=this.domain,c){if(n=arguments[1],!r){if(n instanceof Error)throw n;var p=new Error('Uncaught, unspecified "error" event. ('+n+")");throw p.context=n,p}return n||(n=new Error('Uncaught, unspecified "error" event')),n.domainEmitter=this,n.domain=r,n.domainThrown=!1,r.emit("error",n),!1}if(!(t=s[e]))return!1;var l="function"==typeof t;switch(a=arguments.length){case 1:!function(e,n,t){if(n)e.call(t);else for(var a=e.length,i=Jn(e,a),o=0;o<a;++o)i[o].call(t)}(t,l,this);break;case 2:!function(e,n,t,a){if(n)e.call(t,a);else for(var i=e.length,o=Jn(e,i),s=0;s<i;++s)o[s].call(t,a)}(t,l,this,arguments[1]);break;case 3:!function(e,n,t,a,i){if(n)e.call(t,a,i);else for(var o=e.length,s=Jn(e,o),r=0;r<o;++r)s[r].call(t,a,i)}(t,l,this,arguments[1],arguments[2]);break;case 4:!function(e,n,t,a,i,o){if(n)e.call(t,a,i,o);else for(var s=e.length,r=Jn(e,s),c=0;c<s;++c)r[c].call(t,a,i,o)}(t,l,this,arguments[1],arguments[2],arguments[3]);break;default:for(i=new Array(a-1),o=1;o<a;o++)i[o-1]=arguments[o];!function(e,n,t,a){if(n)e.apply(t,a);else for(var i=e.length,o=Jn(e,i),s=0;s<i;++s)o[s].apply(t,a)}(t,l,this,i)}return!0},Yn.prototype.addListener=function(e,n){return Wn(this,e,n,!1)},Yn.prototype.on=Yn.prototype.addListener,Yn.prototype.prependListener=function(e,n){return Wn(this,e,n,!0)},Yn.prototype.once=function(e,n){if("function"!=typeof n)throw new TypeError('"listener" argument must be a function');return this.on(e,Kn(this,e,n)),this},Yn.prototype.prependOnceListener=function(e,n){if("function"!=typeof n)throw new TypeError('"listener" argument must be a function');return this.prependListener(e,Kn(this,e,n)),this},Yn.prototype.removeListener=function(e,n){var t,a,i,o,s;if("function"!=typeof n)throw new TypeError('"listener" argument must be a function');if(!(a=this._events))return this;if(!(t=a[e]))return this;if(t===n||t.listener&&t.listener===n)0==--this._eventsCount?this._events=new Hn:(delete a[e],a.removeListener&&this.emit("removeListener",e,t.listener||n));else if("function"!=typeof t){for(i=-1,o=t.length;o-- >0;)if(t[o]===n||t[o].listener&&t[o].listener===n){s=t[o].listener,i=o;break}if(i<0)return this;if(1===t.length){if(t[0]=void 0,0==--this._eventsCount)return this._events=new Hn,this;delete a[e]}else!function(e,n){for(var t=n,a=t+1,i=e.length;a<i;t+=1,a+=1)e[t]=e[a];e.pop()}(t,i);a.removeListener&&this.emit("removeListener",e,s||n)}return this},Yn.prototype.removeAllListeners=function(e){var n,t;if(!(t=this._events))return this;if(!t.removeListener)return 0===arguments.length?(this._events=new Hn,this._eventsCount=0):t[e]&&(0==--this._eventsCount?this._events=new Hn:delete t[e]),this;if(0===arguments.length){for(var a,i=Object.keys(t),o=0;o<i.length;++o)"removeListener"!==(a=i[o])&&this.removeAllListeners(a);return this.removeAllListeners("removeListener"),this._events=new Hn,this._eventsCount=0,this}if("function"==typeof(n=t[e]))this.removeListener(e,n);else if(n)do{this.removeListener(e,n[n.length-1])}while(n[0]);return this},Yn.prototype.listeners=function(e){var n,t=this._events;return t&&(n=t[e])?"function"==typeof n?[n.listener||n]:function(e){for(var n=new Array(e.length),t=0;t<n.length;++t)n[t]=e[t].listener||e[t];return n}(n):[]},Yn.listenerCount=function(e,n){return"function"==typeof e.listenerCount?e.listenerCount(n):Gn.call(e,n)},Yn.prototype.listenerCount=Gn,Yn.prototype.eventNames=function(){return this._eventsCount>0?Reflect.ownKeys(this._events):[]},Xn.prototype.push=function(e){var n={data:e,next:null};this.length>0?this.tail.next=n:this.head=n,this.tail=n,++this.length},Xn.prototype.unshift=function(e){var n={data:e,next:this.head};0===this.length&&(this.tail=n),this.head=n,++this.length},Xn.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},Xn.prototype.clear=function(){this.head=this.tail=null,this.length=0},Xn.prototype.join=function(e){if(0===this.length)return"";for(var n=this.head,t=""+n.data;n=n.next;)t+=e+n.data;return t},Xn.prototype.concat=function(e){if(0===this.length)return me.alloc(0);if(1===this.length)return this.head.data;for(var n=me.allocUnsafe(e>>>0),t=this.head,a=0;t;)t.data.copy(n,a),a+=t.data.length,t=t.next;return n};var Qn=me.isEncoding||function(e){switch(e&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function et(e){switch(this.encoding=(e||"utf8").toLowerCase().replace(/[-_]/,""),function(e){if(e&&!Qn(e))throw new Error("Unknown encoding: "+e)}(e),this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2,this.detectIncompleteChar=tt;break;case"base64":this.surrogateSize=3,this.detectIncompleteChar=at;break;default:return void(this.write=nt)}this.charBuffer=new me(6),this.charReceived=0,this.charLength=0}function nt(e){return e.toString(this.encoding)}function tt(e){this.charReceived=e.length%2,this.charLength=this.charReceived?2:0}function at(e){this.charReceived=e.length%3,this.charLength=this.charReceived?3:0}et.prototype.write=function(e){for(var n="";this.charLength;){var t=e.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:e.length;if(e.copy(this.charBuffer,this.charReceived,0,t),this.charReceived+=t,this.charReceived<this.charLength)return"";if(e=e.slice(t,e.length),!((a=(n=this.charBuffer.slice(0,this.charLength).toString(this.encoding)).charCodeAt(n.length-1))>=55296&&a<=56319)){if(this.charReceived=this.charLength=0,0===e.length)return n;break}this.charLength+=this.surrogateSize,n=""}this.detectIncompleteChar(e);var a,i=e.length;if(this.charLength&&(e.copy(this.charBuffer,0,e.length-this.charReceived,i),i-=this.charReceived),i=(n+=e.toString(this.encoding,0,i)).length-1,(a=n.charCodeAt(i))>=55296&&a<=56319){var o=this.surrogateSize;return this.charLength+=o,this.charReceived+=o,this.charBuffer.copy(this.charBuffer,o,0,o),e.copy(this.charBuffer,0,0,o),n.substring(0,i)}return n},et.prototype.detectIncompleteChar=function(e){for(var n=e.length>=3?3:e.length;n>0;n--){var t=e[e.length-n];if(1==n&&t>>5==6){this.charLength=2;break}if(n<=2&&t>>4==14){this.charLength=3;break}if(n<=3&&t>>3==30){this.charLength=4;break}}this.charReceived=n},et.prototype.end=function(e){var n="";if(e&&e.length&&(n=this.write(e)),this.charReceived){var t=this.charReceived,a=this.charBuffer,i=this.encoding;n+=a.slice(0,t).toString(i)}return n},st.ReadableState=ot;var it=bn("stream");function ot(e,n){e=e||{},this.objectMode=!!e.objectMode,n instanceof qt&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var t=e.highWaterMark,a=this.objectMode?16:16384;this.highWaterMark=t||0===t?t:a,this.highWaterMark=~~this.highWaterMark,this.buffer=new Xn,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.ranOut=!1,this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(this.decoder=new et(e.encoding),this.encoding=e.encoding)}function st(e){if(!(this instanceof st))return new st(e);this._readableState=new ot(e,this),this.readable=!0,e&&"function"==typeof e.read&&(this._read=e.read),Yn.call(this)}function rt(e,n,t,a,i){var o=function(e,n){var t=null;return me.isBuffer(n)||"string"==typeof n||null==n||e.objectMode||(t=new TypeError("Invalid non-string/buffer chunk")),t}(n,t);if(o)e.emit("error",o);else if(null===t)n.reading=!1,function(e,n){if(!n.ended){if(n.decoder){var t=n.decoder.end();t&&t.length&&(n.buffer.push(t),n.length+=n.objectMode?1:t.length)}n.ended=!0,lt(e)}}(e,n);else if(n.objectMode||t&&t.length>0)if(n.ended&&!i){var s=new Error("stream.push() after EOF");e.emit("error",s)}else if(n.endEmitted&&i){var r=new Error("stream.unshift() after end event");e.emit("error",r)}else{var c;!n.decoder||i||a||(t=n.decoder.write(t),c=!n.objectMode&&0===t.length),i||(n.reading=!1),c||(n.flowing&&0===n.length&&!n.sync?(e.emit("data",t),e.read(0)):(n.length+=n.objectMode?1:t.length,i?n.buffer.unshift(t):n.buffer.push(t),n.needReadable&&lt(e))),function(e,n){n.readingMore||(n.readingMore=!0,T(dt,e,n))}(e,n)}else i||(n.reading=!1);return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(n)}hn(st,Yn),st.prototype.push=function(e,n){var t=this._readableState;return t.objectMode||"string"!=typeof e||(n=n||t.defaultEncoding)!==t.encoding&&(e=me.from(e,n),n=""),rt(this,t,e,n,!1)},st.prototype.unshift=function(e){return rt(this,this._readableState,e,"",!0)},st.prototype.isPaused=function(){return!1===this._readableState.flowing},st.prototype.setEncoding=function(e){return this._readableState.decoder=new et(e),this._readableState.encoding=e,this};var ct=8388608;function pt(e,n){return e<=0||0===n.length&&n.ended?0:n.objectMode?1:e!=e?n.flowing&&n.length?n.buffer.head.data.length:n.length:(e>n.highWaterMark&&(n.highWaterMark=function(e){return e>=ct?e=ct:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=n.length?e:n.ended?n.length:(n.needReadable=!0,0))}function lt(e){var n=e._readableState;n.needReadable=!1,n.emittedReadable||(it("emitReadable",n.flowing),n.emittedReadable=!0,n.sync?T(ut,e):ut(e))}function ut(e){it("emit readable"),e.emit("readable"),ft(e)}function dt(e,n){for(var t=n.length;!n.reading&&!n.flowing&&!n.ended&&n.length<n.highWaterMark&&(it("maybeReadMore read 0"),e.read(0),t!==n.length);)t=n.length;n.readingMore=!1}function ht(e){it("readable nexttick read 0"),e.read(0)}function mt(e,n){n.reading||(it("resume read 0"),e.read(0)),n.resumeScheduled=!1,n.awaitDrain=0,e.emit("resume"),ft(e),n.flowing&&!n.reading&&e.read(0)}function ft(e){var n=e._readableState;for(it("flow",n.flowing);n.flowing&&null!==e.read(););}function vt(e,n){return 0===n.length?null:(n.objectMode?t=n.buffer.shift():!e||e>=n.length?(t=n.decoder?n.buffer.join(""):1===n.buffer.length?n.buffer.head.data:n.buffer.concat(n.length),n.buffer.clear()):t=function(e,n,t){var a;return e<n.head.data.length?(a=n.head.data.slice(0,e),n.head.data=n.head.data.slice(e)):a=e===n.head.data.length?n.shift():t?function(e,n){var t=n.head,a=1,i=t.data;for(e-=i.length;t=t.next;){var o=t.data,s=e>o.length?o.length:e;if(s===o.length?i+=o:i+=o.slice(0,e),0==(e-=s)){s===o.length?(++a,t.next?n.head=t.next:n.head=n.tail=null):(n.head=t,t.data=o.slice(s));break}++a}return n.length-=a,i}(e,n):function(e,n){var t=me.allocUnsafe(e),a=n.head,i=1;for(a.data.copy(t),e-=a.data.length;a=a.next;){var o=a.data,s=e>o.length?o.length:e;if(o.copy(t,t.length-e,0,s),0==(e-=s)){s===o.length?(++i,a.next?n.head=a.next:n.head=n.tail=null):(n.head=a,a.data=o.slice(s));break}++i}return n.length-=i,t}(e,n),a}(e,n.buffer,n.decoder),t);var t}function xt(e){var n=e._readableState;if(n.length>0)throw new Error('"endReadable()" called on non-empty stream');n.endEmitted||(n.ended=!0,T(gt,n,e))}function gt(e,n){e.endEmitted||0!==e.length||(e.endEmitted=!0,n.readable=!1,n.emit("end"))}function bt(e,n){for(var t=0,a=e.length;t<a;t++)if(e[t]===n)return t;return-1}function wt(){}function _t(e,n,t){this.chunk=e,this.encoding=n,this.callback=t,this.next=null}function yt(e,n){Object.defineProperty(this,"buffer",{get:vn((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.")}),e=e||{},this.objectMode=!!e.objectMode,n instanceof qt&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var t=e.highWaterMark,a=this.objectMode?16:16384;this.highWaterMark=t||0===t?t:a,this.highWaterMark=~~this.highWaterMark,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1;var i=!1===e.decodeStrings;this.decodeStrings=!i,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,n){var t=e._writableState,a=t.sync,i=t.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(t),n)!function(e,n,t,a,i){--n.pendingcb,t?T(i,a):i(a),e._writableState.errorEmitted=!0,e.emit("error",a)}(e,t,a,n,i);else{var o=Rt(t);o||t.corked||t.bufferProcessing||!t.bufferedRequest||At(e,t),a?T(jt,e,t,o,i):jt(e,t,o,i)}}(n,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new St(this)}function kt(e){if(!(this instanceof kt||this instanceof qt))return new kt(e);this._writableState=new yt(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev)),Yn.call(this)}function Et(e,n,t,a,i,o,s){n.writelen=a,n.writecb=s,n.writing=!0,n.sync=!0,t?e._writev(i,n.onwrite):e._write(i,o,n.onwrite),n.sync=!1}function jt(e,n,t,a){t||function(e,n){0===n.length&&n.needDrain&&(n.needDrain=!1,e.emit("drain"))}(e,n),n.pendingcb--,a(),Ct(e,n)}function At(e,n){n.bufferProcessing=!0;var t=n.bufferedRequest;if(e._writev&&t&&t.next){var a=n.bufferedRequestCount,i=new Array(a),o=n.corkedRequestsFree;o.entry=t;for(var s=0;t;)i[s]=t,t=t.next,s+=1;Et(e,n,!0,n.length,i,"",o.finish),n.pendingcb++,n.lastBufferedRequest=null,o.next?(n.corkedRequestsFree=o.next,o.next=null):n.corkedRequestsFree=new St(n)}else{for(;t;){var r=t.chunk,c=t.encoding,p=t.callback;if(Et(e,n,!1,n.objectMode?1:r.length,r,c,p),t=t.next,n.writing)break}null===t&&(n.lastBufferedRequest=null)}n.bufferedRequestCount=0,n.bufferedRequest=t,n.bufferProcessing=!1}function Rt(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function zt(e,n){n.prefinished||(n.prefinished=!0,e.emit("prefinish"))}function Ct(e,n){var t=Rt(n);return t&&(0===n.pendingcb?(zt(e,n),n.finished=!0,e.emit("finish")):zt(e,n)),t}function St(e){var n=this;this.next=null,this.entry=null,this.finish=function(t){var a=n.entry;for(n.entry=null;a;){var i=a.callback;e.pendingcb--,i(t),a=a.next}e.corkedRequestsFree?e.corkedRequestsFree.next=n:e.corkedRequestsFree=n}}st.prototype.read=function(e){it("read",e),e=parseInt(e,10);var n=this._readableState,t=e;if(0!==e&&(n.emittedReadable=!1),0===e&&n.needReadable&&(n.length>=n.highWaterMark||n.ended))return it("read: emitReadable",n.length,n.ended),0===n.length&&n.ended?xt(this):lt(this),null;if(0===(e=pt(e,n))&&n.ended)return 0===n.length&&xt(this),null;var a,i=n.needReadable;return it("need readable",i),(0===n.length||n.length-e<n.highWaterMark)&&it("length less than watermark",i=!0),n.ended||n.reading?it("reading or ended",i=!1):i&&(it("do read"),n.reading=!0,n.sync=!0,0===n.length&&(n.needReadable=!0),this._read(n.highWaterMark),n.sync=!1,n.reading||(e=pt(t,n))),null===(a=e>0?vt(e,n):null)?(n.needReadable=!0,e=0):n.length-=e,0===n.length&&(n.ended||(n.needReadable=!0),t!==e&&n.ended&&xt(this)),null!==a&&this.emit("data",a),a},st.prototype._read=function(e){this.emit("error",new Error("not implemented"))},st.prototype.pipe=function(e,n){var t=this,a=this._readableState;switch(a.pipesCount){case 0:a.pipes=e;break;case 1:a.pipes=[a.pipes,e];break;default:a.pipes.push(e)}a.pipesCount+=1,it("pipe count=%d opts=%j",a.pipesCount,n);var i=n&&!1===n.end?p:s;function o(e){it("onunpipe"),e===t&&p()}function s(){it("onend"),e.end()}a.endEmitted?T(i):t.once("end",i),e.on("unpipe",o);var r=function(e){return function(){var n=e._readableState;it("pipeOnDrain",n.awaitDrain),n.awaitDrain&&n.awaitDrain--,0===n.awaitDrain&&e.listeners("data").length&&(n.flowing=!0,ft(e))}}(t);e.on("drain",r);var c=!1;function p(){it("cleanup"),e.removeListener("close",h),e.removeListener("finish",m),e.removeListener("drain",r),e.removeListener("error",d),e.removeListener("unpipe",o),t.removeListener("end",s),t.removeListener("end",p),t.removeListener("data",u),c=!0,!a.awaitDrain||e._writableState&&!e._writableState.needDrain||r()}var l=!1;function u(n){it("ondata"),l=!1,!1!==e.write(n)||l||((1===a.pipesCount&&a.pipes===e||a.pipesCount>1&&-1!==bt(a.pipes,e))&&!c&&(it("false write response, pause",t._readableState.awaitDrain),t._readableState.awaitDrain++,l=!0),t.pause())}function d(n){it("onerror",n),f(),e.removeListener("error",d),0===function(e,n){return e.listeners("error").length}(e)&&e.emit("error",n)}function h(){e.removeListener("finish",m),f()}function m(){it("onfinish"),e.removeListener("close",h),f()}function f(){it("unpipe"),t.unpipe(e)}return t.on("data",u),function(e,n,t){if("function"==typeof e.prependListener)return e.prependListener(n,t);e._events&&e._events[n]?Array.isArray(e._events[n])?e._events[n].unshift(t):e._events[n]=[t,e._events[n]]:e.on(n,t)}(e,"error",d),e.once("close",h),e.once("finish",m),e.emit("pipe",t),a.flowing||(it("pipe resume"),t.resume()),e},st.prototype.unpipe=function(e){var n=this._readableState;if(0===n.pipesCount)return this;if(1===n.pipesCount)return e&&e!==n.pipes||(e||(e=n.pipes),n.pipes=null,n.pipesCount=0,n.flowing=!1,e&&e.emit("unpipe",this)),this;if(!e){var t=n.pipes,a=n.pipesCount;n.pipes=null,n.pipesCount=0,n.flowing=!1;for(var i=0;i<a;i++)t[i].emit("unpipe",this);return this}var o=bt(n.pipes,e);return-1===o||(n.pipes.splice(o,1),n.pipesCount-=1,1===n.pipesCount&&(n.pipes=n.pipes[0]),e.emit("unpipe",this)),this},st.prototype.on=function(e,n){var t=Yn.prototype.on.call(this,e,n);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var a=this._readableState;a.endEmitted||a.readableListening||(a.readableListening=a.needReadable=!0,a.emittedReadable=!1,a.reading?a.length&&lt(this):T(ht,this))}return t},st.prototype.addListener=st.prototype.on,st.prototype.resume=function(){var e=this._readableState;return e.flowing||(it("resume"),e.flowing=!0,function(e,n){n.resumeScheduled||(n.resumeScheduled=!0,T(mt,e,n))}(this,e)),this},st.prototype.pause=function(){return it("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(it("pause"),this._readableState.flowing=!1,this.emit("pause")),this},st.prototype.wrap=function(e){var n=this._readableState,t=!1,a=this;for(var i in e.on("end",(function(){if(it("wrapped end"),n.decoder&&!n.ended){var e=n.decoder.end();e&&e.length&&a.push(e)}a.push(null)})),e.on("data",(function(i){it("wrapped data"),n.decoder&&(i=n.decoder.write(i)),n.objectMode&&null==i||(n.objectMode||i&&i.length)&&(a.push(i)||(t=!0,e.pause()))})),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(n){return function(){return e[n].apply(e,arguments)}}(i));return function(e,n){for(var t=0,a=e.length;t<a;t++)n(e[t])}(["error","close","destroy","pause","resume"],(function(n){e.on(n,a.emit.bind(a,n))})),a._read=function(n){it("wrapped _read",n),t&&(t=!1,e.resume())},a},st._fromList=vt,kt.WritableState=yt,hn(kt,Yn),yt.prototype.getBuffer=function(){for(var e=this.bufferedRequest,n=[];e;)n.push(e),e=e.next;return n},kt.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},kt.prototype.write=function(e,n,t){var a=this._writableState,i=!1;return"function"==typeof n&&(t=n,n=null),me.isBuffer(e)?n="buffer":n||(n=a.defaultEncoding),"function"!=typeof t&&(t=wt),a.ended?function(e,n){var t=new Error("write after end");e.emit("error",t),T(n,t)}(this,t):function(e,n,t,a){var i=!0,o=!1;return null===t?o=new TypeError("May not write null values to stream"):me.isBuffer(t)||"string"==typeof t||void 0===t||n.objectMode||(o=new TypeError("Invalid non-string/buffer chunk")),o&&(e.emit("error",o),T(a,o),i=!1),i}(this,a,e,t)&&(a.pendingcb++,i=function(e,n,t,a,i){t=function(e,n,t){return e.objectMode||!1===e.decodeStrings||"string"!=typeof n||(n=me.from(n,t)),n}(n,t,a),me.isBuffer(t)&&(a="buffer");var o=n.objectMode?1:t.length;n.length+=o;var s=n.length<n.highWaterMark;if(s||(n.needDrain=!0),n.writing||n.corked){var r=n.lastBufferedRequest;n.lastBufferedRequest=new _t(t,a,i),r?r.next=n.lastBufferedRequest:n.bufferedRequest=n.lastBufferedRequest,n.bufferedRequestCount+=1}else Et(e,n,!1,o,t,a,i);return s}(this,a,e,n,t)),i},kt.prototype.cork=function(){this._writableState.corked++},kt.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||At(this,e))},kt.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},kt.prototype._write=function(e,n,t){t(new Error("not implemented"))},kt.prototype._writev=null,kt.prototype.end=function(e,n,t){var a=this._writableState;"function"==typeof e?(t=e,e=null,n=null):"function"==typeof n&&(t=n,n=null),null!=e&&this.write(e,n),a.corked&&(a.corked=1,this.uncork()),a.ending||a.finished||function(e,n,t){n.ending=!0,Ct(e,n),t&&(n.finished?T(t):e.once("finish",t)),n.ended=!0,e.writable=!1}(this,a,t)},hn(qt,st);for(var Ot=Object.keys(kt.prototype),Tt=0;Tt<Ot.length;Tt++){var Lt=Ot[Tt];qt.prototype[Lt]||(qt.prototype[Lt]=kt.prototype[Lt])}function qt(e){if(!(this instanceof qt))return new qt(e);st.call(this,e),kt.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",Bt)}function Bt(){this.allowHalfOpen||this._writableState.ended||T(Ut,this)}function Ut(e){e.end()}function Mt(e){this.afterTransform=function(n,t){return function(e,n,t){var a=e._transformState;a.transforming=!1;var i=a.writecb;if(!i)return e.emit("error",new Error("no writecb in Transform class"));a.writechunk=null,a.writecb=null,null!=t&&e.push(t),i(n);var o=e._readableState;o.reading=!1,(o.needReadable||o.length<o.highWaterMark)&&e._read(o.highWaterMark)}(e,n,t)},this.needTransform=!1,this.transforming=!1,this.writecb=null,this.writechunk=null,this.writeencoding=null}function Pt(e){if(!(this instanceof Pt))return new Pt(e);qt.call(this,e),this._transformState=new Mt(this);var n=this;this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.once("prefinish",(function(){"function"==typeof this._flush?this._flush((function(e){Ft(n,e)})):Ft(n)}))}function Ft(e,n){if(n)return e.emit("error",n);var t=e._writableState,a=e._transformState;if(t.length)throw new Error("Calling transform done when ws.length != 0");if(a.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}function Nt(e){if(!(this instanceof Nt))return new Nt(e);Pt.call(this,e)}function It(){Yn.call(this)}hn(Pt,qt),Pt.prototype.push=function(e,n){return this._transformState.needTransform=!1,qt.prototype.push.call(this,e,n)},Pt.prototype._transform=function(e,n,t){throw new Error("Not implemented")},Pt.prototype._write=function(e,n,t){var a=this._transformState;if(a.writecb=t,a.writechunk=e,a.writeencoding=n,!a.transforming){var i=this._readableState;(a.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},Pt.prototype._read=function(e){var n=this._transformState;null!==n.writechunk&&n.writecb&&!n.transforming?(n.transforming=!0,this._transform(n.writechunk,n.writeencoding,n.afterTransform)):n.needTransform=!0},hn(Nt,Pt),Nt.prototype._transform=function(e,n,t){t(null,e)},hn(It,Yn),It.Readable=st,It.Writable=kt,It.Duplex=qt,It.Transform=Pt,It.PassThrough=Nt,It.Stream=It,It.prototype.pipe=function(e,n){var t=this;function a(n){e.writable&&!1===e.write(n)&&t.pause&&t.pause()}function i(){t.readable&&t.resume&&t.resume()}t.on("data",a),e.on("drain",i),e._isStdio||n&&!1===n.end||(t.on("end",s),t.on("close",r));var o=!1;function s(){o||(o=!0,e.end())}function r(){o||(o=!0,"function"==typeof e.destroy&&e.destroy())}function c(e){if(p(),0===Yn.listenerCount(this,"error"))throw e}function p(){t.removeListener("data",a),e.removeListener("drain",i),t.removeListener("end",s),t.removeListener("close",r),t.removeListener("error",c),e.removeListener("error",c),t.removeListener("end",p),t.removeListener("close",p),e.removeListener("close",p)}return t.on("error",c),e.on("error",c),t.on("end",p),t.on("close",p),e.on("close",p),e.emit("pipe",t),e};function $t(e,n,t){var a,i=this;if(st.call(i),i._mode=t,i.headers={},i.rawHeaders=[],i.trailers={},i.rawTrailers=[],i.on("end",(function(){H.nextTick((function(){i.emit("close")}))})),"fetch"===t){i._fetchResponse=n,i.url=n.url,i.statusCode=n.status,i.statusMessage=n.statusText;for(var o,s,r=n.headers[Symbol.iterator]();o=(s=r.next()).value,!s.done;)i.headers[o[0].toLowerCase()]=o[1],i.rawHeaders.push(o[0],o[1]);var c=n.body.getReader();(a=function(){c.read().then((function(e){i._destroyed||(e.done?i.push(null):(i.push(new me(e.value)),a()))}))})()}else if(i._xhr=e,i._pos=0,i.url=e.responseURL,i.statusCode=e.status,i.statusMessage=e.statusText,e.getAllResponseHeaders().split(/\r?\n/).forEach((function(e){var n=e.match(/^([^:]+):\s*(.*)/);if(n){var t=n[1].toLowerCase();"set-cookie"===t?(void 0===i.headers[t]&&(i.headers[t]=[]),i.headers[t].push(n[2])):void 0!==i.headers[t]?i.headers[t]+=", "+n[2]:i.headers[t]=n[2],i.rawHeaders.push(n[1],n[2])}})),i._charset="x-user-defined",!ln){var p=i.rawHeaders["mime-type"];if(p){var l=p.match(/;\s*charset=([^;])(;|$)/);l&&(i._charset=l[1].toLowerCase())}i._charset||(i._charset="utf-8")}}function Dt(e){var n,t=this;kt.call(t),t._opts=e,t._body=[],t._headers={},e.auth&&t.setHeader("Authorization","Basic "+new me(e.auth).toString("base64")),Object.keys(e.headers).forEach((function(n){t.setHeader(n,e.headers[n])}));var a=!0;if("disable-fetch"===e.mode)a=!1,n=!0;else if("prefer-streaming"===e.mode)n=!1;else if("allow-wrong-content-type"===e.mode)n=!ln;else{if(e.mode&&"default"!==e.mode&&"prefer-fast"!==e.mode)throw new Error("Invalid value for opts.mode");n=!0}t._mode=function(e,n){return tn&&n?"fetch":pn?"moz-chunked-arraybuffer":cn?"ms-stream":rn&&e?"arraybuffer":un&&e?"text:vbarray":"text"}(n,a),t.on("finish",(function(){t._onFinish()}))}hn($t,st),$t.prototype._read=function(){},$t.prototype._onXHRProgress=function(){var e=this,n=e._xhr,t=null;switch(e._mode){case"text:vbarray":if(4!==n.readyState)break;try{t=new w.VBArray(n.responseBody).toArray()}catch(e){}if(null!==t){e.push(new me(t));break}case"text":try{t=n.responseText}catch(n){e._mode="text:vbarray";break}if(t.length>e._pos){var a=t.substr(e._pos);if("x-user-defined"===e._charset){for(var i=new me(a.length),o=0;o<a.length;o++)i[o]=255&a.charCodeAt(o);e.push(i)}else e.push(a,e._charset);e._pos=t.length}break;case"arraybuffer":if(4!==n.readyState||!n.response)break;t=n.response,e.push(new me(new Uint8Array(t)));break;case"moz-chunked-arraybuffer":if(t=n.response,3!==n.readyState||!t)break;e.push(new me(new Uint8Array(t)));break;case"ms-stream":if(t=n.response,3!==n.readyState)break;var s=new w.MSStreamReader;s.onprogress=function(){s.result.byteLength>e._pos&&(e.push(new me(new Uint8Array(s.result.slice(e._pos)))),e._pos=s.result.byteLength)},s.onload=function(){e.push(null)},s.readAsArrayBuffer(t)}4===e._xhr.readyState&&"ms-stream"!==e._mode&&e.push(null)},hn(Dt,kt);var Zt=["accept-charset","accept-encoding","access-control-request-headers","access-control-request-method","connection","content-length","cookie","cookie2","date","dnt","expect","host","keep-alive","origin","referer","te","trailer","transfer-encoding","upgrade","user-agent","via"];Dt.prototype.setHeader=function(e,n){var t=e.toLowerCase();-1===Zt.indexOf(t)&&(this._headers[t]={name:e,value:n})},Dt.prototype.getHeader=function(e){return this._headers[e.toLowerCase()].value},Dt.prototype.removeHeader=function(e){delete this._headers[e.toLowerCase()]},Dt.prototype._onFinish=function(){var e=this;if(!e._destroyed){var n,t=e._opts,a=e._headers;if("POST"!==t.method&&"PUT"!==t.method&&"PATCH"!==t.method||(n=function(){if(void 0!==Qe)return Qe;try{new w.Blob([new ArrayBuffer(1)]),Qe=!0}catch(e){Qe=!1}return Qe}()?new w.Blob(e._body.map((function(e){return function(e){if(e instanceof Uint8Array){if(0===e.byteOffset&&e.byteLength===e.buffer.byteLength)return e.buffer;if("function"==typeof e.buffer.slice)return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}if(Je(e)){for(var n=new Uint8Array(e.length),t=e.length,a=0;a<t;a++)n[a]=e[a];return n.buffer}throw new Error("Argument must be a Buffer")}(e)})),{type:(a["content-type"]||{}).value||""}):me.concat(e._body).toString()),"fetch"===e._mode){var i=Object.keys(a).map((function(e){return[a[e].name,a[e].value]}));w.fetch(e._opts.url,{method:e._opts.method,headers:i,body:n,mode:"cors",credentials:t.withCredentials?"include":"same-origin"}).then((function(n){e._fetchResponse=n,e._connect()}),(function(n){e.emit("error",n)}))}else{var o=e._xhr=new w.XMLHttpRequest;try{o.open(e._opts.method,e._opts.url,!0)}catch(n){return void H.nextTick((function(){e.emit("error",n)}))}"responseType"in o&&(o.responseType=e._mode.split(":")[0]),"withCredentials"in o&&(o.withCredentials=!!t.withCredentials),"text"===e._mode&&"overrideMimeType"in o&&o.overrideMimeType("text/plain; charset=x-user-defined"),Object.keys(a).forEach((function(e){o.setRequestHeader(a[e].name,a[e].value)})),e._response=null,o.onreadystatechange=function(){switch(o.readyState){case 3:case 4:e._onXHRProgress()}},"moz-chunked-arraybuffer"===e._mode&&(o.onprogress=function(){e._onXHRProgress()}),o.onerror=function(){e._destroyed||e.emit("error",new Error("XHR error"))};try{o.send(n)}catch(n){return void H.nextTick((function(){e.emit("error",n)}))}}}},Dt.prototype._onXHRProgress=function(){var e=this;(function(e){try{var n=e.status;return null!==n&&0!==n}catch(e){return!1}})(e._xhr)&&!e._destroyed&&(e._response||e._connect(),e._response._onXHRProgress())},Dt.prototype._connect=function(){var e=this;e._destroyed||(e._response=new $t(e._xhr,e._fetchResponse,e._mode),e.emit("response",e._response))},Dt.prototype._write=function(e,n,t){this._body.push(e),t()},Dt.prototype.abort=Dt.prototype.destroy=function(){var e=this;e._destroyed=!0,e._response&&(e._response._destroyed=!0),e._xhr&&e._xhr.abort()},Dt.prototype.end=function(e,n,t){"function"==typeof e&&(t=e,e=void 0),kt.prototype.end.call(this,e,n,t)},Dt.prototype.flushHeaders=function(){},Dt.prototype.setTimeout=function(){},Dt.prototype.setNoDelay=function(){},Dt.prototype.setSocketKeepAlive=function(){};
/*! https://mths.be/punycode v1.4.1 by @mathias */
var Ht=2147483647,Yt=36,Vt=1,Wt=26,Kt=38,Gt=700,Jt=72,Xt=128,Qt="-",ea=/[^\x20-\x7E]/,na=/[\x2E\u3002\uFF0E\uFF61]/g,ta={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},aa=Yt-Vt,ia=Math.floor,oa=String.fromCharCode;function sa(e){throw new RangeError(ta[e])}function ra(e,n){return e+22+75*(e<26)-((0!=n)<<5)}function ca(e,n,t){var a=0;for(e=t?ia(e/Gt):e>>1,e+=ia(e/n);e>aa*Wt>>1;a+=Yt)e=ia(e/aa);return ia(a+(aa+1)*e/(e+Kt))}function pa(e){return function(e,n){var t=e.split("@"),a="";t.length>1&&(a=t[0]+"@",e=t[1]);var i=function(e,n){for(var t=e.length,a=[];t--;)a[t]=n(e[t]);return a}((e=e.replace(na,".")).split("."),(function(e){return ea.test(e)?"xn--"+function(e){var n,t,a,i,o,s,r,c,p,l,u,d,h,m,f,v=[];for(e=function(e){for(var n,t,a=[],i=0,o=e.length;i<o;)(n=e.charCodeAt(i++))>=55296&&n<=56319&&i<o?56320==(64512&(t=e.charCodeAt(i++)))?a.push(((1023&n)<<10)+(1023&t)+65536):(a.push(n),i--):a.push(n);return a}(e),d=e.length,n=Xt,t=0,o=Jt,s=0;s<d;++s)(u=e[s])<128&&v.push(oa(u));for(a=i=v.length,i&&v.push(Qt);a<d;){for(r=Ht,s=0;s<d;++s)(u=e[s])>=n&&u<r&&(r=u);for(r-n>ia((Ht-t)/(h=a+1))&&sa("overflow"),t+=(r-n)*h,n=r,s=0;s<d;++s)if((u=e[s])<n&&++t>Ht&&sa("overflow"),u==n){for(c=t,p=Yt;!(c<(l=p<=o?Vt:p>=o+Wt?Wt:p-o));p+=Yt)f=c-l,m=Yt-l,v.push(oa(ra(l+f%m,0))),c=ia(f/m);v.push(oa(ra(c,0))),o=ca(t,h,a==i),t=0,++a}++t,++n}return v.join("")}(e):e})).join(".");return a+i}(e)}function la(e,n){return Object.prototype.hasOwnProperty.call(e,n)}var ua=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function da(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}}function ha(e,n){if(e.map)return e.map(n);for(var t=[],a=0;a<e.length;a++)t.push(n(e[a],a));return t}var ma=Object.keys||function(e){var n=[];for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&n.push(t);return n};function fa(e,n,t,a){n=n||"&",t=t||"=";var i={};if("string"!=typeof e||0===e.length)return i;var o=/\+/g;e=e.split(n);var s=1e3;a&&"number"==typeof a.maxKeys&&(s=a.maxKeys);var r=e.length;s>0&&r>s&&(r=s);for(var c=0;c<r;++c){var p,l,u,d,h=e[c].replace(o,"%20"),m=h.indexOf(t);m>=0?(p=h.substr(0,m),l=h.substr(m+1)):(p=h,l=""),u=decodeURIComponent(p),d=decodeURIComponent(l),la(i,u)?ua(i[u])?i[u].push(d):i[u]=[i[u],d]:i[u]=d}return i}var va={parse:Oa,resolve:function(e,n){return Oa(e,!1,!0).resolve(n)},resolveObject:function(e,n){return e?Oa(e,!1,!0).resolveObject(n):n},format:function(e){return On(e)&&(e=Ta({},e)),La(e)},Url:xa};function xa(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}var ga=/^([a-z0-9.+-]+:)/i,ba=/:[0-9]*$/,wa=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,_a=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),ya=["'"].concat(_a),ka=["%","/","?",";","#"].concat(ya),Ea=["/","?","#"],ja=255,Aa=/^[+a-z0-9A-Z_-]{0,63}$/,Ra=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,za={javascript:!0,"javascript:":!0},Ca={javascript:!0,"javascript:":!0},Sa={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};function Oa(e,n,t){if(e&&qn(e)&&e instanceof xa)return e;var a=new xa;return a.parse(e,n,t),a}function Ta(e,n,t,a){if(!On(n))throw new TypeError("Parameter 'url' must be a string, not "+typeof n);var i=n.indexOf("?"),o=-1!==i&&i<n.indexOf("#")?"?":"#",s=n.split(o);s[0]=s[0].replace(/\\/g,"/");var r=n=s.join(o);if(r=r.trim(),!a&&1===n.split("#").length){var c=wa.exec(r);if(c)return e.path=r,e.href=r,e.pathname=c[1],c[2]?(e.search=c[2],e.query=t?fa(e.search.substr(1)):e.search.substr(1)):t&&(e.search="",e.query={}),e}var p,l,u,d,h=ga.exec(r);if(h){var m=(h=h[0]).toLowerCase();e.protocol=m,r=r.substr(h.length)}if(a||h||r.match(/^\/\/[^@\/]+@[^@\/]+/)){var f="//"===r.substr(0,2);!f||h&&Ca[h]||(r=r.substr(2),e.slashes=!0)}if(!Ca[h]&&(f||h&&!Sa[h])){var v,x,g=-1;for(p=0;p<Ea.length;p++)-1!==(l=r.indexOf(Ea[p]))&&(-1===g||l<g)&&(g=l);for(-1!==(x=-1===g?r.lastIndexOf("@"):r.lastIndexOf("@",g))&&(v=r.slice(0,x),r=r.slice(x+1),e.auth=decodeURIComponent(v)),g=-1,p=0;p<ka.length;p++)-1!==(l=r.indexOf(ka[p]))&&(-1===g||l<g)&&(g=l);-1===g&&(g=r.length),e.host=r.slice(0,g),r=r.slice(g),qa(e),e.hostname=e.hostname||"";var b="["===e.hostname[0]&&"]"===e.hostname[e.hostname.length-1];if(!b){var w=e.hostname.split(/\./);for(p=0,u=w.length;p<u;p++){var _=w[p];if(_&&!_.match(Aa)){for(var y="",k=0,E=_.length;k<E;k++)_.charCodeAt(k)>127?y+="x":y+=_[k];if(!y.match(Aa)){var j=w.slice(0,p),A=w.slice(p+1),R=_.match(Ra);R&&(j.push(R[1]),A.unshift(R[2])),A.length&&(r="/"+A.join(".")+r),e.hostname=j.join(".");break}}}}e.hostname.length>ja?e.hostname="":e.hostname=e.hostname.toLowerCase(),b||(e.hostname=pa(e.hostname)),d=e.port?":"+e.port:"";var z=e.hostname||"";e.host=z+d,e.href+=e.host,b&&(e.hostname=e.hostname.substr(1,e.hostname.length-2),"/"!==r[0]&&(r="/"+r))}if(!za[m])for(p=0,u=ya.length;p<u;p++){var C=ya[p];if(-1!==r.indexOf(C)){var S=encodeURIComponent(C);S===C&&(S=escape(C)),r=r.split(C).join(S)}}var O=r.indexOf("#");-1!==O&&(e.hash=r.substr(O),r=r.slice(0,O));var T=r.indexOf("?");if(-1!==T?(e.search=r.substr(T),e.query=r.substr(T+1),t&&(e.query=fa(e.query)),r=r.slice(0,T)):t&&(e.search="",e.query={}),r&&(e.pathname=r),Sa[m]&&e.hostname&&!e.pathname&&(e.pathname="/"),e.pathname||e.search){d=e.pathname||"";var L=e.search||"";e.path=d+L}return e.href=La(e),e}function La(e){var n=e.auth||"";n&&(n=(n=encodeURIComponent(n)).replace(/%3A/i,":"),n+="@");var t=e.protocol||"",a=e.pathname||"",i=e.hash||"",o=!1,s="";e.host?o=n+e.host:e.hostname&&(o=n+(-1===e.hostname.indexOf(":")?e.hostname:"["+this.hostname+"]"),e.port&&(o+=":"+e.port)),e.query&&qn(e.query)&&Object.keys(e.query).length&&(s=function(e,n,t,a){return n=n||"&",t=t||"=",null===e&&(e=void 0),"object"==typeof e?ha(ma(e),(function(a){var i=encodeURIComponent(da(a))+t;return ua(e[a])?ha(e[a],(function(e){return i+encodeURIComponent(da(e))})).join(n):i+encodeURIComponent(da(e[a]))})).join(n):""}(e.query));var r=e.search||s&&"?"+s||"";return t&&":"!==t.substr(-1)&&(t+=":"),e.slashes||(!t||Sa[t])&&!1!==o?(o="//"+(o||""),a&&"/"!==a.charAt(0)&&(a="/"+a)):o||(o=""),i&&"#"!==i.charAt(0)&&(i="#"+i),r&&"?"!==r.charAt(0)&&(r="?"+r),t+o+(a=a.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(r=r.replace("#","%23"))+i}function qa(e){var n=e.host,t=ba.exec(n);t&&(":"!==(t=t[0])&&(e.port=t.substr(1)),n=n.substr(0,n.length-t.length)),n&&(e.hostname=n)}function Ba(e,n){"string"==typeof e&&(e=Oa(e));var t=-1===w.location.protocol.search(/^https?:$/)?"http:":"",a=e.protocol||t,i=e.hostname||e.host,o=e.port,s=e.path||"/";i&&-1!==i.indexOf(":")&&(i="["+i+"]"),e.url=(i?a+"//"+i:"")+(o?":"+o:"")+s,e.method=(e.method||"GET").toUpperCase(),e.headers=e.headers||{};var r=new Dt(e);return n&&r.on("response",n),r}function Ua(){}xa.prototype.parse=function(e,n,t){return Ta(this,e,n,t)},xa.prototype.format=function(){return La(this)},xa.prototype.resolve=function(e){return this.resolveObject(Oa(e,!1,!0)).format()},xa.prototype.resolveObject=function(e){if(On(e)){var n=new xa;n.parse(e,!1,!0),e=n}for(var t,a=new xa,i=Object.keys(this),o=0;o<i.length;o++){var s=i[o];a[s]=this[s]}if(a.hash=e.hash,""===e.href)return a.href=a.format(),a;if(e.slashes&&!e.protocol){for(var r=Object.keys(e),c=0;c<r.length;c++){var p=r[c];"protocol"!==p&&(a[p]=e[p])}return Sa[a.protocol]&&a.hostname&&!a.pathname&&(a.path=a.pathname="/"),a.href=a.format(),a}if(e.protocol&&e.protocol!==a.protocol){if(!Sa[e.protocol]){for(var l=Object.keys(e),u=0;u<l.length;u++){var d=l[u];a[d]=e[d]}return a.href=a.format(),a}if(a.protocol=e.protocol,e.host||Ca[e.protocol])a.pathname=e.pathname;else{for(t=(e.pathname||"").split("/");t.length&&!(e.host=t.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==t[0]&&t.unshift(""),t.length<2&&t.unshift(""),a.pathname=t.join("/")}if(a.search=e.search,a.query=e.query,a.host=e.host||"",a.auth=e.auth,a.hostname=e.hostname||e.host,a.port=e.port,a.pathname||a.search){var h=a.pathname||"",m=a.search||"";a.path=h+m}return a.slashes=a.slashes||e.slashes,a.href=a.format(),a}var f,v=a.pathname&&"/"===a.pathname.charAt(0),x=e.host||e.pathname&&"/"===e.pathname.charAt(0),g=x||v||a.host&&e.pathname,b=g,w=a.pathname&&a.pathname.split("/")||[],_=a.protocol&&!Sa[a.protocol];if(t=e.pathname&&e.pathname.split("/")||[],_&&(a.hostname="",a.port=null,a.host&&(""===w[0]?w[0]=a.host:w.unshift(a.host)),a.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===t[0]?t[0]=e.host:t.unshift(e.host)),e.host=null),g=g&&(""===t[0]||""===w[0])),x)a.host=e.host||""===e.host?e.host:a.host,a.hostname=e.hostname||""===e.hostname?e.hostname:a.hostname,a.search=e.search,a.query=e.query,w=t;else if(t.length)w||(w=[]),w.pop(),w=w.concat(t),a.search=e.search,a.query=e.query;else if(!Cn(e.search))return _&&(a.hostname=a.host=w.shift(),(f=!!(a.host&&a.host.indexOf("@")>0)&&a.host.split("@"))&&(a.auth=f.shift(),a.host=a.hostname=f.shift())),a.search=e.search,a.query=e.query,zn(a.pathname)&&zn(a.search)||(a.path=(a.pathname?a.pathname:"")+(a.search?a.search:"")),a.href=a.format(),a;if(!w.length)return a.pathname=null,a.search?a.path="/"+a.search:a.path=null,a.href=a.format(),a;for(var y=w.slice(-1)[0],k=(a.host||e.host||w.length>1)&&("."===y||".."===y)||""===y,E=0,j=w.length;j>=0;j--)"."===(y=w[j])?w.splice(j,1):".."===y?(w.splice(j,1),E++):E&&(w.splice(j,1),E--);if(!g&&!b)for(;E--;E)w.unshift("..");!g||""===w[0]||w[0]&&"/"===w[0].charAt(0)||w.unshift(""),k&&"/"!==w.join("/").substr(-1)&&w.push("");var A=""===w[0]||w[0]&&"/"===w[0].charAt(0);return _&&(a.hostname=a.host=A?"":w.length?w.shift():"",(f=!!(a.host&&a.host.indexOf("@")>0)&&a.host.split("@"))&&(a.auth=f.shift(),a.host=a.hostname=f.shift())),(g=g||a.host&&w.length)&&!A&&w.unshift(""),w.length?a.pathname=w.join("/"):(a.pathname=null,a.path=null),zn(a.pathname)&&zn(a.search)||(a.path=(a.pathname?a.pathname:"")+(a.search?a.search:"")),a.auth=e.auth||a.auth,a.slashes=a.slashes||e.slashes,a.href=a.format(),a},xa.prototype.parseHost=function(){return qa(this)},Ua.defaultMaxSockets=4;var Ma={request:Ba,get:function(e,n){var t=Ba(e,n);return t.end(),t},Agent:Ua,METHODS:["CHECKOUT","CONNECT","COPY","DELETE","GET","HEAD","LOCK","M-SEARCH","MERGE","MKACTIVITY","MKCOL","MOVE","NOTIFY","OPTIONS","PATCH","POST","PROPFIND","PROPPATCH","PURGE","PUT","REPORT","SEARCH","SUBSCRIBE","TRACE","UNLOCK","UNSUBSCRIBE"],STATUS_CODES:{100:"Continue",101:"Switching Protocols",102:"Processing",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",300:"Multiple Choices",301:"Moved Permanently",302:"Moved Temporarily",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Time-out",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Request Entity Too Large",414:"Request-URI Too Large",415:"Unsupported Media Type",416:"Requested Range Not Satisfiable",417:"Expectation Failed",418:"I'm a teapot",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Unordered Collection",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Time-out",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"}};function Pa(e,n){if(e===n)return 0;for(var t=e.length,a=n.length,i=0,o=Math.min(t,a);i<o;++i)if(e[i]!==n[i]){t=e[i],a=n[i];break}return t<a?-1:a<t?1:0}var Fa,Na=Object.prototype.hasOwnProperty,Ia=Object.keys||function(e){var n=[];for(var t in e)Na.call(e,t)&&n.push(t);return n},$a=Array.prototype.slice;function Da(){return void 0!==Fa?Fa:Fa="foo"===function(){}.name}function Za(e){return Object.prototype.toString.call(e)}function Ha(e){return!Je(e)&&"function"==typeof w.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):!!e&&(e instanceof DataView||!!(e.buffer&&e.buffer instanceof ArrayBuffer)))}function Ya(e,n){e||Xa(e,!0,n,"==",Qa)}var Va=/\s*function\s+([^\(\s]*)\s*/;function Wa(e){if(Mn(e)){if(Da())return e.name;var n=e.toString().match(Va);return n&&n[1]}}function Ka(e){this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=function(e){return Ga(Ja(e.actual),128)+" "+e.operator+" "+Ga(Ja(e.expected),128)}(this),this.generatedMessage=!0);var n=e.stackStartFunction||Xa;if(Error.captureStackTrace)Error.captureStackTrace(this,n);else{var t=new Error;if(t.stack){var a=t.stack,i=Wa(n),o=a.indexOf("\n"+i);if(o>=0){var s=a.indexOf("\n",o+1);a=a.substring(s+1)}this.stack=a}}}function Ga(e,n){return"string"==typeof e?e.length<n?e:e.slice(0,n):e}function Ja(e){if(Da()||!Mn(e))return wn(e);var n=Wa(e);return"[Function"+(n?": "+n:"")+"]"}function Xa(e,n,t,a,i){throw new Ka({message:t,actual:e,expected:n,operator:a,stackStartFunction:i})}function Qa(e,n){e||Xa(e,!0,n,"==",Qa)}function ei(e,n,t,a){if(e===n)return!0;if(Je(e)&&Je(n))return 0===Pa(e,n);if(Bn(e)&&Bn(n))return e.getTime()===n.getTime();if(Ln(e)&&Ln(n))return e.source===n.source&&e.global===n.global&&e.multiline===n.multiline&&e.lastIndex===n.lastIndex&&e.ignoreCase===n.ignoreCase;if(null!==e&&"object"==typeof e||null!==n&&"object"==typeof n){if(Ha(e)&&Ha(n)&&Za(e)===Za(n)&&!(e instanceof Float32Array||e instanceof Float64Array))return 0===Pa(new Uint8Array(e.buffer),new Uint8Array(n.buffer));if(Je(e)!==Je(n))return!1;var i=(a=a||{actual:[],expected:[]}).actual.indexOf(e);return-1!==i&&i===a.expected.indexOf(n)||(a.actual.push(e),a.expected.push(n),function(e,n,t,a){if(null==e||null==n)return!1;if(Pn(e)||Pn(n))return e===n;if(t&&Object.getPrototypeOf(e)!==Object.getPrototypeOf(n))return!1;var i=ni(e),o=ni(n);if(i&&!o||!i&&o)return!1;if(i)return ei(e=$a.call(e),n=$a.call(n),t);var s,r,c=Ia(e),p=Ia(n);if(c.length!==p.length)return!1;for(c.sort(),p.sort(),r=c.length-1;r>=0;r--)if(c[r]!==p[r])return!1;for(r=c.length-1;r>=0;r--)if(!ei(e[s=c[r]],n[s],t,a))return!1;return!0}(e,n,t,a))}return t?e===n:e==n}function ni(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function ti(e,n){if(!e||!n)return!1;if("[object RegExp]"==Object.prototype.toString.call(n))return n.test(e);try{if(e instanceof n)return!0}catch(e){}return!Error.isPrototypeOf(n)&&!0===n.call({},e)}function ai(e,n,t,a){var i;if("function"!=typeof n)throw new TypeError('"block" argument must be a function');"string"==typeof t&&(a=t,t=null),i=function(e){var n;try{e()}catch(e){n=e}return n}(n),a=(t&&t.name?" ("+t.name+").":".")+(a?" "+a:"."),e&&!i&&Xa(i,t,"Missing expected exception"+a);var o="string"==typeof a,s=!e&&i&&!t;if((!e&&Un(i)&&o&&ti(i,t)||s)&&Xa(i,t,"Got unwanted exception"+a),e&&i&&t&&!ti(i,t)||!e&&i)throw i}Ya.AssertionError=Ka,hn(Ka,Error),Ya.fail=Xa,Ya.ok=Qa,Ya.equal=function e(n,t,a){n!=t&&Xa(n,t,a,"==",e)},Ya.notEqual=function e(n,t,a){n==t&&Xa(n,t,a,"!=",e)},Ya.deepEqual=function e(n,t,a){ei(n,t,!1)||Xa(n,t,a,"deepEqual",e)},Ya.deepStrictEqual=function e(n,t,a){ei(n,t,!0)||Xa(n,t,a,"deepStrictEqual",e)},Ya.notDeepEqual=function e(n,t,a){ei(n,t,!1)&&Xa(n,t,a,"notDeepEqual",e)},Ya.notDeepStrictEqual=function e(n,t,a){ei(n,t,!0)&&Xa(n,t,a,"notDeepStrictEqual",e)},Ya.strictEqual=function e(n,t,a){n!==t&&Xa(n,t,a,"===",e)},Ya.notStrictEqual=function e(n,t,a){n===t&&Xa(n,t,a,"!==",e)},Ya.throws=function(e,n,t){ai(!0,e,n,t)},Ya.doesNotThrow=function(e,n,t){ai(!1,e,n,t)},Ya.ifError=function(e){if(e)throw e};var ii=1e3,oi=6e4,si=60*oi,ri=24*si,ci=function(e,n){n=n||{};var t=typeof e;if("string"===t&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var n=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(n){var t=parseFloat(n[1]);switch((n[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*t;case"weeks":case"week":case"w":return 6048e5*t;case"days":case"day":case"d":return t*ri;case"hours":case"hour":case"hrs":case"hr":case"h":return t*si;case"minutes":case"minute":case"mins":case"min":case"m":return t*oi;case"seconds":case"second":case"secs":case"sec":case"s":return t*ii;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return t;default:return}}}}(e);if("number"===t&&isFinite(e))return n.long?function(e){var n=Math.abs(e);return n>=ri?pi(e,n,ri,"day"):n>=si?pi(e,n,si,"hour"):n>=oi?pi(e,n,oi,"minute"):n>=ii?pi(e,n,ii,"second"):e+" ms"}(e):function(e){var n=Math.abs(e);return n>=ri?Math.round(e/ri)+"d":n>=si?Math.round(e/si)+"h":n>=oi?Math.round(e/oi)+"m":n>=ii?Math.round(e/ii)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))};function pi(e,n,t,a){var i=n>=1.5*t;return Math.round(e/t)+" "+a+(i?"s":"")}var li=function(e){function n(e){let a,i,o,s=null;function r(...e){if(!r.enabled)return;const t=r,i=Number(new Date),o=i-(a||i);t.diff=o,t.prev=a,t.curr=i,a=i,e[0]=n.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let s=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((a,i)=>{if("%%"===a)return"%";s++;const o=n.formatters[i];if("function"==typeof o){const n=e[s];a=o.call(t,n),e.splice(s,1),s--}return a})),n.formatArgs.call(t,e),(t.log||n.log).apply(t,e)}return r.namespace=e,r.useColors=n.useColors(),r.color=n.selectColor(e),r.extend=t,r.destroy=n.destroy,Object.defineProperty(r,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==s?s:(i!==n.namespaces&&(i=n.namespaces,o=n.enabled(e)),o),set:e=>{s=e}}),"function"==typeof n.init&&n.init(r),r}function t(e,t){const a=n(this.namespace+(void 0===t?":":t)+e);return a.log=this.log,a}function a(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return n.debug=n,n.default=n,n.coerce=function(e){return e instanceof Error?e.stack||e.message:e},n.disable=function(){const e=[...n.names.map(a),...n.skips.map(a).map((e=>"-"+e))].join(",");return n.enable(""),e},n.enable=function(e){let t;n.save(e),n.namespaces=e,n.names=[],n.skips=[];const a=("string"==typeof e?e:"").split(/[\s,]+/),i=a.length;for(t=0;t<i;t++)a[t]&&("-"===(e=a[t].replace(/\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+e.slice(1)+"$")):n.names.push(new RegExp("^"+e+"$")))},n.enabled=function(e){if("*"===e[e.length-1])return!0;let t,a;for(t=0,a=n.skips.length;t<a;t++)if(n.skips[t].test(e))return!1;for(t=0,a=n.names.length;t<a;t++)if(n.names[t].test(e))return!0;return!1},n.humanize=ci,n.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((t=>{n[t]=e[t]})),n.names=[],n.skips=[],n.formatters={},n.selectColor=function(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return n.colors[Math.abs(t)%n.colors.length]},n.enable(n.load()),n},ui=t((function(e,n){n.formatArgs=function(n){if(n[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+n[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const t="color: "+this.color;n.splice(1,0,t,"color: inherit");let a=0,i=0;n[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(a++,"%c"===e&&(i=a))})),n.splice(i,0,t)},n.save=function(e){try{e?n.storage.setItem("debug",e):n.storage.removeItem("debug")}catch(e){}},n.load=function(){let e;try{e=n.storage.getItem("debug")}catch(e){}return!e&&void 0!==H&&"env"in H&&(e=H.env.DEBUG),e},n.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},n.storage=function(){try{return localStorage}catch(e){}}(),n.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),n.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],n.log=console.debug||console.log||(()=>{}),e.exports=li(n);const{formatters:t}=e.exports;t.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}}));ui.formatArgs,ui.save,ui.load,ui.useColors,ui.storage,ui.destroy,ui.colors,ui.log;var di,hi=function(){return!1};function mi(){return"/tmp"}var fi={EOL:"\n",tmpdir:mi,tmpDir:mi,networkInterfaces:function(){},getNetworkInterfaces:function(){},release:function(){return void 0!==w.navigator?w.navigator.appVersion:""},type:function(){return"Browser"},cpus:function(){return[]},totalmem:function(){return Number.MAX_VALUE},freemem:function(){return Number.MAX_VALUE},uptime:function(){return 0},loadavg:function(){return[]},hostname:function(){return void 0!==w.location?w.location.hostname:""},endianness:function(){if(void 0===di){var e=new ArrayBuffer(2),n=new Uint8Array(e),t=new Uint16Array(e);if(n[0]=1,n[1]=2,258===t[0])di="BE";else{if(513!==t[0])throw new Error("unable to figure out endianess");di="LE"}}return di}},vi=(e,n=H.argv)=>{const t=e.startsWith("-")?"":1===e.length?"-":"--",a=n.indexOf(t+e),i=n.indexOf("--");return-1!==a&&(-1===i||a<i)};const{env:xi}=H;let gi;function bi(e){return 0!==e&&{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}function wi(e,n){if(0===gi)return 0;if(vi("color=16m")||vi("color=full")||vi("color=truecolor"))return 3;if(vi("color=256"))return 2;if(e&&!n&&void 0===gi)return 0;const t=gi||0;if("dumb"===xi.TERM)return t;if("win32"===H.platform){const e=fi.release().split(".");return Number(e[0])>=10&&Number(e[2])>=10586?Number(e[2])>=14931?3:2:1}if("CI"in xi)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI","GITHUB_ACTIONS","BUILDKITE"].some((e=>e in xi))||"codeship"===xi.CI_NAME?1:t;if("TEAMCITY_VERSION"in xi)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(xi.TEAMCITY_VERSION)?1:0;if("truecolor"===xi.COLORTERM)return 3;if("TERM_PROGRAM"in xi){const e=parseInt((xi.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(xi.TERM_PROGRAM){case"iTerm.app":return e>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(xi.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(xi.TERM)||"COLORTERM"in xi?1:t}vi("no-color")||vi("no-colors")||vi("color=false")||vi("color=never")?gi=0:(vi("color")||vi("colors")||vi("color=true")||vi("color=always"))&&(gi=1),"FORCE_COLOR"in xi&&(gi="true"===xi.FORCE_COLOR?1:"false"===xi.FORCE_COLOR?0:0===xi.FORCE_COLOR.length?1:Math.min(parseInt(xi.FORCE_COLOR,10),3));var _i={supportsColor:function(e){return bi(wi(e,e&&e.isTTY))},stdout:bi(wi(!0,hi(1))),stderr:bi(wi(!0,hi(2)))},yi=t((function(e,n){n.init=function(e){e.inspectOpts={};const t=Object.keys(n.inspectOpts);for(let a=0;a<t.length;a++)e.inspectOpts[t[a]]=n.inspectOpts[t[a]]},n.log=function(...e){return H.stderr.write(Zn.format(...e)+"\n")},n.formatArgs=function(t){const{namespace:a,useColors:i}=this;if(i){const n=this.color,i="[3"+(n<8?n:"8;5;"+n),o=`  ${i};1m${a} [0m`;t[0]=o+t[0].split("\n").join("\n"+o),t.push(i+"m+"+e.exports.humanize(this.diff)+"[0m")}else t[0]=(n.inspectOpts.hideDate?"":(new Date).toISOString()+" ")+a+" "+t[0]},n.save=function(e){e?H.env.DEBUG=e:delete H.env.DEBUG},n.load=function(){return H.env.DEBUG},n.useColors=function(){return"colors"in n.inspectOpts?Boolean(n.inspectOpts.colors):hi(H.stderr.fd)},n.destroy=Zn.deprecate((()=>{}),"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."),n.colors=[6,2,3,4,5,1];try{const e=_i;e&&(e.stderr||e).level>=2&&(n.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}n.inspectOpts=Object.keys(H.env).filter((e=>/^debug_/i.test(e))).reduce(((e,n)=>{const t=n.substring(6).toLowerCase().replace(/_([a-z])/g,((e,n)=>n.toUpperCase()));let a=H.env[n];return a=!!/^(yes|on|true|enabled)$/i.test(a)||!/^(no|off|false|disabled)$/i.test(a)&&("null"===a?null:Number(a)),e[t]=a,e}),{}),e.exports=li(n);const{formatters:t}=e.exports;t.o=function(e){return this.inspectOpts.colors=this.useColors,Zn.inspect(e,this.inspectOpts).split("\n").map((e=>e.trim())).join(" ")},t.O=function(e){return this.inspectOpts.colors=this.useColors,Zn.inspect(e,this.inspectOpts)}}));yi.init,yi.log,yi.formatArgs,yi.save,yi.load,yi.useColors,yi.destroy,yi.colors,yi.inspectOpts;var ki,Ei=t((function(e){void 0===H||"renderer"===H.type||!0===H.browser||H.__nwjs?e.exports=ui:e.exports=yi})),ji=function(){if(!ki){try{ki=Ei("follow-redirects")}catch(e){}"function"!=typeof ki&&(ki=function(){})}ki.apply(null,arguments)},Ai=va.URL,Ri=It.Writable,zi=["abort","aborted","connect","error","socket","timeout"],Ci=Object.create(null);zi.forEach((function(e){Ci[e]=function(n,t,a){this._redirectable.emit(e,n,t,a)}}));var Si=Ni("ERR_INVALID_URL","Invalid URL",TypeError),Oi=Ni("ERR_FR_REDIRECTION_FAILURE","Redirected request failed"),Ti=Ni("ERR_FR_TOO_MANY_REDIRECTS","Maximum number of redirects exceeded"),Li=Ni("ERR_FR_MAX_BODY_LENGTH_EXCEEDED","Request body larger than maxBodyLength limit"),qi=Ni("ERR_STREAM_WRITE_AFTER_END","write after end");function Bi(e,n){Ri.call(this),this._sanitizeOptions(e),this._options=e,this._ended=!1,this._ending=!1,this._redirectCount=0,this._redirects=[],this._requestBodyLength=0,this._requestBodyBuffers=[],n&&this.on("response",n);var t=this;this._onNativeResponse=function(e){t._processResponse(e)},this._performRequest()}function Ui(e){var n={maxRedirects:21,maxBodyLength:10485760},t={};return Object.keys(e).forEach((function(a){var i=a+":",o=t[i]=e[a],s=n[a]=Object.create(o);Object.defineProperties(s,{request:{value:function(e,a,o){if($i(e)){var s;try{s=Pi(new Ai(e))}catch(n){s=va.parse(e)}if(!$i(s.protocol))throw new Si({input:e});e=s}else Ai&&e instanceof Ai?e=Pi(e):(o=a,a=e,e={protocol:i});return Di(a)&&(o=a,a=null),(a=Object.assign({maxRedirects:n.maxRedirects,maxBodyLength:n.maxBodyLength},e,a)).nativeProtocols=t,$i(a.host)||$i(a.hostname)||(a.hostname="::1"),Ya.equal(a.protocol,i,"protocol mismatch"),ji("options",a),new Bi(a,o)},configurable:!0,enumerable:!0,writable:!0},get:{value:function(e,n,t){var a=s.request(e,n,t);return a.end(),a},configurable:!0,enumerable:!0,writable:!0}})})),n}function Mi(){}function Pi(e){var n={protocol:e.protocol,hostname:e.hostname.startsWith("[")?e.hostname.slice(1,-1):e.hostname,hash:e.hash,search:e.search,pathname:e.pathname,path:e.pathname+e.search,href:e.href};return""!==e.port&&(n.port=Number(e.port)),n}function Fi(e,n){var t;for(var a in n)e.test(a)&&(t=n[a],delete n[a]);return null==t?void 0:String(t).trim()}function Ni(e,n,t){function a(t){Error.captureStackTrace(this,this.constructor),Object.assign(this,t||{}),this.code=e,this.message=this.cause?n+": "+this.cause.message:n}return a.prototype=new(t||Error),a.prototype.constructor=a,a.prototype.name="Error ["+e+"]",a}function Ii(e){for(var n of zi)e.removeListener(n,Ci[n]);e.on("error",Mi),e.abort()}function $i(e){return"string"==typeof e||e instanceof String}function Di(e){return"function"==typeof e}Bi.prototype=Object.create(Ri.prototype),Bi.prototype.abort=function(){Ii(this._currentRequest),this.emit("abort")},Bi.prototype.write=function(e,n,t){if(this._ending)throw new qi;if(!($i(e)||"object"==typeof(a=e)&&"length"in a))throw new TypeError("data should be a string, Buffer or Uint8Array");var a;Di(n)&&(t=n,n=null),0!==e.length?this._requestBodyLength+e.length<=this._options.maxBodyLength?(this._requestBodyLength+=e.length,this._requestBodyBuffers.push({data:e,encoding:n}),this._currentRequest.write(e,n,t)):(this.emit("error",new Li),this.abort()):t&&t()},Bi.prototype.end=function(e,n,t){if(Di(e)?(t=e,e=n=null):Di(n)&&(t=n,n=null),e){var a=this,i=this._currentRequest;this.write(e,n,(function(){a._ended=!0,i.end(null,null,t)})),this._ending=!0}else this._ended=this._ending=!0,this._currentRequest.end(null,null,t)},Bi.prototype.setHeader=function(e,n){this._options.headers[e]=n,this._currentRequest.setHeader(e,n)},Bi.prototype.removeHeader=function(e){delete this._options.headers[e],this._currentRequest.removeHeader(e)},Bi.prototype.setTimeout=function(e,n){var t=this;function a(n){n.setTimeout(e),n.removeListener("timeout",n.destroy),n.addListener("timeout",n.destroy)}function i(n){t._timeout&&clearTimeout(t._timeout),t._timeout=setTimeout((function(){t.emit("timeout"),o()}),e),a(n)}function o(){t._timeout&&(clearTimeout(t._timeout),t._timeout=null),t.removeListener("abort",o),t.removeListener("error",o),t.removeListener("response",o),n&&t.removeListener("timeout",n),t.socket||t._currentRequest.removeListener("socket",i)}return n&&this.on("timeout",n),this.socket?i(this.socket):this._currentRequest.once("socket",i),this.on("socket",a),this.on("abort",o),this.on("error",o),this.on("response",o),this},["flushHeaders","getHeader","setNoDelay","setSocketKeepAlive"].forEach((function(e){Bi.prototype[e]=function(n,t){return this._currentRequest[e](n,t)}})),["aborted","connection","socket"].forEach((function(e){Object.defineProperty(Bi.prototype,e,{get:function(){return this._currentRequest[e]}})})),Bi.prototype._sanitizeOptions=function(e){if(e.headers||(e.headers={}),e.host&&(e.hostname||(e.hostname=e.host),delete e.host),!e.pathname&&e.path){var n=e.path.indexOf("?");n<0?e.pathname=e.path:(e.pathname=e.path.substring(0,n),e.search=e.path.substring(n))}},Bi.prototype._performRequest=function(){var e=this._options.protocol,n=this._options.nativeProtocols[e];if(n){if(this._options.agents){var t=e.slice(0,-1);this._options.agent=this._options.agents[t]}var a=this._currentRequest=n.request(this._options,this._onNativeResponse);for(var i of(a._redirectable=this,zi))a.on(i,Ci[i]);if(this._currentUrl=/^\//.test(this._options.path)?va.format(this._options):this._options.path,this._isRedirect){var o=0,s=this,r=this._requestBodyBuffers;!function e(n){if(a===s._currentRequest)if(n)s.emit("error",n);else if(o<r.length){var t=r[o++];a.finished||a.write(t.data,t.encoding,e)}else s._ended&&a.end()}()}}else this.emit("error",new TypeError("Unsupported protocol "+e))},Bi.prototype._processResponse=function(e){var n=e.statusCode;this._options.trackRedirects&&this._redirects.push({url:this._currentUrl,headers:e.headers,statusCode:n});var t=e.headers.location;if(!t||!1===this._options.followRedirects||n<300||n>=400)return e.responseUrl=this._currentUrl,e.redirects=this._redirects,this.emit("response",e),void(this._requestBodyBuffers=[]);if(Ii(this._currentRequest),e.destroy(),++this._redirectCount>this._options.maxRedirects)this.emit("error",new Ti);else{var a,i=this._options.beforeRedirect;i&&(a=Object.assign({Host:e.req.getHeader("host")},this._options.headers));var o=this._options.method;((301===n||302===n)&&"POST"===this._options.method||303===n&&!/^(?:GET|HEAD)$/.test(this._options.method))&&(this._options.method="GET",this._requestBodyBuffers=[],Fi(/^content-/i,this._options.headers));var s,r=Fi(/^host$/i,this._options.headers),c=va.parse(this._currentUrl),p=r||c.host,l=/^\w+:/.test(t)?this._currentUrl:va.format(Object.assign(c,{host:p}));try{s=va.resolve(l,t)}catch(e){return void this.emit("error",new Oi({cause:e}))}ji("redirecting to",s),this._isRedirect=!0;var u=va.parse(s);if(Object.assign(this._options,u),(u.protocol!==c.protocol&&"https:"!==u.protocol||u.host!==p&&!function(e,n){Ya($i(e)&&$i(n));var t=e.length-n.length-1;return t>0&&"."===e[t]&&e.endsWith(n)}(u.host,p))&&Fi(/^(?:authorization|cookie)$/i,this._options.headers),Di(i)){var d={headers:e.headers,statusCode:n},h={url:l,method:o,headers:a};try{i(this._options,d,h)}catch(e){return void this.emit("error",e)}this._sanitizeOptions(this._options)}try{this._performRequest()}catch(e){this.emit("error",new Oi({cause:e}))}}};var Zi=Ui({http:Ma,https:Ma}),Hi=Ui;Zi.wrap=Hi;var Yi={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"};function Vi(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}function Wi(e,n,t,a,i){if(n.subarray&&e.subarray)e.set(n.subarray(t,t+a),i);else for(var o=0;o<a;o++)e[i+o]=n[t+o]}var Ki=Uint8Array,Gi=Uint16Array,Ji=Int32Array,Xi=4,Qi=0,eo=1,no=2;function to(e){for(var n=e.length;--n>=0;)e[n]=0}var ao=0,io=1,oo=2,so=29,ro=256,co=ro+1+so,po=30,lo=19,uo=2*co+1,ho=15,mo=16,fo=7,vo=256,xo=16,go=17,bo=18,wo=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],_o=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],yo=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],ko=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],Eo=new Array(2*(co+2));to(Eo);var jo=new Array(2*po);to(jo);var Ao=new Array(512);to(Ao);var Ro=new Array(256);to(Ro);var zo=new Array(so);to(zo);var Co,So,Oo,To=new Array(po);function Lo(e,n,t,a,i){this.static_tree=e,this.extra_bits=n,this.extra_base=t,this.elems=a,this.max_length=i,this.has_stree=e&&e.length}function qo(e,n){this.dyn_tree=e,this.max_code=0,this.stat_desc=n}function Bo(e){return e<256?Ao[e]:Ao[256+(e>>>7)]}function Uo(e,n){e.pending_buf[e.pending++]=255&n,e.pending_buf[e.pending++]=n>>>8&255}function Mo(e,n,t){e.bi_valid>mo-t?(e.bi_buf|=n<<e.bi_valid&65535,Uo(e,e.bi_buf),e.bi_buf=n>>mo-e.bi_valid,e.bi_valid+=t-mo):(e.bi_buf|=n<<e.bi_valid&65535,e.bi_valid+=t)}function Po(e,n,t){Mo(e,t[2*n],t[2*n+1])}function Fo(e,n){var t=0;do{t|=1&e,e>>>=1,t<<=1}while(--n>0);return t>>>1}function No(e,n,t){var a,i,o=new Array(ho+1),s=0;for(a=1;a<=ho;a++)o[a]=s=s+t[a-1]<<1;for(i=0;i<=n;i++){var r=e[2*i+1];0!==r&&(e[2*i]=Fo(o[r]++,r))}}function Io(e){var n;for(n=0;n<co;n++)e.dyn_ltree[2*n]=0;for(n=0;n<po;n++)e.dyn_dtree[2*n]=0;for(n=0;n<lo;n++)e.bl_tree[2*n]=0;e.dyn_ltree[2*vo]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function $o(e){e.bi_valid>8?Uo(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function Do(e,n,t,a){var i=2*n,o=2*t;return e[i]<e[o]||e[i]===e[o]&&a[n]<=a[t]}function Zo(e,n,t){for(var a=e.heap[t],i=t<<1;i<=e.heap_len&&(i<e.heap_len&&Do(n,e.heap[i+1],e.heap[i],e.depth)&&i++,!Do(n,a,e.heap[i],e.depth));)e.heap[t]=e.heap[i],t=i,i<<=1;e.heap[t]=a}function Ho(e,n,t){var a,i,o,s,r=0;if(0!==e.last_lit)do{a=e.pending_buf[e.d_buf+2*r]<<8|e.pending_buf[e.d_buf+2*r+1],i=e.pending_buf[e.l_buf+r],r++,0===a?Po(e,i,n):(Po(e,(o=Ro[i])+ro+1,n),0!==(s=wo[o])&&Mo(e,i-=zo[o],s),Po(e,o=Bo(--a),t),0!==(s=_o[o])&&Mo(e,a-=To[o],s))}while(r<e.last_lit);Po(e,vo,n)}function Yo(e,n){var t,a,i,o=n.dyn_tree,s=n.stat_desc.static_tree,r=n.stat_desc.has_stree,c=n.stat_desc.elems,p=-1;for(e.heap_len=0,e.heap_max=uo,t=0;t<c;t++)0!==o[2*t]?(e.heap[++e.heap_len]=p=t,e.depth[t]=0):o[2*t+1]=0;for(;e.heap_len<2;)o[2*(i=e.heap[++e.heap_len]=p<2?++p:0)]=1,e.depth[i]=0,e.opt_len--,r&&(e.static_len-=s[2*i+1]);for(n.max_code=p,t=e.heap_len>>1;t>=1;t--)Zo(e,o,t);i=c;do{t=e.heap[1],e.heap[1]=e.heap[e.heap_len--],Zo(e,o,1),a=e.heap[1],e.heap[--e.heap_max]=t,e.heap[--e.heap_max]=a,o[2*i]=o[2*t]+o[2*a],e.depth[i]=(e.depth[t]>=e.depth[a]?e.depth[t]:e.depth[a])+1,o[2*t+1]=o[2*a+1]=i,e.heap[1]=i++,Zo(e,o,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],function(e,n){var t,a,i,o,s,r,c=n.dyn_tree,p=n.max_code,l=n.stat_desc.static_tree,u=n.stat_desc.has_stree,d=n.stat_desc.extra_bits,h=n.stat_desc.extra_base,m=n.stat_desc.max_length,f=0;for(o=0;o<=ho;o++)e.bl_count[o]=0;for(c[2*e.heap[e.heap_max]+1]=0,t=e.heap_max+1;t<uo;t++)(o=c[2*c[2*(a=e.heap[t])+1]+1]+1)>m&&(o=m,f++),c[2*a+1]=o,a>p||(e.bl_count[o]++,s=0,a>=h&&(s=d[a-h]),r=c[2*a],e.opt_len+=r*(o+s),u&&(e.static_len+=r*(l[2*a+1]+s)));if(0!==f){do{for(o=m-1;0===e.bl_count[o];)o--;e.bl_count[o]--,e.bl_count[o+1]+=2,e.bl_count[m]--,f-=2}while(f>0);for(o=m;0!==o;o--)for(a=e.bl_count[o];0!==a;)(i=e.heap[--t])>p||(c[2*i+1]!==o&&(e.opt_len+=(o-c[2*i+1])*c[2*i],c[2*i+1]=o),a--)}}(e,n),No(o,p,e.bl_count)}function Vo(e,n,t){var a,i,o=-1,s=n[1],r=0,c=7,p=4;for(0===s&&(c=138,p=3),n[2*(t+1)+1]=65535,a=0;a<=t;a++)i=s,s=n[2*(a+1)+1],++r<c&&i===s||(r<p?e.bl_tree[2*i]+=r:0!==i?(i!==o&&e.bl_tree[2*i]++,e.bl_tree[2*xo]++):r<=10?e.bl_tree[2*go]++:e.bl_tree[2*bo]++,r=0,o=i,0===s?(c=138,p=3):i===s?(c=6,p=3):(c=7,p=4))}function Wo(e,n,t){var a,i,o=-1,s=n[1],r=0,c=7,p=4;for(0===s&&(c=138,p=3),a=0;a<=t;a++)if(i=s,s=n[2*(a+1)+1],!(++r<c&&i===s)){if(r<p)do{Po(e,i,e.bl_tree)}while(0!=--r);else 0!==i?(i!==o&&(Po(e,i,e.bl_tree),r--),Po(e,xo,e.bl_tree),Mo(e,r-3,2)):r<=10?(Po(e,go,e.bl_tree),Mo(e,r-3,3)):(Po(e,bo,e.bl_tree),Mo(e,r-11,7));r=0,o=i,0===s?(c=138,p=3):i===s?(c=6,p=3):(c=7,p=4)}}to(To);var Ko=!1;function Go(e,n,t,a){Mo(e,(ao<<1)+(a?1:0),3),function(e,n,t,a){$o(e),Uo(e,t),Uo(e,~t),Wi(e.pending_buf,e.window,n,t,e.pending),e.pending+=t}(e,n,t)}function Jo(e,n,t){return e.pending_buf[e.d_buf+2*e.last_lit]=n>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&n,e.pending_buf[e.l_buf+e.last_lit]=255&t,e.last_lit++,0===n?e.dyn_ltree[2*t]++:(e.matches++,n--,e.dyn_ltree[2*(Ro[t]+ro+1)]++,e.dyn_dtree[2*Bo(n)]++),e.last_lit===e.lit_bufsize-1}function Xo(e,n,t,a){for(var i=65535&e|0,o=e>>>16&65535|0,s=0;0!==t;){t-=s=t>2e3?2e3:t;do{o=o+(i=i+n[a++]|0)|0}while(--s);i%=65521,o%=65521}return i|o<<16|0}var Qo=function(){for(var e,n=[],t=0;t<256;t++){e=t;for(var a=0;a<8;a++)e=1&e?3988292384^e>>>1:e>>>1;n[t]=e}return n}();function es(e,n,t,a){var i=Qo,o=a+t;e^=-1;for(var s=a;s<o;s++)e=e>>>8^i[255&(e^n[s])];return-1^e}var ns,ts=0,as=1,is=3,os=4,ss=5,rs=0,cs=1,ps=-2,ls=-5,us=1,ds=2,hs=3,ms=2,fs=8,vs=286,xs=30,gs=19,bs=2*vs+1,ws=15,_s=3,ys=258,ks=ys+_s+1,Es=32,js=42,As=69,Rs=73,zs=91,Cs=103,Ss=113,Os=666,Ts=1,Ls=2,qs=3,Bs=4,Us=3;function Ms(e,n){return e.msg=Yi[n],n}function Ps(e){return(e<<1)-(e>4?9:0)}function Fs(e){for(var n=e.length;--n>=0;)e[n]=0}function Ns(e){var n=e.state,t=n.pending;t>e.avail_out&&(t=e.avail_out),0!==t&&(Wi(e.output,n.pending_buf,n.pending_out,t,e.next_out),e.next_out+=t,n.pending_out+=t,e.total_out+=t,e.avail_out-=t,n.pending-=t,0===n.pending&&(n.pending_out=0))}function Is(e,n){(function(e,n,t,a){var i,o,s=0;e.level>0?(e.strm.data_type===no&&(e.strm.data_type=function(e){var n,t=4093624447;for(n=0;n<=31;n++,t>>>=1)if(1&t&&0!==e.dyn_ltree[2*n])return Qi;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return eo;for(n=32;n<ro;n++)if(0!==e.dyn_ltree[2*n])return eo;return Qi}(e)),Yo(e,e.l_desc),Yo(e,e.d_desc),s=function(e){var n;for(Vo(e,e.dyn_ltree,e.l_desc.max_code),Vo(e,e.dyn_dtree,e.d_desc.max_code),Yo(e,e.bl_desc),n=lo-1;n>=3&&0===e.bl_tree[2*ko[n]+1];n--);return e.opt_len+=3*(n+1)+5+5+4,n}(e),i=e.opt_len+3+7>>>3,(o=e.static_len+3+7>>>3)<=i&&(i=o)):i=o=t+5,t+4<=i&&-1!==n?Go(e,n,t,a):e.strategy===Xi||o===i?(Mo(e,(io<<1)+(a?1:0),3),Ho(e,Eo,jo)):(Mo(e,(oo<<1)+(a?1:0),3),function(e,n,t,a){var i;for(Mo(e,n-257,5),Mo(e,t-1,5),Mo(e,a-4,4),i=0;i<a;i++)Mo(e,e.bl_tree[2*ko[i]+1],3);Wo(e,e.dyn_ltree,n-1),Wo(e,e.dyn_dtree,t-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,s+1),Ho(e,e.dyn_ltree,e.dyn_dtree)),Io(e),a&&$o(e)})(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,n),e.block_start=e.strstart,Ns(e.strm)}function $s(e,n){e.pending_buf[e.pending++]=n}function Ds(e,n){e.pending_buf[e.pending++]=n>>>8&255,e.pending_buf[e.pending++]=255&n}function Zs(e,n){var t,a,i=e.max_chain_length,o=e.strstart,s=e.prev_length,r=e.nice_match,c=e.strstart>e.w_size-ks?e.strstart-(e.w_size-ks):0,p=e.window,l=e.w_mask,u=e.prev,d=e.strstart+ys,h=p[o+s-1],m=p[o+s];e.prev_length>=e.good_match&&(i>>=2),r>e.lookahead&&(r=e.lookahead);do{if(p[(t=n)+s]===m&&p[t+s-1]===h&&p[t]===p[o]&&p[++t]===p[o+1]){o+=2,t++;do{}while(p[++o]===p[++t]&&p[++o]===p[++t]&&p[++o]===p[++t]&&p[++o]===p[++t]&&p[++o]===p[++t]&&p[++o]===p[++t]&&p[++o]===p[++t]&&p[++o]===p[++t]&&o<d);if(a=ys-(d-o),o=d-ys,a>s){if(e.match_start=n,s=a,a>=r)break;h=p[o+s-1],m=p[o+s]}}}while((n=u[n&l])>c&&0!=--i);return s<=e.lookahead?s:e.lookahead}function Hs(e){var n,t,a,i,o,s,r,c,p,l,u=e.w_size;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=u+(u-ks)){Wi(e.window,e.window,u,u,0),e.match_start-=u,e.strstart-=u,e.block_start-=u,n=t=e.hash_size;do{a=e.head[--n],e.head[n]=a>=u?a-u:0}while(--t);n=t=u;do{a=e.prev[--n],e.prev[n]=a>=u?a-u:0}while(--t);i+=u}if(0===e.strm.avail_in)break;if(s=e.strm,r=e.window,c=e.strstart+e.lookahead,p=i,l=void 0,(l=s.avail_in)>p&&(l=p),t=0===l?0:(s.avail_in-=l,Wi(r,s.input,s.next_in,l,c),1===s.state.wrap?s.adler=Xo(s.adler,r,l,c):2===s.state.wrap&&(s.adler=es(s.adler,r,l,c)),s.next_in+=l,s.total_in+=l,l),e.lookahead+=t,e.lookahead+e.insert>=_s)for(o=e.strstart-e.insert,e.ins_h=e.window[o],e.ins_h=(e.ins_h<<e.hash_shift^e.window[o+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[o+_s-1])&e.hash_mask,e.prev[o&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=o,o++,e.insert--,!(e.lookahead+e.insert<_s)););}while(e.lookahead<ks&&0!==e.strm.avail_in)}function Ys(e,n){for(var t,a;;){if(e.lookahead<ks){if(Hs(e),e.lookahead<ks&&n===ts)return Ts;if(0===e.lookahead)break}if(t=0,e.lookahead>=_s&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+_s-1])&e.hash_mask,t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==t&&e.strstart-t<=e.w_size-ks&&(e.match_length=Zs(e,t)),e.match_length>=_s)if(a=Jo(e,e.strstart-e.match_start,e.match_length-_s),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=_s){e.match_length--;do{e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+_s-1])&e.hash_mask,t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart}while(0!=--e.match_length);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else a=Jo(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(a&&(Is(e,!1),0===e.strm.avail_out))return Ts}return e.insert=e.strstart<_s-1?e.strstart:_s-1,n===os?(Is(e,!0),0===e.strm.avail_out?qs:Bs):e.last_lit&&(Is(e,!1),0===e.strm.avail_out)?Ts:Ls}function Vs(e,n){for(var t,a,i;;){if(e.lookahead<ks){if(Hs(e),e.lookahead<ks&&n===ts)return Ts;if(0===e.lookahead)break}if(t=0,e.lookahead>=_s&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+_s-1])&e.hash_mask,t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=_s-1,0!==t&&e.prev_length<e.max_lazy_match&&e.strstart-t<=e.w_size-ks&&(e.match_length=Zs(e,t),e.match_length<=5&&(e.strategy===us||e.match_length===_s&&e.strstart-e.match_start>4096)&&(e.match_length=_s-1)),e.prev_length>=_s&&e.match_length<=e.prev_length){i=e.strstart+e.lookahead-_s,a=Jo(e,e.strstart-1-e.prev_match,e.prev_length-_s),e.lookahead-=e.prev_length-1,e.prev_length-=2;do{++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+_s-1])&e.hash_mask,t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart)}while(0!=--e.prev_length);if(e.match_available=0,e.match_length=_s-1,e.strstart++,a&&(Is(e,!1),0===e.strm.avail_out))return Ts}else if(e.match_available){if((a=Jo(e,0,e.window[e.strstart-1]))&&Is(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return Ts}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(a=Jo(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<_s-1?e.strstart:_s-1,n===os?(Is(e,!0),0===e.strm.avail_out?qs:Bs):e.last_lit&&(Is(e,!1),0===e.strm.avail_out)?Ts:Ls}function Ws(e,n,t,a,i){this.good_length=e,this.max_lazy=n,this.nice_length=t,this.max_chain=a,this.func=i}function Ks(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=fs,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Gi(2*bs),this.dyn_dtree=new Gi(2*(2*xs+1)),this.bl_tree=new Gi(2*(2*gs+1)),Fs(this.dyn_ltree),Fs(this.dyn_dtree),Fs(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Gi(ws+1),this.heap=new Gi(2*vs+1),Fs(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Gi(2*vs+1),Fs(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function Gs(e){var n=function(e){var n;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=ms,(n=e.state).pending=0,n.pending_out=0,n.wrap<0&&(n.wrap=-n.wrap),n.status=n.wrap?js:Ss,e.adler=2===n.wrap?0:1,n.last_flush=ts,function(e){Ko||(function(){var e,n,t,a,i,o=new Array(ho+1);for(t=0,a=0;a<so-1;a++)for(zo[a]=t,e=0;e<1<<wo[a];e++)Ro[t++]=a;for(Ro[t-1]=a,i=0,a=0;a<16;a++)for(To[a]=i,e=0;e<1<<_o[a];e++)Ao[i++]=a;for(i>>=7;a<po;a++)for(To[a]=i<<7,e=0;e<1<<_o[a]-7;e++)Ao[256+i++]=a;for(n=0;n<=ho;n++)o[n]=0;for(e=0;e<=143;)Eo[2*e+1]=8,e++,o[8]++;for(;e<=255;)Eo[2*e+1]=9,e++,o[9]++;for(;e<=279;)Eo[2*e+1]=7,e++,o[7]++;for(;e<=287;)Eo[2*e+1]=8,e++,o[8]++;for(No(Eo,co+1,o),e=0;e<po;e++)jo[2*e+1]=5,jo[2*e]=Fo(e,5);Co=new Lo(Eo,wo,ro+1,co,ho),So=new Lo(jo,_o,0,po,ho),Oo=new Lo(new Array(0),yo,0,lo,fo)}(),Ko=!0),e.l_desc=new qo(e.dyn_ltree,Co),e.d_desc=new qo(e.dyn_dtree,So),e.bl_desc=new qo(e.bl_tree,Oo),e.bi_buf=0,e.bi_valid=0,Io(e)}(n),rs):Ms(e,ps)}(e);return n===rs&&function(e){e.window_size=2*e.w_size,Fs(e.head),e.max_lazy_match=ns[e.level].max_lazy,e.good_match=ns[e.level].good_length,e.nice_match=ns[e.level].nice_length,e.max_chain_length=ns[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=_s-1,e.match_available=0,e.ins_h=0}(e.state),n}function Js(e,n){var t,a,i,o;if(!e||!e.state||n>ss||n<0)return e?Ms(e,ps):ps;if(a=e.state,!e.output||!e.input&&0!==e.avail_in||a.status===Os&&n!==os)return Ms(e,0===e.avail_out?ls:ps);if(a.strm=e,t=a.last_flush,a.last_flush=n,a.status===js)if(2===a.wrap)e.adler=0,$s(a,31),$s(a,139),$s(a,8),a.gzhead?($s(a,(a.gzhead.text?1:0)+(a.gzhead.hcrc?2:0)+(a.gzhead.extra?4:0)+(a.gzhead.name?8:0)+(a.gzhead.comment?16:0)),$s(a,255&a.gzhead.time),$s(a,a.gzhead.time>>8&255),$s(a,a.gzhead.time>>16&255),$s(a,a.gzhead.time>>24&255),$s(a,9===a.level?2:a.strategy>=ds||a.level<2?4:0),$s(a,255&a.gzhead.os),a.gzhead.extra&&a.gzhead.extra.length&&($s(a,255&a.gzhead.extra.length),$s(a,a.gzhead.extra.length>>8&255)),a.gzhead.hcrc&&(e.adler=es(e.adler,a.pending_buf,a.pending,0)),a.gzindex=0,a.status=As):($s(a,0),$s(a,0),$s(a,0),$s(a,0),$s(a,0),$s(a,9===a.level?2:a.strategy>=ds||a.level<2?4:0),$s(a,Us),a.status=Ss);else{var s=fs+(a.w_bits-8<<4)<<8;s|=(a.strategy>=ds||a.level<2?0:a.level<6?1:6===a.level?2:3)<<6,0!==a.strstart&&(s|=Es),s+=31-s%31,a.status=Ss,Ds(a,s),0!==a.strstart&&(Ds(a,e.adler>>>16),Ds(a,65535&e.adler)),e.adler=1}if(a.status===As)if(a.gzhead.extra){for(i=a.pending;a.gzindex<(65535&a.gzhead.extra.length)&&(a.pending!==a.pending_buf_size||(a.gzhead.hcrc&&a.pending>i&&(e.adler=es(e.adler,a.pending_buf,a.pending-i,i)),Ns(e),i=a.pending,a.pending!==a.pending_buf_size));)$s(a,255&a.gzhead.extra[a.gzindex]),a.gzindex++;a.gzhead.hcrc&&a.pending>i&&(e.adler=es(e.adler,a.pending_buf,a.pending-i,i)),a.gzindex===a.gzhead.extra.length&&(a.gzindex=0,a.status=Rs)}else a.status=Rs;if(a.status===Rs)if(a.gzhead.name){i=a.pending;do{if(a.pending===a.pending_buf_size&&(a.gzhead.hcrc&&a.pending>i&&(e.adler=es(e.adler,a.pending_buf,a.pending-i,i)),Ns(e),i=a.pending,a.pending===a.pending_buf_size)){o=1;break}o=a.gzindex<a.gzhead.name.length?255&a.gzhead.name.charCodeAt(a.gzindex++):0,$s(a,o)}while(0!==o);a.gzhead.hcrc&&a.pending>i&&(e.adler=es(e.adler,a.pending_buf,a.pending-i,i)),0===o&&(a.gzindex=0,a.status=zs)}else a.status=zs;if(a.status===zs)if(a.gzhead.comment){i=a.pending;do{if(a.pending===a.pending_buf_size&&(a.gzhead.hcrc&&a.pending>i&&(e.adler=es(e.adler,a.pending_buf,a.pending-i,i)),Ns(e),i=a.pending,a.pending===a.pending_buf_size)){o=1;break}o=a.gzindex<a.gzhead.comment.length?255&a.gzhead.comment.charCodeAt(a.gzindex++):0,$s(a,o)}while(0!==o);a.gzhead.hcrc&&a.pending>i&&(e.adler=es(e.adler,a.pending_buf,a.pending-i,i)),0===o&&(a.status=Cs)}else a.status=Cs;if(a.status===Cs&&(a.gzhead.hcrc?(a.pending+2>a.pending_buf_size&&Ns(e),a.pending+2<=a.pending_buf_size&&($s(a,255&e.adler),$s(a,e.adler>>8&255),e.adler=0,a.status=Ss)):a.status=Ss),0!==a.pending){if(Ns(e),0===e.avail_out)return a.last_flush=-1,rs}else if(0===e.avail_in&&Ps(n)<=Ps(t)&&n!==os)return Ms(e,ls);if(a.status===Os&&0!==e.avail_in)return Ms(e,ls);if(0!==e.avail_in||0!==a.lookahead||n!==ts&&a.status!==Os){var r=a.strategy===ds?function(e,n){for(var t;;){if(0===e.lookahead&&(Hs(e),0===e.lookahead)){if(n===ts)return Ts;break}if(e.match_length=0,t=Jo(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,t&&(Is(e,!1),0===e.strm.avail_out))return Ts}return e.insert=0,n===os?(Is(e,!0),0===e.strm.avail_out?qs:Bs):e.last_lit&&(Is(e,!1),0===e.strm.avail_out)?Ts:Ls}(a,n):a.strategy===hs?function(e,n){for(var t,a,i,o,s=e.window;;){if(e.lookahead<=ys){if(Hs(e),e.lookahead<=ys&&n===ts)return Ts;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=_s&&e.strstart>0&&(a=s[i=e.strstart-1])===s[++i]&&a===s[++i]&&a===s[++i]){o=e.strstart+ys;do{}while(a===s[++i]&&a===s[++i]&&a===s[++i]&&a===s[++i]&&a===s[++i]&&a===s[++i]&&a===s[++i]&&a===s[++i]&&i<o);e.match_length=ys-(o-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=_s?(t=Jo(e,1,e.match_length-_s),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(t=Jo(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),t&&(Is(e,!1),0===e.strm.avail_out))return Ts}return e.insert=0,n===os?(Is(e,!0),0===e.strm.avail_out?qs:Bs):e.last_lit&&(Is(e,!1),0===e.strm.avail_out)?Ts:Ls}(a,n):ns[a.level].func(a,n);if(r!==qs&&r!==Bs||(a.status=Os),r===Ts||r===qs)return 0===e.avail_out&&(a.last_flush=-1),rs;if(r===Ls&&(n===as?function(e){Mo(e,io<<1,3),Po(e,vo,Eo),function(e){16===e.bi_valid?(Uo(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}(a):n!==ss&&(Go(a,0,0,!1),n===is&&(Fs(a.head),0===a.lookahead&&(a.strstart=0,a.block_start=0,a.insert=0))),Ns(e),0===e.avail_out))return a.last_flush=-1,rs}return n!==os?rs:a.wrap<=0?cs:(2===a.wrap?($s(a,255&e.adler),$s(a,e.adler>>8&255),$s(a,e.adler>>16&255),$s(a,e.adler>>24&255),$s(a,255&e.total_in),$s(a,e.total_in>>8&255),$s(a,e.total_in>>16&255),$s(a,e.total_in>>24&255)):(Ds(a,e.adler>>>16),Ds(a,65535&e.adler)),Ns(e),a.wrap>0&&(a.wrap=-a.wrap),0!==a.pending?rs:cs)}ns=[new Ws(0,0,0,0,(function(e,n){var t=65535;for(t>e.pending_buf_size-5&&(t=e.pending_buf_size-5);;){if(e.lookahead<=1){if(Hs(e),0===e.lookahead&&n===ts)return Ts;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var a=e.block_start+t;if((0===e.strstart||e.strstart>=a)&&(e.lookahead=e.strstart-a,e.strstart=a,Is(e,!1),0===e.strm.avail_out))return Ts;if(e.strstart-e.block_start>=e.w_size-ks&&(Is(e,!1),0===e.strm.avail_out))return Ts}return e.insert=0,n===os?(Is(e,!0),0===e.strm.avail_out?qs:Bs):(e.strstart>e.block_start&&(Is(e,!1),e.strm.avail_out),Ts)})),new Ws(4,4,8,4,Ys),new Ws(4,5,16,8,Ys),new Ws(4,6,32,32,Ys),new Ws(4,4,16,16,Vs),new Ws(8,16,32,32,Vs),new Ws(8,16,128,128,Vs),new Ws(8,32,128,256,Vs),new Ws(32,128,258,1024,Vs),new Ws(32,258,258,4096,Vs)];var Xs=30,Qs=12;function er(e,n){var t,a,i,o,s,r,c,p,l,u,d,h,m,f,v,x,g,b,w,_,y,k,E,j,A;t=e.state,a=e.next_in,j=e.input,i=a+(e.avail_in-5),o=e.next_out,A=e.output,s=o-(n-e.avail_out),r=o+(e.avail_out-257),c=t.dmax,p=t.wsize,l=t.whave,u=t.wnext,d=t.window,h=t.hold,m=t.bits,f=t.lencode,v=t.distcode,x=(1<<t.lenbits)-1,g=(1<<t.distbits)-1;e:do{m<15&&(h+=j[a++]<<m,m+=8,h+=j[a++]<<m,m+=8),b=f[h&x];n:for(;;){if(h>>>=w=b>>>24,m-=w,0==(w=b>>>16&255))A[o++]=65535&b;else{if(!(16&w)){if(0==(64&w)){b=f[(65535&b)+(h&(1<<w)-1)];continue n}if(32&w){t.mode=Qs;break e}e.msg="invalid literal/length code",t.mode=Xs;break e}_=65535&b,(w&=15)&&(m<w&&(h+=j[a++]<<m,m+=8),_+=h&(1<<w)-1,h>>>=w,m-=w),m<15&&(h+=j[a++]<<m,m+=8,h+=j[a++]<<m,m+=8),b=v[h&g];t:for(;;){if(h>>>=w=b>>>24,m-=w,!(16&(w=b>>>16&255))){if(0==(64&w)){b=v[(65535&b)+(h&(1<<w)-1)];continue t}e.msg="invalid distance code",t.mode=Xs;break e}if(y=65535&b,m<(w&=15)&&(h+=j[a++]<<m,(m+=8)<w&&(h+=j[a++]<<m,m+=8)),(y+=h&(1<<w)-1)>c){e.msg="invalid distance too far back",t.mode=Xs;break e}if(h>>>=w,m-=w,y>(w=o-s)){if((w=y-w)>l&&t.sane){e.msg="invalid distance too far back",t.mode=Xs;break e}if(k=0,E=d,0===u){if(k+=p-w,w<_){_-=w;do{A[o++]=d[k++]}while(--w);k=o-y,E=A}}else if(u<w){if(k+=p+u-w,(w-=u)<_){_-=w;do{A[o++]=d[k++]}while(--w);if(k=0,u<_){_-=w=u;do{A[o++]=d[k++]}while(--w);k=o-y,E=A}}}else if(k+=u-w,w<_){_-=w;do{A[o++]=d[k++]}while(--w);k=o-y,E=A}for(;_>2;)A[o++]=E[k++],A[o++]=E[k++],A[o++]=E[k++],_-=3;_&&(A[o++]=E[k++],_>1&&(A[o++]=E[k++]))}else{k=o-y;do{A[o++]=A[k++],A[o++]=A[k++],A[o++]=A[k++],_-=3}while(_>2);_&&(A[o++]=A[k++],_>1&&(A[o++]=A[k++]))}break}}break}}while(a<i&&o<r);a-=_=m>>3,h&=(1<<(m-=_<<3))-1,e.next_in=a,e.next_out=o,e.avail_in=a<i?i-a+5:5-(a-i),e.avail_out=o<r?r-o+257:257-(o-r),t.hold=h,t.bits=m}var nr=15,tr=852,ar=592,ir=0,or=1,sr=2,rr=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],cr=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],pr=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],lr=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];function ur(e,n,t,a,i,o,s,r){var c,p,l,u,d,h,m,f,v,x=r.bits,g=0,b=0,w=0,_=0,y=0,k=0,E=0,j=0,A=0,R=0,z=null,C=0,S=new Gi(nr+1),O=new Gi(nr+1),T=null,L=0;for(g=0;g<=nr;g++)S[g]=0;for(b=0;b<a;b++)S[n[t+b]]++;for(y=x,_=nr;_>=1&&0===S[_];_--);if(y>_&&(y=_),0===_)return i[o++]=20971520,i[o++]=20971520,r.bits=1,0;for(w=1;w<_&&0===S[w];w++);for(y<w&&(y=w),j=1,g=1;g<=nr;g++)if(j<<=1,(j-=S[g])<0)return-1;if(j>0&&(e===ir||1!==_))return-1;for(O[1]=0,g=1;g<nr;g++)O[g+1]=O[g]+S[g];for(b=0;b<a;b++)0!==n[t+b]&&(s[O[n[t+b]]++]=b);if(e===ir?(z=T=s,h=19):e===or?(z=rr,C-=257,T=cr,L-=257,h=256):(z=pr,T=lr,h=-1),R=0,b=0,g=w,d=o,k=y,E=0,l=-1,u=(A=1<<y)-1,e===or&&A>tr||e===sr&&A>ar)return 1;for(;;){m=g-E,s[b]<h?(f=0,v=s[b]):s[b]>h?(f=T[L+s[b]],v=z[C+s[b]]):(f=96,v=0),c=1<<g-E,w=p=1<<k;do{i[d+(R>>E)+(p-=c)]=m<<24|f<<16|v|0}while(0!==p);for(c=1<<g-1;R&c;)c>>=1;if(0!==c?(R&=c-1,R+=c):R=0,b++,0==--S[g]){if(g===_)break;g=n[t+s[b]]}if(g>y&&(R&u)!==l){for(0===E&&(E=y),d+=w,j=1<<(k=g-E);k+E<_&&!((j-=S[k+E])<=0);)k++,j<<=1;if(A+=1<<k,e===or&&A>tr||e===sr&&A>ar)return 1;i[l=R&u]=y<<24|k<<16|d-o|0}}return 0!==R&&(i[d+R]=g-E<<24|64<<16|0),r.bits=y,0}var dr=0,hr=1,mr=2,fr=4,vr=5,xr=6,gr=0,br=1,wr=2,_r=-2,yr=-3,kr=-4,Er=-5,jr=8,Ar=1,Rr=2,zr=3,Cr=4,Sr=5,Or=6,Tr=7,Lr=8,qr=9,Br=10,Ur=11,Mr=12,Pr=13,Fr=14,Nr=15,Ir=16,$r=17,Dr=18,Zr=19,Hr=20,Yr=21,Vr=22,Wr=23,Kr=24,Gr=25,Jr=26,Xr=27,Qr=28,ec=29,nc=30,tc=31,ac=852,ic=592;function oc(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function sc(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Gi(320),this.work=new Gi(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function rc(e){var n;return e&&e.state?((n=e.state).wsize=0,n.whave=0,n.wnext=0,function(e){var n;return e&&e.state?(n=e.state,e.total_in=e.total_out=n.total=0,e.msg="",n.wrap&&(e.adler=1&n.wrap),n.mode=Ar,n.last=0,n.havedict=0,n.dmax=32768,n.head=null,n.hold=0,n.bits=0,n.lencode=n.lendyn=new Ji(ac),n.distcode=n.distdyn=new Ji(ic),n.sane=1,n.back=-1,gr):_r}(e)):_r}var cc,pc,lc=!0;function uc(e){if(lc){var n;for(cc=new Ji(512),pc=new Ji(32),n=0;n<144;)e.lens[n++]=8;for(;n<256;)e.lens[n++]=9;for(;n<280;)e.lens[n++]=7;for(;n<288;)e.lens[n++]=8;for(ur(hr,e.lens,0,288,cc,0,e.work,{bits:9}),n=0;n<32;)e.lens[n++]=5;ur(mr,e.lens,0,32,pc,0,e.work,{bits:5}),lc=!1}e.lencode=cc,e.lenbits=9,e.distcode=pc,e.distbits=5}var dc,hc=1,mc=7;function fc(e){if(e<hc||e>mc)throw new TypeError("Bad argument");this.mode=e,this.init_done=!1,this.write_in_progress=!1,this.pending_close=!1,this.windowBits=0,this.level=0,this.memLevel=0,this.strategy=0,this.dictionary=null}function vc(e,n){for(var t=0;t<e.length;t++)this[n+t]=e[t]}fc.prototype.init=function(e,n,t,a,i){var o;switch(this.windowBits=e,this.level=n,this.memLevel=t,this.strategy=a,3!==this.mode&&4!==this.mode||(this.windowBits+=16),this.mode===mc&&(this.windowBits+=32),5!==this.mode&&6!==this.mode||(this.windowBits=-this.windowBits),this.strm=new Vi,this.mode){case hc:case 3:case 5:o=function(e,n,t,a,i,o){if(!e)return ps;var s=1;if(-1===n&&(n=6),a<0?(s=0,a=-a):a>15&&(s=2,a-=16),i<1||i>9||8!==fs||a<8||a>15||n<0||n>9||o<0||o>4)return Ms(e,ps);8===a&&(a=9);var r=new Ks;return e.state=r,r.strm=e,r.wrap=s,r.gzhead=null,r.w_bits=a,r.w_size=1<<r.w_bits,r.w_mask=r.w_size-1,r.hash_bits=i+7,r.hash_size=1<<r.hash_bits,r.hash_mask=r.hash_size-1,r.hash_shift=~~((r.hash_bits+_s-1)/_s),r.window=new Ki(2*r.w_size),r.head=new Gi(r.hash_size),r.prev=new Gi(r.w_size),r.lit_bufsize=1<<i+6,r.pending_buf_size=4*r.lit_bufsize,r.pending_buf=new Ki(r.pending_buf_size),r.d_buf=1*r.lit_bufsize,r.l_buf=3*r.lit_bufsize,r.level=n,r.strategy=o,r.method=8,Gs(e)}(this.strm,this.level,0,this.windowBits,this.memLevel,this.strategy);break;case 2:case 4:case 6:case mc:o=function(e,n){var t,a;return e?(a=new sc,e.state=a,a.window=null,t=function(e,n){var t,a;return e&&e.state?(a=e.state,n<0?(t=0,n=-n):(t=1+(n>>4),n<48&&(n&=15)),n&&(n<8||n>15)?_r:(null!==a.window&&a.wbits!==n&&(a.window=null),a.wrap=t,a.wbits=n,rc(e))):_r}(e,n),t!==gr&&(e.state=null),t):_r}(this.strm,this.windowBits);break;default:throw new Error("Unknown mode "+this.mode)}0===o?(this.write_in_progress=!1,this.init_done=!0):this._error(o)},fc.prototype.params=function(){throw new Error("deflateParams Not supported")},fc.prototype._writeCheck=function(){if(!this.init_done)throw new Error("write before init");if(0===this.mode)throw new Error("already finalized");if(this.write_in_progress)throw new Error("write already in progress");if(this.pending_close)throw new Error("close is pending")},fc.prototype.write=function(e,n,t,a,i,o,s){this._writeCheck(),this.write_in_progress=!0;var r=this;return H.nextTick((function(){r.write_in_progress=!1;var c=r._write(e,n,t,a,i,o,s);r.callback(c[0],c[1]),r.pending_close&&r.close()})),this},fc.prototype.writeSync=function(e,n,t,a,i,o,s){return this._writeCheck(),this._write(e,n,t,a,i,o,s)},fc.prototype._write=function(e,n,t,a,i,o,s){if(this.write_in_progress=!0,0!==e&&1!==e&&2!==e&&3!==e&&4!==e&&5!==e)throw new Error("Invalid flush value");null==n&&(n=new me(0),a=0,t=0),i._set?i.set=i._set:i.set=vc;var r,c=this.strm;switch(c.avail_in=a,c.input=n,c.next_in=t,c.avail_out=s,c.output=i,c.next_out=o,this.mode){case hc:case 3:case 5:r=Js(c,e);break;case mc:case 2:case 4:case 6:r=function(e,n){var t,a,i,o,s,r,c,p,l,u,d,h,m,f,v,x,g,b,w,_,y,k,E,j,A=0,R=new Ki(4),z=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return _r;(t=e.state).mode===Mr&&(t.mode=Pr),s=e.next_out,i=e.output,c=e.avail_out,o=e.next_in,a=e.input,r=e.avail_in,p=t.hold,l=t.bits,u=r,d=c,k=gr;e:for(;;)switch(t.mode){case Ar:if(0===t.wrap){t.mode=Pr;break}for(;l<16;){if(0===r)break e;r--,p+=a[o++]<<l,l+=8}if(2&t.wrap&&35615===p){t.check=0,R[0]=255&p,R[1]=p>>>8&255,t.check=es(t.check,R,2,0),p=0,l=0,t.mode=Rr;break}if(t.flags=0,t.head&&(t.head.done=!1),!(1&t.wrap)||(((255&p)<<8)+(p>>8))%31){e.msg="incorrect header check",t.mode=nc;break}if((15&p)!==jr){e.msg="unknown compression method",t.mode=nc;break}if(l-=4,y=8+(15&(p>>>=4)),0===t.wbits)t.wbits=y;else if(y>t.wbits){e.msg="invalid window size",t.mode=nc;break}t.dmax=1<<y,e.adler=t.check=1,t.mode=512&p?Br:Mr,p=0,l=0;break;case Rr:for(;l<16;){if(0===r)break e;r--,p+=a[o++]<<l,l+=8}if(t.flags=p,(255&t.flags)!==jr){e.msg="unknown compression method",t.mode=nc;break}if(57344&t.flags){e.msg="unknown header flags set",t.mode=nc;break}t.head&&(t.head.text=p>>8&1),512&t.flags&&(R[0]=255&p,R[1]=p>>>8&255,t.check=es(t.check,R,2,0)),p=0,l=0,t.mode=zr;case zr:for(;l<32;){if(0===r)break e;r--,p+=a[o++]<<l,l+=8}t.head&&(t.head.time=p),512&t.flags&&(R[0]=255&p,R[1]=p>>>8&255,R[2]=p>>>16&255,R[3]=p>>>24&255,t.check=es(t.check,R,4,0)),p=0,l=0,t.mode=Cr;case Cr:for(;l<16;){if(0===r)break e;r--,p+=a[o++]<<l,l+=8}t.head&&(t.head.xflags=255&p,t.head.os=p>>8),512&t.flags&&(R[0]=255&p,R[1]=p>>>8&255,t.check=es(t.check,R,2,0)),p=0,l=0,t.mode=Sr;case Sr:if(1024&t.flags){for(;l<16;){if(0===r)break e;r--,p+=a[o++]<<l,l+=8}t.length=p,t.head&&(t.head.extra_len=p),512&t.flags&&(R[0]=255&p,R[1]=p>>>8&255,t.check=es(t.check,R,2,0)),p=0,l=0}else t.head&&(t.head.extra=null);t.mode=Or;case Or:if(1024&t.flags&&((h=t.length)>r&&(h=r),h&&(t.head&&(y=t.head.extra_len-t.length,t.head.extra||(t.head.extra=new Array(t.head.extra_len)),Wi(t.head.extra,a,o,h,y)),512&t.flags&&(t.check=es(t.check,a,h,o)),r-=h,o+=h,t.length-=h),t.length))break e;t.length=0,t.mode=Tr;case Tr:if(2048&t.flags){if(0===r)break e;h=0;do{y=a[o+h++],t.head&&y&&t.length<65536&&(t.head.name+=String.fromCharCode(y))}while(y&&h<r);if(512&t.flags&&(t.check=es(t.check,a,h,o)),r-=h,o+=h,y)break e}else t.head&&(t.head.name=null);t.length=0,t.mode=Lr;case Lr:if(4096&t.flags){if(0===r)break e;h=0;do{y=a[o+h++],t.head&&y&&t.length<65536&&(t.head.comment+=String.fromCharCode(y))}while(y&&h<r);if(512&t.flags&&(t.check=es(t.check,a,h,o)),r-=h,o+=h,y)break e}else t.head&&(t.head.comment=null);t.mode=qr;case qr:if(512&t.flags){for(;l<16;){if(0===r)break e;r--,p+=a[o++]<<l,l+=8}if(p!==(65535&t.check)){e.msg="header crc mismatch",t.mode=nc;break}p=0,l=0}t.head&&(t.head.hcrc=t.flags>>9&1,t.head.done=!0),e.adler=t.check=0,t.mode=Mr;break;case Br:for(;l<32;){if(0===r)break e;r--,p+=a[o++]<<l,l+=8}e.adler=t.check=oc(p),p=0,l=0,t.mode=Ur;case Ur:if(0===t.havedict)return e.next_out=s,e.avail_out=c,e.next_in=o,e.avail_in=r,t.hold=p,t.bits=l,wr;e.adler=t.check=1,t.mode=Mr;case Mr:if(n===vr||n===xr)break e;case Pr:if(t.last){p>>>=7&l,l-=7&l,t.mode=Xr;break}for(;l<3;){if(0===r)break e;r--,p+=a[o++]<<l,l+=8}switch(t.last=1&p,l-=1,3&(p>>>=1)){case 0:t.mode=Fr;break;case 1:if(uc(t),t.mode=Hr,n===xr){p>>>=2,l-=2;break e}break;case 2:t.mode=$r;break;case 3:e.msg="invalid block type",t.mode=nc}p>>>=2,l-=2;break;case Fr:for(p>>>=7&l,l-=7&l;l<32;){if(0===r)break e;r--,p+=a[o++]<<l,l+=8}if((65535&p)!=(p>>>16^65535)){e.msg="invalid stored block lengths",t.mode=nc;break}if(t.length=65535&p,p=0,l=0,t.mode=Nr,n===xr)break e;case Nr:t.mode=Ir;case Ir:if(h=t.length){if(h>r&&(h=r),h>c&&(h=c),0===h)break e;Wi(i,a,o,h,s),r-=h,o+=h,c-=h,s+=h,t.length-=h;break}t.mode=Mr;break;case $r:for(;l<14;){if(0===r)break e;r--,p+=a[o++]<<l,l+=8}if(t.nlen=257+(31&p),p>>>=5,l-=5,t.ndist=1+(31&p),p>>>=5,l-=5,t.ncode=4+(15&p),p>>>=4,l-=4,t.nlen>286||t.ndist>30){e.msg="too many length or distance symbols",t.mode=nc;break}t.have=0,t.mode=Dr;case Dr:for(;t.have<t.ncode;){for(;l<3;){if(0===r)break e;r--,p+=a[o++]<<l,l+=8}t.lens[z[t.have++]]=7&p,p>>>=3,l-=3}for(;t.have<19;)t.lens[z[t.have++]]=0;if(t.lencode=t.lendyn,t.lenbits=7,E={bits:t.lenbits},k=ur(dr,t.lens,0,19,t.lencode,0,t.work,E),t.lenbits=E.bits,k){e.msg="invalid code lengths set",t.mode=nc;break}t.have=0,t.mode=Zr;case Zr:for(;t.have<t.nlen+t.ndist;){for(;x=(A=t.lencode[p&(1<<t.lenbits)-1])>>>16&255,g=65535&A,!((v=A>>>24)<=l);){if(0===r)break e;r--,p+=a[o++]<<l,l+=8}if(g<16)p>>>=v,l-=v,t.lens[t.have++]=g;else{if(16===g){for(j=v+2;l<j;){if(0===r)break e;r--,p+=a[o++]<<l,l+=8}if(p>>>=v,l-=v,0===t.have){e.msg="invalid bit length repeat",t.mode=nc;break}y=t.lens[t.have-1],h=3+(3&p),p>>>=2,l-=2}else if(17===g){for(j=v+3;l<j;){if(0===r)break e;r--,p+=a[o++]<<l,l+=8}l-=v,y=0,h=3+(7&(p>>>=v)),p>>>=3,l-=3}else{for(j=v+7;l<j;){if(0===r)break e;r--,p+=a[o++]<<l,l+=8}l-=v,y=0,h=11+(127&(p>>>=v)),p>>>=7,l-=7}if(t.have+h>t.nlen+t.ndist){e.msg="invalid bit length repeat",t.mode=nc;break}for(;h--;)t.lens[t.have++]=y}}if(t.mode===nc)break;if(0===t.lens[256]){e.msg="invalid code -- missing end-of-block",t.mode=nc;break}if(t.lenbits=9,E={bits:t.lenbits},k=ur(hr,t.lens,0,t.nlen,t.lencode,0,t.work,E),t.lenbits=E.bits,k){e.msg="invalid literal/lengths set",t.mode=nc;break}if(t.distbits=6,t.distcode=t.distdyn,E={bits:t.distbits},k=ur(mr,t.lens,t.nlen,t.ndist,t.distcode,0,t.work,E),t.distbits=E.bits,k){e.msg="invalid distances set",t.mode=nc;break}if(t.mode=Hr,n===xr)break e;case Hr:t.mode=Yr;case Yr:if(r>=6&&c>=258){e.next_out=s,e.avail_out=c,e.next_in=o,e.avail_in=r,t.hold=p,t.bits=l,er(e,d),s=e.next_out,i=e.output,c=e.avail_out,o=e.next_in,a=e.input,r=e.avail_in,p=t.hold,l=t.bits,t.mode===Mr&&(t.back=-1);break}for(t.back=0;x=(A=t.lencode[p&(1<<t.lenbits)-1])>>>16&255,g=65535&A,!((v=A>>>24)<=l);){if(0===r)break e;r--,p+=a[o++]<<l,l+=8}if(x&&0==(240&x)){for(b=v,w=x,_=g;x=(A=t.lencode[_+((p&(1<<b+w)-1)>>b)])>>>16&255,g=65535&A,!(b+(v=A>>>24)<=l);){if(0===r)break e;r--,p+=a[o++]<<l,l+=8}p>>>=b,l-=b,t.back+=b}if(p>>>=v,l-=v,t.back+=v,t.length=g,0===x){t.mode=Jr;break}if(32&x){t.back=-1,t.mode=Mr;break}if(64&x){e.msg="invalid literal/length code",t.mode=nc;break}t.extra=15&x,t.mode=Vr;case Vr:if(t.extra){for(j=t.extra;l<j;){if(0===r)break e;r--,p+=a[o++]<<l,l+=8}t.length+=p&(1<<t.extra)-1,p>>>=t.extra,l-=t.extra,t.back+=t.extra}t.was=t.length,t.mode=Wr;case Wr:for(;x=(A=t.distcode[p&(1<<t.distbits)-1])>>>16&255,g=65535&A,!((v=A>>>24)<=l);){if(0===r)break e;r--,p+=a[o++]<<l,l+=8}if(0==(240&x)){for(b=v,w=x,_=g;x=(A=t.distcode[_+((p&(1<<b+w)-1)>>b)])>>>16&255,g=65535&A,!(b+(v=A>>>24)<=l);){if(0===r)break e;r--,p+=a[o++]<<l,l+=8}p>>>=b,l-=b,t.back+=b}if(p>>>=v,l-=v,t.back+=v,64&x){e.msg="invalid distance code",t.mode=nc;break}t.offset=g,t.extra=15&x,t.mode=Kr;case Kr:if(t.extra){for(j=t.extra;l<j;){if(0===r)break e;r--,p+=a[o++]<<l,l+=8}t.offset+=p&(1<<t.extra)-1,p>>>=t.extra,l-=t.extra,t.back+=t.extra}if(t.offset>t.dmax){e.msg="invalid distance too far back",t.mode=nc;break}t.mode=Gr;case Gr:if(0===c)break e;if(h=d-c,t.offset>h){if((h=t.offset-h)>t.whave&&t.sane){e.msg="invalid distance too far back",t.mode=nc;break}h>t.wnext?(h-=t.wnext,m=t.wsize-h):m=t.wnext-h,h>t.length&&(h=t.length),f=t.window}else f=i,m=s-t.offset,h=t.length;h>c&&(h=c),c-=h,t.length-=h;do{i[s++]=f[m++]}while(--h);0===t.length&&(t.mode=Yr);break;case Jr:if(0===c)break e;i[s++]=t.length,c--,t.mode=Yr;break;case Xr:if(t.wrap){for(;l<32;){if(0===r)break e;r--,p|=a[o++]<<l,l+=8}if(d-=c,e.total_out+=d,t.total+=d,d&&(e.adler=t.check=t.flags?es(t.check,i,d,s-d):Xo(t.check,i,d,s-d)),d=c,(t.flags?p:oc(p))!==t.check){e.msg="incorrect data check",t.mode=nc;break}p=0,l=0}t.mode=Qr;case Qr:if(t.wrap&&t.flags){for(;l<32;){if(0===r)break e;r--,p+=a[o++]<<l,l+=8}if(p!==(4294967295&t.total)){e.msg="incorrect length check",t.mode=nc;break}p=0,l=0}t.mode=ec;case ec:k=br;break e;case nc:k=yr;break e;case tc:return kr;default:return _r}return e.next_out=s,e.avail_out=c,e.next_in=o,e.avail_in=r,t.hold=p,t.bits=l,(t.wsize||d!==e.avail_out&&t.mode<nc&&(t.mode<Xr||n!==fr))&&function(e,n,t,a){var i,o=e.state;null===o.window&&(o.wsize=1<<o.wbits,o.wnext=0,o.whave=0,o.window=new Ki(o.wsize)),a>=o.wsize?(Wi(o.window,n,t-o.wsize,o.wsize,0),o.wnext=0,o.whave=o.wsize):((i=o.wsize-o.wnext)>a&&(i=a),Wi(o.window,n,t-a,i,o.wnext),(a-=i)?(Wi(o.window,n,t-a,a,0),o.wnext=a,o.whave=o.wsize):(o.wnext+=i,o.wnext===o.wsize&&(o.wnext=0),o.whave<o.wsize&&(o.whave+=i)))}(e,e.output,e.next_out,d-e.avail_out),u-=e.avail_in,d-=e.avail_out,e.total_in+=u,e.total_out+=d,t.total+=d,t.wrap&&d&&(e.adler=t.check=t.flags?es(t.check,i,d,e.next_out-d):Xo(t.check,i,d,e.next_out-d)),e.data_type=t.bits+(t.last?64:0)+(t.mode===Mr?128:0)+(t.mode===Hr||t.mode===Nr?256:0),(0===u&&0===d||n===fr)&&k===gr&&(k=Er),k}(c,e);break;default:throw new Error("Unknown mode "+this.mode)}return 1!==r&&0!==r&&this._error(r),this.write_in_progress=!1,[c.avail_in,c.avail_out]},fc.prototype.close=function(){this.write_in_progress?this.pending_close=!0:(this.pending_close=!1,this.mode===hc||3===this.mode||5===this.mode?function(e){var n;e&&e.state&&((n=e.state.status)!==js&&n!==As&&n!==Rs&&n!==zs&&n!==Cs&&n!==Ss&&n!==Os?Ms(e,ps):(e.state=null,n===Ss&&Ms(e,-3)))}(this.strm):function(e){if(!e||!e.state)return _r;var n=e.state;n.window&&(n.window=null),e.state=null}(this.strm),this.mode=0)},fc.prototype.reset=function(){switch(this.mode){case hc:case 5:dc=Gs(this.strm);break;case 2:case 6:dc=rc(this.strm)}0!==dc&&this._error(dc)},fc.prototype._error=function(e){this.onerror(Yi[e]+": "+this.strm.msg,e),this.write_in_progress=!1,this.pending_close&&this.close()};var xc=Object.freeze({__proto__:null,NONE:0,DEFLATE:hc,INFLATE:2,GZIP:3,GUNZIP:4,DEFLATERAW:5,INFLATERAW:6,UNZIP:mc,Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8,Zlib:fc}),gc={};Object.keys(xc).forEach((function(e){gc[e]=xc[e]})),gc.Z_MIN_WINDOWBITS=8,gc.Z_MAX_WINDOWBITS=15,gc.Z_DEFAULT_WINDOWBITS=15,gc.Z_MIN_CHUNK=64,gc.Z_MAX_CHUNK=1/0,gc.Z_DEFAULT_CHUNK=16384,gc.Z_MIN_MEMLEVEL=1,gc.Z_MAX_MEMLEVEL=9,gc.Z_DEFAULT_MEMLEVEL=8,gc.Z_MIN_LEVEL=-1,gc.Z_MAX_LEVEL=9,gc.Z_DEFAULT_LEVEL=gc.Z_DEFAULT_COMPRESSION;var bc={Z_OK:gc.Z_OK,Z_STREAM_END:gc.Z_STREAM_END,Z_NEED_DICT:gc.Z_NEED_DICT,Z_ERRNO:gc.Z_ERRNO,Z_STREAM_ERROR:gc.Z_STREAM_ERROR,Z_DATA_ERROR:gc.Z_DATA_ERROR,Z_MEM_ERROR:gc.Z_MEM_ERROR,Z_BUF_ERROR:gc.Z_BUF_ERROR,Z_VERSION_ERROR:gc.Z_VERSION_ERROR};function wc(e){if(!(this instanceof wc))return new wc(e);Rc.call(this,e,gc.DEFLATE)}function _c(e){if(!(this instanceof _c))return new _c(e);Rc.call(this,e,gc.INFLATE)}function yc(e){if(!(this instanceof yc))return new yc(e);Rc.call(this,e,gc.GZIP)}function kc(e){if(!(this instanceof kc))return new kc(e);Rc.call(this,e,gc.GUNZIP)}function Ec(e){if(!(this instanceof Ec))return new Ec(e);Rc.call(this,e,gc.DEFLATERAW)}function jc(e){if(!(this instanceof jc))return new jc(e);Rc.call(this,e,gc.INFLATERAW)}function Ac(e){if(!(this instanceof Ac))return new Ac(e);Rc.call(this,e,gc.UNZIP)}function Rc(e,n){if(this._opts=e=e||{},this._chunkSize=e.chunkSize||gc.Z_DEFAULT_CHUNK,Pt.call(this,e),e.flush&&e.flush!==gc.Z_NO_FLUSH&&e.flush!==gc.Z_PARTIAL_FLUSH&&e.flush!==gc.Z_SYNC_FLUSH&&e.flush!==gc.Z_FULL_FLUSH&&e.flush!==gc.Z_FINISH&&e.flush!==gc.Z_BLOCK)throw new Error("Invalid flush flag: "+e.flush);if(this._flushFlag=e.flush||gc.Z_NO_FLUSH,e.chunkSize&&(e.chunkSize<gc.Z_MIN_CHUNK||e.chunkSize>gc.Z_MAX_CHUNK))throw new Error("Invalid chunk size: "+e.chunkSize);if(e.windowBits&&(e.windowBits<gc.Z_MIN_WINDOWBITS||e.windowBits>gc.Z_MAX_WINDOWBITS))throw new Error("Invalid windowBits: "+e.windowBits);if(e.level&&(e.level<gc.Z_MIN_LEVEL||e.level>gc.Z_MAX_LEVEL))throw new Error("Invalid compression level: "+e.level);if(e.memLevel&&(e.memLevel<gc.Z_MIN_MEMLEVEL||e.memLevel>gc.Z_MAX_MEMLEVEL))throw new Error("Invalid memLevel: "+e.memLevel);if(e.strategy&&e.strategy!=gc.Z_FILTERED&&e.strategy!=gc.Z_HUFFMAN_ONLY&&e.strategy!=gc.Z_RLE&&e.strategy!=gc.Z_FIXED&&e.strategy!=gc.Z_DEFAULT_STRATEGY)throw new Error("Invalid strategy: "+e.strategy);if(e.dictionary&&!me.isBuffer(e.dictionary))throw new Error("Invalid dictionary: it should be a Buffer instance");this._binding=new gc.Zlib(n);var t=this;this._hadError=!1,this._binding.onerror=function(e,n){t._binding=null,t._hadError=!0;var a=new Error(e);a.errno=n,a.code=gc.codes[n],t.emit("error",a)};var a=gc.Z_DEFAULT_COMPRESSION;"number"==typeof e.level&&(a=e.level);var i=gc.Z_DEFAULT_STRATEGY;"number"==typeof e.strategy&&(i=e.strategy),this._binding.init(e.windowBits||gc.Z_DEFAULT_WINDOWBITS,a,e.memLevel||gc.Z_DEFAULT_MEMLEVEL,i,e.dictionary),this._buffer=new me(this._chunkSize),this._offset=0,this._closed=!1,this._level=a,this._strategy=i,this.once("end",this.close)}Object.keys(bc).forEach((function(e){bc[bc[e]]=e})),hn(Rc,Pt),Rc.prototype.params=function(e,n,t){if(e<gc.Z_MIN_LEVEL||e>gc.Z_MAX_LEVEL)throw new RangeError("Invalid compression level: "+e);if(n!=gc.Z_FILTERED&&n!=gc.Z_HUFFMAN_ONLY&&n!=gc.Z_RLE&&n!=gc.Z_FIXED&&n!=gc.Z_DEFAULT_STRATEGY)throw new TypeError("Invalid strategy: "+n);if(this._level!==e||this._strategy!==n){var a=this;this.flush(gc.Z_SYNC_FLUSH,(function(){a._binding.params(e,n),a._hadError||(a._level=e,a._strategy=n,t&&t())}))}else H.nextTick(t)},Rc.prototype.reset=function(){return this._binding.reset()},Rc.prototype._flush=function(e){this._transform(new me(0),"",e)},Rc.prototype.flush=function(e,n){var t=this._writableState;if(("function"==typeof e||void 0===e&&!n)&&(n=e,e=gc.Z_FULL_FLUSH),t.ended)n&&H.nextTick(n);else if(t.ending)n&&this.once("end",n);else if(t.needDrain){var a=this;this.once("drain",(function(){a.flush(n)}))}else this._flushFlag=e,this.write(new me(0),"",n)},Rc.prototype.close=function(e){if(e&&H.nextTick(e),!this._closed){this._closed=!0,this._binding.close();var n=this;H.nextTick((function(){n.emit("close")}))}},Rc.prototype._transform=function(e,n,t){var a,i=this._writableState,o=(i.ending||i.ended)&&(!e||i.length===e.length);if(null===!e&&!me.isBuffer(e))return t(new Error("invalid input"));o?a=gc.Z_FINISH:(a=this._flushFlag,e.length>=i.length&&(this._flushFlag=this._opts.flush||gc.Z_NO_FLUSH)),this._processChunk(e,a,t)},Rc.prototype._processChunk=function(e,n,t){var a=e&&e.length,i=this._chunkSize-this._offset,o=0,s=this,r="function"==typeof t;if(!r){var c,p=[],l=0;this.on("error",(function(e){c=e}));do{var u=this._binding.writeSync(n,e,o,a,this._buffer,this._offset,i)}while(!this._hadError&&m(u[0],u[1]));if(this._hadError)throw c;var d=me.concat(p,l);return this.close(),d}var h=this._binding.write(n,e,o,a,this._buffer,this._offset,i);function m(c,u){if(!s._hadError){var d=i-u;if(function(e,n){if(!e)throw new Error("have should not go down")}(d>=0),d>0){var h=s._buffer.slice(s._offset,s._offset+d);s._offset+=d,r?s.push(h):(p.push(h),l+=h.length)}if((0===u||s._offset>=s._chunkSize)&&(i=s._chunkSize,s._offset=0,s._buffer=new me(s._chunkSize)),0===u){if(o+=a-c,a=c,!r)return!0;var f=s._binding.write(n,e,o,a,s._buffer,s._offset,s._chunkSize);return f.callback=m,void(f.buffer=e)}if(!r)return!1;t()}}h.buffer=e,h.callback=m},hn(wc,Rc),hn(_c,Rc),hn(yc,Rc),hn(kc,Rc),hn(Ec,Rc),hn(jc,Rc),hn(Ac,Rc);var zc=function(e){return new Ac(e)},Cc="axios",Sc="0.20.0",Oc="Promise based HTTP client for the browser and node.js",Tc="index.js",Lc={test:"grunt test && bundlesize",start:"node ./sandbox/server.js",build:"NODE_ENV=production grunt build",preversion:"npm test",version:"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",postversion:"git push && git push --tags",examples:"node ./examples/server.js",coveralls:"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",fix:"eslint --fix lib/**/*.js"},qc={type:"git",url:"https://github.com/axios/axios.git"},Bc=["xhr","http","ajax","promise","node"],Uc="Matt Zabriskie",Mc={url:"https://github.com/axios/axios/issues"},Pc="https://github.com/axios/axios",Fc={bundlesize:"^0.17.0",coveralls:"^3.0.0","es6-promise":"^4.2.4",grunt:"^1.0.2","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^20.1.0","grunt-karma":"^2.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^1.0.18","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1",karma:"^1.3.0","karma-chrome-launcher":"^2.2.0","karma-coverage":"^1.1.1","karma-firefox-launcher":"^1.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-opera-launcher":"^1.0.0","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^1.2.0","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.7","karma-webpack":"^1.7.0","load-grunt-tasks":"^3.5.2",minimist:"^1.2.0",mocha:"^5.2.0",sinon:"^4.5.0",typescript:"^2.8.1","url-search-params":"^0.10.0",webpack:"^1.13.1","webpack-dev-server":"^1.14.1"},Nc={"./lib/adapters/http.js":"./lib/adapters/xhr.js"},Ic="dist/axios.min.js",$c="dist/axios.min.js",Dc="./index.d.ts",Zc={"follow-redirects":"^1.10.0"},Hc=[{path:"./dist/axios.min.js",threshold:"5kB"}],Yc={name:Cc,version:Sc,description:Oc,main:Tc,scripts:Lc,repository:qc,keywords:Bc,author:Uc,license:"MIT",bugs:Mc,homepage:Pc,devDependencies:Fc,browser:Nc,jsdelivr:Ic,unpkg:$c,typings:Dc,dependencies:Zc,bundlesize:Hc},Vc=a(Object.freeze({__proto__:null,name:Cc,version:Sc,description:Oc,main:Tc,scripts:Lc,repository:qc,keywords:Bc,author:Uc,license:"MIT",bugs:Mc,homepage:Pc,devDependencies:Fc,browser:Nc,jsdelivr:Ic,unpkg:$c,typings:Dc,dependencies:Zc,bundlesize:Hc,default:Yc})),Wc=Zi.http,Kc=Zi.https,Gc=/https:?/,Jc={"Content-Type":"application/x-www-form-urlencoded"};function Xc(e,n){!h.isUndefined(e)&&h.isUndefined(e["Content-Type"])&&(e["Content-Type"]=n)}var Qc,ep={adapter:("undefined"!=typeof XMLHttpRequest?Qc=function(e){return new Promise((function(n,t){var a=e.data,i=e.headers;h.isFormData(a)&&delete i["Content-Type"],(h.isBlob(a)||h.isFile(a))&&a.type&&delete i["Content-Type"];var o=new XMLHttpRequest;if(e.auth){var s=e.auth.username||"",r=unescape(encodeURIComponent(e.auth.password))||"";i.Authorization="Basic "+btoa(s+":"+r)}var c=J(e.baseURL,e.url);if(o.open(e.method.toUpperCase(),f(c,e.params,e.paramsSerializer),!0),o.timeout=e.timeout,o.onreadystatechange=function(){if(o&&4===o.readyState&&(0!==o.status||o.responseURL&&0===o.responseURL.indexOf("file:"))){var a,i,s,r,c,p="getAllResponseHeaders"in o?(a=o.getAllResponseHeaders(),c={},a?(h.forEach(a.split("\n"),(function(e){if(r=e.indexOf(":"),i=h.trim(e.substr(0,r)).toLowerCase(),s=h.trim(e.substr(r+1)),i){if(c[i]&&X.indexOf(i)>=0)return;c[i]="set-cookie"===i?(c[i]?c[i]:[]).concat([s]):c[i]?c[i]+", "+s:s}})),c):c):null,l={data:e.responseType&&"text"!==e.responseType?o.response:o.responseText,status:o.status,statusText:o.statusText,headers:p,config:e,request:o};K(n,t,l),o=null}},o.onabort=function(){o&&(t(W("Request aborted",e,"ECONNABORTED",o)),o=null)},o.onerror=function(){t(W("Network Error",e,null,o)),o=null},o.ontimeout=function(){var n="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(n=e.timeoutErrorMessage),t(W(n,e,"ECONNABORTED",o)),o=null},h.isStandardBrowserEnv()){var p=(e.withCredentials||Q(c))&&e.xsrfCookieName?G.read(e.xsrfCookieName):void 0;p&&(i[e.xsrfHeaderName]=p)}if("setRequestHeader"in o&&h.forEach(i,(function(e,n){void 0===a&&"content-type"===n.toLowerCase()?delete i[n]:o.setRequestHeader(n,e)})),h.isUndefined(e.withCredentials)||(o.withCredentials=!!e.withCredentials),e.responseType)try{o.responseType=e.responseType}catch(n){if("json"!==e.responseType)throw n}"function"==typeof e.onDownloadProgress&&o.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&o.upload&&o.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){o&&(o.abort(),t(e),o=null)})),a||(a=null),o.send(a)}))}:void 0!==H&&"[object process]"===Object.prototype.toString.call(H)&&(Qc=function(e){return new Promise((function(n,t){var a=function(e){n(e)},i=function(e){t(e)},o=e.data,s=e.headers;if(s["User-Agent"]||s["user-agent"]||(s["User-Agent"]="axios/"+Vc.version),o&&!h.isStream(o)){if(me.isBuffer(o));else if(h.isArrayBuffer(o))o=me.from(new Uint8Array(o));else{if(!h.isString(o))return i(W("Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream",e));o=me.from(o,"utf-8")}s["Content-Length"]=o.length}var r=void 0;e.auth&&(r=(e.auth.username||"")+":"+(e.auth.password||""));var c=J(e.baseURL,e.url),p=va.parse(c),l=p.protocol||"http:";if(!r&&p.auth){var u=p.auth.split(":");r=(u[0]||"")+":"+(u[1]||"")}r&&delete s.Authorization;var d=Gc.test(l),m=d?e.httpsAgent:e.httpAgent,v={path:f(p.path,e.params,e.paramsSerializer).replace(/^\?/,""),method:e.method.toUpperCase(),headers:s,agent:m,agents:{http:e.httpAgent,https:e.httpsAgent},auth:r};e.socketPath?v.socketPath=e.socketPath:(v.hostname=p.hostname,v.port=p.port);var x,g=e.proxy;if(!g&&!1!==g){var b=l.slice(0,-1)+"_proxy",w=H.env[b]||H.env[b.toUpperCase()];if(w){var _=va.parse(w),y=H.env.no_proxy||H.env.NO_PROXY,k=!0;if(y){var E=y.split(",").map((function(e){return e.trim()}));k=!E.some((function(e){return!!e&&("*"===e||"."===e[0]&&p.hostname.substr(p.hostname.length-e.length)===e||p.hostname===e)}))}if(k&&(g={host:_.hostname,port:_.port},_.auth)){var j=_.auth.split(":");g.auth={username:j[0],password:j[1]}}}}if(g&&(v.hostname=g.host,v.host=g.host,v.headers.host=p.hostname+(p.port?":"+p.port:""),v.port=g.port,v.path=l+"//"+p.hostname+(p.port?":"+p.port:"")+v.path,g.auth)){var A=me.from(g.auth.username+":"+g.auth.password,"utf8").toString("base64");v.headers["Proxy-Authorization"]="Basic "+A}var R=d&&(!g||Gc.test(g.protocol));e.transport?x=e.transport:0===e.maxRedirects?x=Ma:(e.maxRedirects&&(v.maxRedirects=e.maxRedirects),x=R?Kc:Wc),e.maxBodyLength>-1&&(v.maxBodyLength=e.maxBodyLength);var z=x.request(v,(function(n){if(!z.aborted){var t=n,o=n.req||z;if(204!==n.statusCode&&"HEAD"!==o.method&&!1!==e.decompress)switch(n.headers["content-encoding"]){case"gzip":case"compress":case"deflate":t=t.pipe(zc()),delete n.headers["content-encoding"]}var s={status:n.statusCode,statusText:n.statusMessage,headers:n.headers,config:e,request:o};if("stream"===e.responseType)s.data=t,K(a,i,s);else{var r=[];t.on("data",(function(n){r.push(n),e.maxContentLength>-1&&me.concat(r).length>e.maxContentLength&&(t.destroy(),i(W("maxContentLength size of "+e.maxContentLength+" exceeded",e,null,o)))})),t.on("error",(function(n){z.aborted||i(V(n,e,null,o))})),t.on("end",(function(){var n=me.concat(r);"arraybuffer"!==e.responseType&&(n=n.toString(e.responseEncoding),e.responseEncoding&&"utf8"!==e.responseEncoding||(n=h.stripBOM(n))),s.data=n,K(a,i,s)}))}}}));z.on("error",(function(n){z.aborted&&"ERR_FR_TOO_MANY_REDIRECTS"!==n.code||i(V(n,e,null,z))})),e.timeout&&z.setTimeout(e.timeout,(function(){z.abort(),i(W("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",z))})),e.cancelToken&&e.cancelToken.promise.then((function(e){z.aborted||(z.abort(),i(e))})),h.isStream(o)?o.on("error",(function(n){i(V(n,e,null,z))})).pipe(z):z.end(o)}))}),Qc),transformRequest:[function(e,n){return Y(n,"Accept"),Y(n,"Content-Type"),h.isFormData(e)||h.isArrayBuffer(e)||h.isBuffer(e)||h.isStream(e)||h.isFile(e)||h.isBlob(e)?e:h.isArrayBufferView(e)?e.buffer:h.isURLSearchParams(e)?(Xc(n,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):h.isObject(e)?(Xc(n,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};h.forEach(["delete","get","head"],(function(e){ep.headers[e]={}})),h.forEach(["post","put","patch"],(function(e){ep.headers[e]=h.merge(Jc)}));var np=ep;function tp(e){e.cancelToken&&e.cancelToken.throwIfRequested()}var ap=function(e){return tp(e),e.headers=e.headers||{},e.data=g(e.data,e.headers,e.transformRequest),e.headers=h.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),h.forEach(["delete","get","head","post","put","patch","common"],(function(n){delete e.headers[n]})),(e.adapter||np.adapter)(e).then((function(n){return tp(e),n.data=g(n.data,n.headers,e.transformResponse),n}),(function(n){return b(n)||(tp(e),n&&n.response&&(n.response.data=g(n.response.data,n.response.headers,e.transformResponse))),Promise.reject(n)}))},ip=function(e,n){n=n||{};var t={},a=["url","method","data"],i=["headers","auth","proxy","params"],o=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],s=["validateStatus"];function r(e,n){return h.isPlainObject(e)&&h.isPlainObject(n)?h.merge(e,n):h.isPlainObject(n)?h.merge({},n):h.isArray(n)?n.slice():n}function c(a){h.isUndefined(n[a])?h.isUndefined(e[a])||(t[a]=r(void 0,e[a])):t[a]=r(e[a],n[a])}h.forEach(a,(function(e){h.isUndefined(n[e])||(t[e]=r(void 0,n[e]))})),h.forEach(i,c),h.forEach(o,(function(a){h.isUndefined(n[a])?h.isUndefined(e[a])||(t[a]=r(void 0,e[a])):t[a]=r(void 0,n[a])})),h.forEach(s,(function(a){a in n?t[a]=r(e[a],n[a]):a in e&&(t[a]=r(void 0,e[a]))}));var p=a.concat(i).concat(o).concat(s),l=Object.keys(e).concat(Object.keys(n)).filter((function(e){return-1===p.indexOf(e)}));return h.forEach(l,c),t};function op(e){this.defaults=e,this.interceptors={request:new x,response:new x}}op.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=ip(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var n=[ap,void 0],t=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){n.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){n.push(e.fulfilled,e.rejected)}));n.length;)t=t.then(n.shift(),n.shift());return t},op.prototype.getUri=function(e){return e=ip(this.defaults,e),f(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},h.forEach(["delete","get","head","options"],(function(e){op.prototype[e]=function(n,t){return this.request(ip(t||{},{method:e,url:n}))}})),h.forEach(["post","put","patch"],(function(e){op.prototype[e]=function(n,t,a){return this.request(ip(a||{},{method:e,url:n,data:t}))}}));var sp=op;function rp(e){this.message=e}rp.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},rp.prototype.__CANCEL__=!0;var cp=rp;function pp(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var n;this.promise=new Promise((function(e){n=e}));var t=this;e((function(e){t.reason||(t.reason=new cp(e),n(t.reason))}))}pp.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},pp.source=function(){var e;return{token:new pp((function(n){e=n})),cancel:e}};var lp=pp;function up(e){var n=new sp(e),t=o(sp.prototype.request,n);return h.extend(t,sp.prototype,n),h.extend(t,n),t}var dp=up(np);dp.Axios=sp,dp.create=function(e){return up(ip(dp.defaults,e))},dp.Cancel=cp,dp.CancelToken=lp,dp.isCancel=b,dp.all=function(e){return Promise.all(e)},dp.spread=function(e){return function(n){return e.apply(null,n)}};var hp=dp,mp=dp;hp.default=mp;var fp=hp,vp=t((function(n,t){var a=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Request=void 0;const i=a(fp);t.Request=class{constructor(e=i.default.create()){this.request=e}get(e,n={}){return this.request.get(e,n)}post(e,n,t={}){return this.request.post(e,n,t)}put(e,n,t={}){return this.request.put(e,n,t)}patch(e,n,t={}){return this.request.patch(e,n,t)}delete(e,n={}){return this.request.delete(e,n)}static isRequestError(e){return!(!e.response||!e.response.status)}}}));n(vp),vp.Request;var xp=t((function(n,t){var a=e&&e.__createBinding||(Object.create?function(e,n,t,a){void 0===a&&(a=t);var i=Object.getOwnPropertyDescriptor(n,t);i&&!("get"in i?!n.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,a,i)}:function(e,n,t,a){void 0===a&&(a=t),e[a]=n[t]}),i=e&&e.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=e&&e.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&a(n,e,t);return i(n,e),n};Object.defineProperty(t,"__esModule",{value:!0});const s=o(vp);t.default=class{constructor(e="",n=""){this.token=e,this.url=n,this.request=new s.Request}}}));n(xp);var gp=t((function(e,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default={App:{baseUrl:"http://localhost:3333/api"},Meeting:{domain:"conf.v4h.cloud",externalApi:"https://conf.v4h.cloud/external_api.js"}}}));n(gp);var bp=t((function(n,t){var a=e&&e.__awaiter||function(e,n,t,a){return new(t||(t=Promise))((function(i,o){function s(e){try{c(a.next(e))}catch(e){o(e)}}function r(e){try{c(a.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,r)}c((a=a.apply(e,n||[])).next())}))},i=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(gp);t.default=e=>new Promise((n=>a(void 0,void 0,void 0,(function*(){if(window.JitsiMeetExternalAPI)n(window.JitsiMeetExternalAPI);else{const t=document.getElementsByTagName("head")[0],a=document.createElement("script");a.setAttribute("type","text/javascript"),a.setAttribute("src",e?`https://${e}/external_api.js`:o.default.Meeting.externalApi),t.addEventListener("load",(e=>{"SCRIPT"===e.target.nodeName&&n(window.JitsiMeetExternalAPI)}),!0),t.appendChild(a)}}))))}));n(bp);var wp=t((function(n,t){var a=e&&e.__awaiter||function(e,n,t,a){return new(t||(t=Promise))((function(i,o){function s(e){try{c(a.next(e))}catch(e){o(e)}}function r(e){try{c(a.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,r)}c((a=a.apply(e,n||[])).next())}))},i=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(bp),s=i(gp);t.default=class{startConference(e){return a(this,void 0,void 0,(function*(){const n={parentNode:e.parentNode,jwt:e.jwt,roomName:e.roomName,width:e.width||640,height:e.height||480,onClose:e.onClose,onLoad:e.onLoad,userInfo:Object.assign({},e.userInfo),configOverwrite:{startWithAudioMuted:e.startWithAudioMuted,startWithVideoMuted:e.startWithVideoMuted,autoKnockLobby:!0,prejoinConfig:{enabled:!1,hideDisplayName:!0,hideExtraJoinButtons:["no-audio","by-phone"]}},interfaceConfigOverwrite:{TOOLBAR_BUTTONS:e.buttons}};console.log(n),this.options=n,(0,o.default)().then((t=>{console.log("Jitsi External API: ",t),this.JitsiExternalApi=new t(e.domain?e.domain:s.default.Meeting.domain,n),this.JitsiExternalApi.addEventListener("videoConferenceJoined",(()=>{e.userInfo&&e.userInfo.displayName&&this.JitsiExternalApi.executeCommand("displayName",e.userInfo.displayName),e.userInfo&&e.userInfo.avatarUrl&&this.JitsiExternalApi.executeCommand("avatarUrl",e.userInfo.avatarUrl),e.shareLink&&this.JitsiExternalApi.executeCommand("link",e.shareLink),e.restricted&&this.JitsiExternalApi.executeCommand("toggleLobby",e.restricted)})),this.JitsiExternalApi.addEventListener("readyToClose",(()=>{this.JitsiExternalApi.dispose(),n.onClose&&n.onClose()})),this.JitsiExternalApi.addEventListener("participantLeft",(()=>{e.onParticipantLeft&&e.onParticipantLeft()})),this.JitsiExternalApi.addEventListener("errorOccurred",(n=>{"conference.connectionError.accessDenied"!==n.error.name&&"conference.destroyed"!==n.error.name||(this.JitsiExternalApi.dispose(),e.onModeratorReject&&e.onModeratorReject())}))}))}))}closeConference(){console.log("CLOSE CONFERENCE"),console.log(this.options.parentNode),this.options.parentNode.innerHTML="",this.options.onClose&&this.options.onClose()}getNumberOfPart(){return this.JitsiExternalApi.getNumberOfParticipants()}}}));n(wp);var _p=t((function(n,t){var a=e&&e.__awaiter||function(e,n,t,a){return new(t||(t=Promise))((function(i,o){function s(e){try{c(a.next(e))}catch(e){o(e)}}function r(e){try{c(a.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,r)}c((a=a.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(i),r=o(xp),c=o(wp);class p extends r.default{constructor(e,n,t){super(e,n),this.url=`${this.url}/sessions`,this.sessionCurrent=null,this.domain=t}create(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}get(e){return a(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}list(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/list`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}update(e,n){return a(this,void 0,void 0,(function*(){yield this.request.patch(`${this.url}/${e}`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e){return a(this,void 0,void 0,(function*(){yield this.request.delete(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}join(e,n){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/${e}/join`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}startConference(e,n){return a(this,void 0,void 0,(function*(){const t=yield this.join(e,{firstName:n.userInfo?n.userInfo.displayName:void 0,moderator:n.moderator,avatarUrl:n.userInfo?n.userInfo.avatarUrl:void 0});this.conference=this.conference?this.conference:new c.default,this.sessionCurrent=e,yield this.conference.startConference(Object.assign({jwt:t.sessionToken,roomName:t.short,domain:this.domain},n))}))}stopConference(){return a(this,void 0,void 0,(function*(){this.sessionCurrent&&this.conference.closeConference()}))}getNumberOfParticipants(){return this.conference.getNumberOfPart()}}t.default=p}));n(_p);var yp=t((function(n,t){var a=e&&e.__awaiter||function(e,n,t,a){return new(t||(t=Promise))((function(i,o){function s(e){try{c(a.next(e))}catch(e){o(e)}}function r(e){try{c(a.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,r)}c((a=a.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(i),r=o(xp);class c extends r.default{constructor(e,n){super(e,n),this.url=`${this.url}/rooms`}create(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}get(e){return a(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new s.default(e.response.data,e.response.status)}))}))}list(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/list`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}update(e,n){return a(this,void 0,void 0,(function*(){yield this.request.patch(`${this.url}/${e}`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e){return a(this,void 0,void 0,(function*(){yield this.request.delete(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}open(e,n){return a(this,void 0,void 0,(function*(){yield this.request.post(`${this.url}/${e}/open`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}join(e,n){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/${e}/join`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}close(e){return a(this,void 0,void 0,(function*(){yield this.request.post(`${this.url}/${e}/close`,null,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}}t.default=c}));n(yp);var kp=t((function(n,t){var a=e&&e.__awaiter||function(e,n,t,a){return new(t||(t=Promise))((function(i,o){function s(e){try{c(a.next(e))}catch(e){o(e)}}function r(e){try{c(a.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,r)}c((a=a.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(i),r=o(xp);class c extends r.default{constructor(e,n){super(e,n),this.url=`${this.url}/orgs`}create(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}get(e){return a(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}list(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/list`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}update(e,n){return a(this,void 0,void 0,(function*(){yield this.request.patch(`${this.url}/${e}`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e){return a(this,void 0,void 0,(function*(){yield this.request.delete(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}}t.default=c}));n(kp);var Ep=t((function(n,t){var a=e&&e.__awaiter||function(e,n,t,a){return new(t||(t=Promise))((function(i,o){function s(e){try{c(a.next(e))}catch(e){o(e)}}function r(e){try{c(a.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,r)}c((a=a.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(i),r=o(xp);class c extends r.default{constructor(e,n){super(e,n)}create(e,n){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/orgs/${e}/units`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}get(e,n){return a(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/orgs/${e}/units/${n}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}list(e,n){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/orgs/${e}/units/list`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}update(e,n,t){return a(this,void 0,void 0,(function*(){return this.request.patch(`${this.url}/orgs/${e}/units/${n}`,t,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e,n){return a(this,void 0,void 0,(function*(){return this.request.delete(`${this.url}/orgs/${e}/units/${n}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}}t.default=c}));n(Ep);var jp=It.Stream,Ap=Rp;function Rp(){this.source=null,this.dataSize=0,this.maxDataSize=1048576,this.pauseStream=!0,this._maxDataSizeExceeded=!1,this._released=!1,this._bufferedEvents=[]}Zn.inherits(Rp,jp),Rp.create=function(e,n){var t=new this;for(var a in n=n||{})t[a]=n[a];t.source=e;var i=e.emit;return e.emit=function(){return t._handleEmit(arguments),i.apply(e,arguments)},e.on("error",(function(){})),t.pauseStream&&e.pause(),t},Object.defineProperty(Rp.prototype,"readable",{configurable:!0,enumerable:!0,get:function(){return this.source.readable}}),Rp.prototype.setEncoding=function(){return this.source.setEncoding.apply(this.source,arguments)},Rp.prototype.resume=function(){this._released||this.release(),this.source.resume()},Rp.prototype.pause=function(){this.source.pause()},Rp.prototype.release=function(){this._released=!0,this._bufferedEvents.forEach(function(e){this.emit.apply(this,e)}.bind(this)),this._bufferedEvents=[]},Rp.prototype.pipe=function(){var e=jp.prototype.pipe.apply(this,arguments);return this.resume(),e},Rp.prototype._handleEmit=function(e){this._released?this.emit.apply(this,e):("data"===e[0]&&(this.dataSize+=e[1].length,this._checkIfMaxDataSizeExceeded()),this._bufferedEvents.push(e))},Rp.prototype._checkIfMaxDataSizeExceeded=function(){if(!(this._maxDataSizeExceeded||this.dataSize<=this.maxDataSize)){this._maxDataSizeExceeded=!0;var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this.emit("error",new Error(e))}};var zp=It.Stream,Cp=Sp;function Sp(){this.writable=!1,this.readable=!0,this.dataSize=0,this.maxDataSize=2097152,this.pauseStreams=!0,this._released=!1,this._streams=[],this._currentStream=null,this._insideLoop=!1,this._pendingNext=!1}function Op(e,n){for(var t=0,a=e.length-1;a>=0;a--){var i=e[a];"."===i?e.splice(a,1):".."===i?(e.splice(a,1),t++):t&&(e.splice(a,1),t--)}if(n)for(;t--;t)e.unshift("..");return e}Zn.inherits(Sp,zp),Sp.create=function(e){var n=new this;for(var t in e=e||{})n[t]=e[t];return n},Sp.isStreamLike=function(e){return"function"!=typeof e&&"string"!=typeof e&&"boolean"!=typeof e&&"number"!=typeof e&&!me.isBuffer(e)},Sp.prototype.append=function(e){if(Sp.isStreamLike(e)){if(!(e instanceof Ap)){var n=Ap.create(e,{maxDataSize:1/0,pauseStream:this.pauseStreams});e.on("data",this._checkDataSize.bind(this)),e=n}this._handleErrors(e),this.pauseStreams&&e.pause()}return this._streams.push(e),this},Sp.prototype.pipe=function(e,n){return zp.prototype.pipe.call(this,e,n),this.resume(),e},Sp.prototype._getNext=function(){if(this._currentStream=null,this._insideLoop)this._pendingNext=!0;else{this._insideLoop=!0;try{do{this._pendingNext=!1,this._realGetNext()}while(this._pendingNext)}finally{this._insideLoop=!1}}},Sp.prototype._realGetNext=function(){var e=this._streams.shift();void 0!==e?"function"==typeof e?e(function(e){Sp.isStreamLike(e)&&(e.on("data",this._checkDataSize.bind(this)),this._handleErrors(e)),this._pipeNext(e)}.bind(this)):this._pipeNext(e):this.end()},Sp.prototype._pipeNext=function(e){if(this._currentStream=e,Sp.isStreamLike(e))return e.on("end",this._getNext.bind(this)),void e.pipe(this,{end:!1});var n=e;this.write(n),this._getNext()},Sp.prototype._handleErrors=function(e){var n=this;e.on("error",(function(e){n._emitError(e)}))},Sp.prototype.write=function(e){this.emit("data",e)},Sp.prototype.pause=function(){this.pauseStreams&&(this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.pause&&this._currentStream.pause(),this.emit("pause"))},Sp.prototype.resume=function(){this._released||(this._released=!0,this.writable=!0,this._getNext()),this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.resume&&this._currentStream.resume(),this.emit("resume")},Sp.prototype.end=function(){this._reset(),this.emit("end")},Sp.prototype.destroy=function(){this._reset(),this.emit("close")},Sp.prototype._reset=function(){this.writable=!1,this._streams=[],this._currentStream=null},Sp.prototype._checkDataSize=function(){if(this._updateDataSize(),!(this.dataSize<=this.maxDataSize)){var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this._emitError(new Error(e))}},Sp.prototype._updateDataSize=function(){this.dataSize=0;var e=this;this._streams.forEach((function(n){n.dataSize&&(e.dataSize+=n.dataSize)})),this._currentStream&&this._currentStream.dataSize&&(this.dataSize+=this._currentStream.dataSize)},Sp.prototype._emitError=function(e){this._reset(),this.emit("error",e)};var Tp=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,Lp=function(e){return Tp.exec(e).slice(1)};function qp(){for(var e="",n=!1,t=arguments.length-1;t>=-1&&!n;t--){var a=t>=0?arguments[t]:"/";if("string"!=typeof a)throw new TypeError("Arguments to path.resolve must be strings");a&&(e=a+"/"+e,n="/"===a.charAt(0))}return(n?"/":"")+(e=Op(Pp(e.split("/"),(function(e){return!!e})),!n).join("/"))||"."}function Bp(e){var n=Up(e),t="/"===Fp(e,-1);return(e=Op(Pp(e.split("/"),(function(e){return!!e})),!n).join("/"))||n||(e="."),e&&t&&(e+="/"),(n?"/":"")+e}function Up(e){return"/"===e.charAt(0)}var Mp={extname:function(e){return Lp(e)[3]},basename:function(e,n){var t=Lp(e)[2];return n&&t.substr(-1*n.length)===n&&(t=t.substr(0,t.length-n.length)),t},dirname:function(e){var n=Lp(e),t=n[0],a=n[1];return t||a?(a&&(a=a.substr(0,a.length-1)),t+a):"."},sep:"/",delimiter:":",relative:function(e,n){function t(e){for(var n=0;n<e.length&&""===e[n];n++);for(var t=e.length-1;t>=0&&""===e[t];t--);return n>t?[]:e.slice(n,t-n+1)}e=qp(e).substr(1),n=qp(n).substr(1);for(var a=t(e.split("/")),i=t(n.split("/")),o=Math.min(a.length,i.length),s=o,r=0;r<o;r++)if(a[r]!==i[r]){s=r;break}var c=[];for(r=s;r<a.length;r++)c.push("..");return(c=c.concat(i.slice(s))).join("/")},join:function(){return Bp(Pp(Array.prototype.slice.call(arguments,0),(function(e,n){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e})).join("/"))},isAbsolute:Up,normalize:Bp,resolve:qp};function Pp(e,n){if(e.filter)return e.filter(n);for(var t=[],a=0;a<e.length;a++)n(e[a],a,e)&&t.push(e[a]);return t}var Fp="b"==="ab".substr(-1)?function(e,n,t){return e.substr(n,t)}:function(e,n,t){return n<0&&(n=e.length+n),e.substr(n,t)},Np={},Ip=a(Object.freeze({__proto__:null,default:{"application/1d-interleaved-parityfec":{source:"iana"},"application/3gpdash-qoe-report+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/3gpp-ims+xml":{source:"iana",compressible:!0},"application/3gpphal+json":{source:"iana",compressible:!0},"application/3gpphalforms+json":{source:"iana",compressible:!0},"application/a2l":{source:"iana"},"application/ace+cbor":{source:"iana"},"application/activemessage":{source:"iana"},"application/activity+json":{source:"iana",compressible:!0},"application/alto-costmap+json":{source:"iana",compressible:!0},"application/alto-costmapfilter+json":{source:"iana",compressible:!0},"application/alto-directory+json":{source:"iana",compressible:!0},"application/alto-endpointcost+json":{source:"iana",compressible:!0},"application/alto-endpointcostparams+json":{source:"iana",compressible:!0},"application/alto-endpointprop+json":{source:"iana",compressible:!0},"application/alto-endpointpropparams+json":{source:"iana",compressible:!0},"application/alto-error+json":{source:"iana",compressible:!0},"application/alto-networkmap+json":{source:"iana",compressible:!0},"application/alto-networkmapfilter+json":{source:"iana",compressible:!0},"application/alto-updatestreamcontrol+json":{source:"iana",compressible:!0},"application/alto-updatestreamparams+json":{source:"iana",compressible:!0},"application/aml":{source:"iana"},"application/andrew-inset":{source:"iana",extensions:["ez"]},"application/applefile":{source:"iana"},"application/applixware":{source:"apache",extensions:["aw"]},"application/at+jwt":{source:"iana"},"application/atf":{source:"iana"},"application/atfx":{source:"iana"},"application/atom+xml":{source:"iana",compressible:!0,extensions:["atom"]},"application/atomcat+xml":{source:"iana",compressible:!0,extensions:["atomcat"]},"application/atomdeleted+xml":{source:"iana",compressible:!0,extensions:["atomdeleted"]},"application/atomicmail":{source:"iana"},"application/atomsvc+xml":{source:"iana",compressible:!0,extensions:["atomsvc"]},"application/atsc-dwd+xml":{source:"iana",compressible:!0,extensions:["dwd"]},"application/atsc-dynamic-event-message":{source:"iana"},"application/atsc-held+xml":{source:"iana",compressible:!0,extensions:["held"]},"application/atsc-rdt+json":{source:"iana",compressible:!0},"application/atsc-rsat+xml":{source:"iana",compressible:!0,extensions:["rsat"]},"application/atxml":{source:"iana"},"application/auth-policy+xml":{source:"iana",compressible:!0},"application/bacnet-xdd+zip":{source:"iana",compressible:!1},"application/batch-smtp":{source:"iana"},"application/bdoc":{compressible:!1,extensions:["bdoc"]},"application/beep+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/calendar+json":{source:"iana",compressible:!0},"application/calendar+xml":{source:"iana",compressible:!0,extensions:["xcs"]},"application/call-completion":{source:"iana"},"application/cals-1840":{source:"iana"},"application/captive+json":{source:"iana",compressible:!0},"application/cbor":{source:"iana"},"application/cbor-seq":{source:"iana"},"application/cccex":{source:"iana"},"application/ccmp+xml":{source:"iana",compressible:!0},"application/ccxml+xml":{source:"iana",compressible:!0,extensions:["ccxml"]},"application/cdfx+xml":{source:"iana",compressible:!0,extensions:["cdfx"]},"application/cdmi-capability":{source:"iana",extensions:["cdmia"]},"application/cdmi-container":{source:"iana",extensions:["cdmic"]},"application/cdmi-domain":{source:"iana",extensions:["cdmid"]},"application/cdmi-object":{source:"iana",extensions:["cdmio"]},"application/cdmi-queue":{source:"iana",extensions:["cdmiq"]},"application/cdni":{source:"iana"},"application/cea":{source:"iana"},"application/cea-2018+xml":{source:"iana",compressible:!0},"application/cellml+xml":{source:"iana",compressible:!0},"application/cfw":{source:"iana"},"application/city+json":{source:"iana",compressible:!0},"application/clr":{source:"iana"},"application/clue+xml":{source:"iana",compressible:!0},"application/clue_info+xml":{source:"iana",compressible:!0},"application/cms":{source:"iana"},"application/cnrp+xml":{source:"iana",compressible:!0},"application/coap-group+json":{source:"iana",compressible:!0},"application/coap-payload":{source:"iana"},"application/commonground":{source:"iana"},"application/conference-info+xml":{source:"iana",compressible:!0},"application/cose":{source:"iana"},"application/cose-key":{source:"iana"},"application/cose-key-set":{source:"iana"},"application/cpl+xml":{source:"iana",compressible:!0,extensions:["cpl"]},"application/csrattrs":{source:"iana"},"application/csta+xml":{source:"iana",compressible:!0},"application/cstadata+xml":{source:"iana",compressible:!0},"application/csvm+json":{source:"iana",compressible:!0},"application/cu-seeme":{source:"apache",extensions:["cu"]},"application/cwt":{source:"iana"},"application/cybercash":{source:"iana"},"application/dart":{compressible:!0},"application/dash+xml":{source:"iana",compressible:!0,extensions:["mpd"]},"application/dash-patch+xml":{source:"iana",compressible:!0,extensions:["mpp"]},"application/dashdelta":{source:"iana"},"application/davmount+xml":{source:"iana",compressible:!0,extensions:["davmount"]},"application/dca-rft":{source:"iana"},"application/dcd":{source:"iana"},"application/dec-dx":{source:"iana"},"application/dialog-info+xml":{source:"iana",compressible:!0},"application/dicom":{source:"iana"},"application/dicom+json":{source:"iana",compressible:!0},"application/dicom+xml":{source:"iana",compressible:!0},"application/dii":{source:"iana"},"application/dit":{source:"iana"},"application/dns":{source:"iana"},"application/dns+json":{source:"iana",compressible:!0},"application/dns-message":{source:"iana"},"application/docbook+xml":{source:"apache",compressible:!0,extensions:["dbk"]},"application/dots+cbor":{source:"iana"},"application/dskpp+xml":{source:"iana",compressible:!0},"application/dssc+der":{source:"iana",extensions:["dssc"]},"application/dssc+xml":{source:"iana",compressible:!0,extensions:["xdssc"]},"application/dvcs":{source:"iana"},"application/ecmascript":{source:"iana",compressible:!0,extensions:["es","ecma"]},"application/edi-consent":{source:"iana"},"application/edi-x12":{source:"iana",compressible:!1},"application/edifact":{source:"iana",compressible:!1},"application/efi":{source:"iana"},"application/elm+json":{source:"iana",charset:"UTF-8",compressible:!0},"application/elm+xml":{source:"iana",compressible:!0},"application/emergencycalldata.cap+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/emergencycalldata.comment+xml":{source:"iana",compressible:!0},"application/emergencycalldata.control+xml":{source:"iana",compressible:!0},"application/emergencycalldata.deviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.ecall.msd":{source:"iana"},"application/emergencycalldata.providerinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.serviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.subscriberinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.veds+xml":{source:"iana",compressible:!0},"application/emma+xml":{source:"iana",compressible:!0,extensions:["emma"]},"application/emotionml+xml":{source:"iana",compressible:!0,extensions:["emotionml"]},"application/encaprtp":{source:"iana"},"application/epp+xml":{source:"iana",compressible:!0},"application/epub+zip":{source:"iana",compressible:!1,extensions:["epub"]},"application/eshop":{source:"iana"},"application/exi":{source:"iana",extensions:["exi"]},"application/expect-ct-report+json":{source:"iana",compressible:!0},"application/express":{source:"iana",extensions:["exp"]},"application/fastinfoset":{source:"iana"},"application/fastsoap":{source:"iana"},"application/fdt+xml":{source:"iana",compressible:!0,extensions:["fdt"]},"application/fhir+json":{source:"iana",charset:"UTF-8",compressible:!0},"application/fhir+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/fido.trusted-apps+json":{compressible:!0},"application/fits":{source:"iana"},"application/flexfec":{source:"iana"},"application/font-sfnt":{source:"iana"},"application/font-tdpfr":{source:"iana",extensions:["pfr"]},"application/font-woff":{source:"iana",compressible:!1},"application/framework-attributes+xml":{source:"iana",compressible:!0},"application/geo+json":{source:"iana",compressible:!0,extensions:["geojson"]},"application/geo+json-seq":{source:"iana"},"application/geopackage+sqlite3":{source:"iana"},"application/geoxacml+xml":{source:"iana",compressible:!0},"application/gltf-buffer":{source:"iana"},"application/gml+xml":{source:"iana",compressible:!0,extensions:["gml"]},"application/gpx+xml":{source:"apache",compressible:!0,extensions:["gpx"]},"application/gxf":{source:"apache",extensions:["gxf"]},"application/gzip":{source:"iana",compressible:!1,extensions:["gz"]},"application/h224":{source:"iana"},"application/held+xml":{source:"iana",compressible:!0},"application/hjson":{extensions:["hjson"]},"application/http":{source:"iana"},"application/hyperstudio":{source:"iana",extensions:["stk"]},"application/ibe-key-request+xml":{source:"iana",compressible:!0},"application/ibe-pkg-reply+xml":{source:"iana",compressible:!0},"application/ibe-pp-data":{source:"iana"},"application/iges":{source:"iana"},"application/im-iscomposing+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/index":{source:"iana"},"application/index.cmd":{source:"iana"},"application/index.obj":{source:"iana"},"application/index.response":{source:"iana"},"application/index.vnd":{source:"iana"},"application/inkml+xml":{source:"iana",compressible:!0,extensions:["ink","inkml"]},"application/iotp":{source:"iana"},"application/ipfix":{source:"iana",extensions:["ipfix"]},"application/ipp":{source:"iana"},"application/isup":{source:"iana"},"application/its+xml":{source:"iana",compressible:!0,extensions:["its"]},"application/java-archive":{source:"apache",compressible:!1,extensions:["jar","war","ear"]},"application/java-serialized-object":{source:"apache",compressible:!1,extensions:["ser"]},"application/java-vm":{source:"apache",compressible:!1,extensions:["class"]},"application/javascript":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["js","mjs"]},"application/jf2feed+json":{source:"iana",compressible:!0},"application/jose":{source:"iana"},"application/jose+json":{source:"iana",compressible:!0},"application/jrd+json":{source:"iana",compressible:!0},"application/jscalendar+json":{source:"iana",compressible:!0},"application/json":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["json","map"]},"application/json-patch+json":{source:"iana",compressible:!0},"application/json-seq":{source:"iana"},"application/json5":{extensions:["json5"]},"application/jsonml+json":{source:"apache",compressible:!0,extensions:["jsonml"]},"application/jwk+json":{source:"iana",compressible:!0},"application/jwk-set+json":{source:"iana",compressible:!0},"application/jwt":{source:"iana"},"application/kpml-request+xml":{source:"iana",compressible:!0},"application/kpml-response+xml":{source:"iana",compressible:!0},"application/ld+json":{source:"iana",compressible:!0,extensions:["jsonld"]},"application/lgr+xml":{source:"iana",compressible:!0,extensions:["lgr"]},"application/link-format":{source:"iana"},"application/load-control+xml":{source:"iana",compressible:!0},"application/lost+xml":{source:"iana",compressible:!0,extensions:["lostxml"]},"application/lostsync+xml":{source:"iana",compressible:!0},"application/lpf+zip":{source:"iana",compressible:!1},"application/lxf":{source:"iana"},"application/mac-binhex40":{source:"iana",extensions:["hqx"]},"application/mac-compactpro":{source:"apache",extensions:["cpt"]},"application/macwriteii":{source:"iana"},"application/mads+xml":{source:"iana",compressible:!0,extensions:["mads"]},"application/manifest+json":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["webmanifest"]},"application/marc":{source:"iana",extensions:["mrc"]},"application/marcxml+xml":{source:"iana",compressible:!0,extensions:["mrcx"]},"application/mathematica":{source:"iana",extensions:["ma","nb","mb"]},"application/mathml+xml":{source:"iana",compressible:!0,extensions:["mathml"]},"application/mathml-content+xml":{source:"iana",compressible:!0},"application/mathml-presentation+xml":{source:"iana",compressible:!0},"application/mbms-associated-procedure-description+xml":{source:"iana",compressible:!0},"application/mbms-deregister+xml":{source:"iana",compressible:!0},"application/mbms-envelope+xml":{source:"iana",compressible:!0},"application/mbms-msk+xml":{source:"iana",compressible:!0},"application/mbms-msk-response+xml":{source:"iana",compressible:!0},"application/mbms-protection-description+xml":{source:"iana",compressible:!0},"application/mbms-reception-report+xml":{source:"iana",compressible:!0},"application/mbms-register+xml":{source:"iana",compressible:!0},"application/mbms-register-response+xml":{source:"iana",compressible:!0},"application/mbms-schedule+xml":{source:"iana",compressible:!0},"application/mbms-user-service-description+xml":{source:"iana",compressible:!0},"application/mbox":{source:"iana",extensions:["mbox"]},"application/media-policy-dataset+xml":{source:"iana",compressible:!0,extensions:["mpf"]},"application/media_control+xml":{source:"iana",compressible:!0},"application/mediaservercontrol+xml":{source:"iana",compressible:!0,extensions:["mscml"]},"application/merge-patch+json":{source:"iana",compressible:!0},"application/metalink+xml":{source:"apache",compressible:!0,extensions:["metalink"]},"application/metalink4+xml":{source:"iana",compressible:!0,extensions:["meta4"]},"application/mets+xml":{source:"iana",compressible:!0,extensions:["mets"]},"application/mf4":{source:"iana"},"application/mikey":{source:"iana"},"application/mipc":{source:"iana"},"application/missing-blocks+cbor-seq":{source:"iana"},"application/mmt-aei+xml":{source:"iana",compressible:!0,extensions:["maei"]},"application/mmt-usd+xml":{source:"iana",compressible:!0,extensions:["musd"]},"application/mods+xml":{source:"iana",compressible:!0,extensions:["mods"]},"application/moss-keys":{source:"iana"},"application/moss-signature":{source:"iana"},"application/mosskey-data":{source:"iana"},"application/mosskey-request":{source:"iana"},"application/mp21":{source:"iana",extensions:["m21","mp21"]},"application/mp4":{source:"iana",extensions:["mp4s","m4p"]},"application/mpeg4-generic":{source:"iana"},"application/mpeg4-iod":{source:"iana"},"application/mpeg4-iod-xmt":{source:"iana"},"application/mrb-consumer+xml":{source:"iana",compressible:!0},"application/mrb-publish+xml":{source:"iana",compressible:!0},"application/msc-ivr+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/msc-mixer+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/msword":{source:"iana",compressible:!1,extensions:["doc","dot"]},"application/mud+json":{source:"iana",compressible:!0},"application/multipart-core":{source:"iana"},"application/mxf":{source:"iana",extensions:["mxf"]},"application/n-quads":{source:"iana",extensions:["nq"]},"application/n-triples":{source:"iana",extensions:["nt"]},"application/nasdata":{source:"iana"},"application/news-checkgroups":{source:"iana",charset:"US-ASCII"},"application/news-groupinfo":{source:"iana",charset:"US-ASCII"},"application/news-transmission":{source:"iana"},"application/nlsml+xml":{source:"iana",compressible:!0},"application/node":{source:"iana",extensions:["cjs"]},"application/nss":{source:"iana"},"application/oauth-authz-req+jwt":{source:"iana"},"application/oblivious-dns-message":{source:"iana"},"application/ocsp-request":{source:"iana"},"application/ocsp-response":{source:"iana"},"application/octet-stream":{source:"iana",compressible:!1,extensions:["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{source:"iana",extensions:["oda"]},"application/odm+xml":{source:"iana",compressible:!0},"application/odx":{source:"iana"},"application/oebps-package+xml":{source:"iana",compressible:!0,extensions:["opf"]},"application/ogg":{source:"iana",compressible:!1,extensions:["ogx"]},"application/omdoc+xml":{source:"apache",compressible:!0,extensions:["omdoc"]},"application/onenote":{source:"apache",extensions:["onetoc","onetoc2","onetmp","onepkg"]},"application/opc-nodeset+xml":{source:"iana",compressible:!0},"application/oscore":{source:"iana"},"application/oxps":{source:"iana",extensions:["oxps"]},"application/p21":{source:"iana"},"application/p21+zip":{source:"iana",compressible:!1},"application/p2p-overlay+xml":{source:"iana",compressible:!0,extensions:["relo"]},"application/parityfec":{source:"iana"},"application/passport":{source:"iana"},"application/patch-ops-error+xml":{source:"iana",compressible:!0,extensions:["xer"]},"application/pdf":{source:"iana",compressible:!1,extensions:["pdf"]},"application/pdx":{source:"iana"},"application/pem-certificate-chain":{source:"iana"},"application/pgp-encrypted":{source:"iana",compressible:!1,extensions:["pgp"]},"application/pgp-keys":{source:"iana",extensions:["asc"]},"application/pgp-signature":{source:"iana",extensions:["asc","sig"]},"application/pics-rules":{source:"apache",extensions:["prf"]},"application/pidf+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/pidf-diff+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/pkcs10":{source:"iana",extensions:["p10"]},"application/pkcs12":{source:"iana"},"application/pkcs7-mime":{source:"iana",extensions:["p7m","p7c"]},"application/pkcs7-signature":{source:"iana",extensions:["p7s"]},"application/pkcs8":{source:"iana",extensions:["p8"]},"application/pkcs8-encrypted":{source:"iana"},"application/pkix-attr-cert":{source:"iana",extensions:["ac"]},"application/pkix-cert":{source:"iana",extensions:["cer"]},"application/pkix-crl":{source:"iana",extensions:["crl"]},"application/pkix-pkipath":{source:"iana",extensions:["pkipath"]},"application/pkixcmp":{source:"iana",extensions:["pki"]},"application/pls+xml":{source:"iana",compressible:!0,extensions:["pls"]},"application/poc-settings+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/postscript":{source:"iana",compressible:!0,extensions:["ai","eps","ps"]},"application/ppsp-tracker+json":{source:"iana",compressible:!0},"application/problem+json":{source:"iana",compressible:!0},"application/problem+xml":{source:"iana",compressible:!0},"application/provenance+xml":{source:"iana",compressible:!0,extensions:["provx"]},"application/prs.alvestrand.titrax-sheet":{source:"iana"},"application/prs.cww":{source:"iana",extensions:["cww"]},"application/prs.cyn":{source:"iana",charset:"7-BIT"},"application/prs.hpub+zip":{source:"iana",compressible:!1},"application/prs.nprend":{source:"iana"},"application/prs.plucker":{source:"iana"},"application/prs.rdf-xml-crypt":{source:"iana"},"application/prs.xsf+xml":{source:"iana",compressible:!0},"application/pskc+xml":{source:"iana",compressible:!0,extensions:["pskcxml"]},"application/pvd+json":{source:"iana",compressible:!0},"application/qsig":{source:"iana"},"application/raml+yaml":{compressible:!0,extensions:["raml"]},"application/raptorfec":{source:"iana"},"application/rdap+json":{source:"iana",compressible:!0},"application/rdf+xml":{source:"iana",compressible:!0,extensions:["rdf","owl"]},"application/reginfo+xml":{source:"iana",compressible:!0,extensions:["rif"]},"application/relax-ng-compact-syntax":{source:"iana",extensions:["rnc"]},"application/remote-printing":{source:"iana"},"application/reputon+json":{source:"iana",compressible:!0},"application/resource-lists+xml":{source:"iana",compressible:!0,extensions:["rl"]},"application/resource-lists-diff+xml":{source:"iana",compressible:!0,extensions:["rld"]},"application/rfc+xml":{source:"iana",compressible:!0},"application/riscos":{source:"iana"},"application/rlmi+xml":{source:"iana",compressible:!0},"application/rls-services+xml":{source:"iana",compressible:!0,extensions:["rs"]},"application/route-apd+xml":{source:"iana",compressible:!0,extensions:["rapd"]},"application/route-s-tsid+xml":{source:"iana",compressible:!0,extensions:["sls"]},"application/route-usd+xml":{source:"iana",compressible:!0,extensions:["rusd"]},"application/rpki-ghostbusters":{source:"iana",extensions:["gbr"]},"application/rpki-manifest":{source:"iana",extensions:["mft"]},"application/rpki-publication":{source:"iana"},"application/rpki-roa":{source:"iana",extensions:["roa"]},"application/rpki-updown":{source:"iana"},"application/rsd+xml":{source:"apache",compressible:!0,extensions:["rsd"]},"application/rss+xml":{source:"apache",compressible:!0,extensions:["rss"]},"application/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"application/rtploopback":{source:"iana"},"application/rtx":{source:"iana"},"application/samlassertion+xml":{source:"iana",compressible:!0},"application/samlmetadata+xml":{source:"iana",compressible:!0},"application/sarif+json":{source:"iana",compressible:!0},"application/sarif-external-properties+json":{source:"iana",compressible:!0},"application/sbe":{source:"iana"},"application/sbml+xml":{source:"iana",compressible:!0,extensions:["sbml"]},"application/scaip+xml":{source:"iana",compressible:!0},"application/scim+json":{source:"iana",compressible:!0},"application/scvp-cv-request":{source:"iana",extensions:["scq"]},"application/scvp-cv-response":{source:"iana",extensions:["scs"]},"application/scvp-vp-request":{source:"iana",extensions:["spq"]},"application/scvp-vp-response":{source:"iana",extensions:["spp"]},"application/sdp":{source:"iana",extensions:["sdp"]},"application/secevent+jwt":{source:"iana"},"application/senml+cbor":{source:"iana"},"application/senml+json":{source:"iana",compressible:!0},"application/senml+xml":{source:"iana",compressible:!0,extensions:["senmlx"]},"application/senml-etch+cbor":{source:"iana"},"application/senml-etch+json":{source:"iana",compressible:!0},"application/senml-exi":{source:"iana"},"application/sensml+cbor":{source:"iana"},"application/sensml+json":{source:"iana",compressible:!0},"application/sensml+xml":{source:"iana",compressible:!0,extensions:["sensmlx"]},"application/sensml-exi":{source:"iana"},"application/sep+xml":{source:"iana",compressible:!0},"application/sep-exi":{source:"iana"},"application/session-info":{source:"iana"},"application/set-payment":{source:"iana"},"application/set-payment-initiation":{source:"iana",extensions:["setpay"]},"application/set-registration":{source:"iana"},"application/set-registration-initiation":{source:"iana",extensions:["setreg"]},"application/sgml":{source:"iana"},"application/sgml-open-catalog":{source:"iana"},"application/shf+xml":{source:"iana",compressible:!0,extensions:["shf"]},"application/sieve":{source:"iana",extensions:["siv","sieve"]},"application/simple-filter+xml":{source:"iana",compressible:!0},"application/simple-message-summary":{source:"iana"},"application/simplesymbolcontainer":{source:"iana"},"application/sipc":{source:"iana"},"application/slate":{source:"iana"},"application/smil":{source:"iana"},"application/smil+xml":{source:"iana",compressible:!0,extensions:["smi","smil"]},"application/smpte336m":{source:"iana"},"application/soap+fastinfoset":{source:"iana"},"application/soap+xml":{source:"iana",compressible:!0},"application/sparql-query":{source:"iana",extensions:["rq"]},"application/sparql-results+xml":{source:"iana",compressible:!0,extensions:["srx"]},"application/spdx+json":{source:"iana",compressible:!0},"application/spirits-event+xml":{source:"iana",compressible:!0},"application/sql":{source:"iana"},"application/srgs":{source:"iana",extensions:["gram"]},"application/srgs+xml":{source:"iana",compressible:!0,extensions:["grxml"]},"application/sru+xml":{source:"iana",compressible:!0,extensions:["sru"]},"application/ssdl+xml":{source:"apache",compressible:!0,extensions:["ssdl"]},"application/ssml+xml":{source:"iana",compressible:!0,extensions:["ssml"]},"application/stix+json":{source:"iana",compressible:!0},"application/swid+xml":{source:"iana",compressible:!0,extensions:["swidtag"]},"application/tamp-apex-update":{source:"iana"},"application/tamp-apex-update-confirm":{source:"iana"},"application/tamp-community-update":{source:"iana"},"application/tamp-community-update-confirm":{source:"iana"},"application/tamp-error":{source:"iana"},"application/tamp-sequence-adjust":{source:"iana"},"application/tamp-sequence-adjust-confirm":{source:"iana"},"application/tamp-status-query":{source:"iana"},"application/tamp-status-response":{source:"iana"},"application/tamp-update":{source:"iana"},"application/tamp-update-confirm":{source:"iana"},"application/tar":{compressible:!0},"application/taxii+json":{source:"iana",compressible:!0},"application/td+json":{source:"iana",compressible:!0},"application/tei+xml":{source:"iana",compressible:!0,extensions:["tei","teicorpus"]},"application/tetra_isi":{source:"iana"},"application/thraud+xml":{source:"iana",compressible:!0,extensions:["tfi"]},"application/timestamp-query":{source:"iana"},"application/timestamp-reply":{source:"iana"},"application/timestamped-data":{source:"iana",extensions:["tsd"]},"application/tlsrpt+gzip":{source:"iana"},"application/tlsrpt+json":{source:"iana",compressible:!0},"application/tnauthlist":{source:"iana"},"application/token-introspection+jwt":{source:"iana"},"application/toml":{compressible:!0,extensions:["toml"]},"application/trickle-ice-sdpfrag":{source:"iana"},"application/trig":{source:"iana",extensions:["trig"]},"application/ttml+xml":{source:"iana",compressible:!0,extensions:["ttml"]},"application/tve-trigger":{source:"iana"},"application/tzif":{source:"iana"},"application/tzif-leap":{source:"iana"},"application/ubjson":{compressible:!1,extensions:["ubj"]},"application/ulpfec":{source:"iana"},"application/urc-grpsheet+xml":{source:"iana",compressible:!0},"application/urc-ressheet+xml":{source:"iana",compressible:!0,extensions:["rsheet"]},"application/urc-targetdesc+xml":{source:"iana",compressible:!0,extensions:["td"]},"application/urc-uisocketdesc+xml":{source:"iana",compressible:!0},"application/vcard+json":{source:"iana",compressible:!0},"application/vcard+xml":{source:"iana",compressible:!0},"application/vemmi":{source:"iana"},"application/vividence.scriptfile":{source:"apache"},"application/vnd.1000minds.decision-model+xml":{source:"iana",compressible:!0,extensions:["1km"]},"application/vnd.3gpp-prose+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-prose-pc3ch+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-v2x-local-service-information":{source:"iana"},"application/vnd.3gpp.5gnas":{source:"iana"},"application/vnd.3gpp.access-transfer-events+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.bsf+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.gmop+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.gtpc":{source:"iana"},"application/vnd.3gpp.interworking-data":{source:"iana"},"application/vnd.3gpp.lpp":{source:"iana"},"application/vnd.3gpp.mc-signalling-ear":{source:"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-payload":{source:"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-signalling":{source:"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-floor-request+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-location-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-signed+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-ue-init-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-location-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-transmission-request+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mid-call+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.ngap":{source:"iana"},"application/vnd.3gpp.pfcp":{source:"iana"},"application/vnd.3gpp.pic-bw-large":{source:"iana",extensions:["plb"]},"application/vnd.3gpp.pic-bw-small":{source:"iana",extensions:["psb"]},"application/vnd.3gpp.pic-bw-var":{source:"iana",extensions:["pvb"]},"application/vnd.3gpp.s1ap":{source:"iana"},"application/vnd.3gpp.sms":{source:"iana"},"application/vnd.3gpp.sms+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-ext+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.state-and-event-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.ussd+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.bcmcsinfo+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.sms":{source:"iana"},"application/vnd.3gpp2.tcap":{source:"iana",extensions:["tcap"]},"application/vnd.3lightssoftware.imagescal":{source:"iana"},"application/vnd.3m.post-it-notes":{source:"iana",extensions:["pwn"]},"application/vnd.accpac.simply.aso":{source:"iana",extensions:["aso"]},"application/vnd.accpac.simply.imp":{source:"iana",extensions:["imp"]},"application/vnd.acucobol":{source:"iana",extensions:["acu"]},"application/vnd.acucorp":{source:"iana",extensions:["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{source:"apache",compressible:!1,extensions:["air"]},"application/vnd.adobe.flash.movie":{source:"iana"},"application/vnd.adobe.formscentral.fcdt":{source:"iana",extensions:["fcdt"]},"application/vnd.adobe.fxp":{source:"iana",extensions:["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{source:"iana"},"application/vnd.adobe.xdp+xml":{source:"iana",compressible:!0,extensions:["xdp"]},"application/vnd.adobe.xfdf":{source:"iana",extensions:["xfdf"]},"application/vnd.aether.imp":{source:"iana"},"application/vnd.afpc.afplinedata":{source:"iana"},"application/vnd.afpc.afplinedata-pagedef":{source:"iana"},"application/vnd.afpc.cmoca-cmresource":{source:"iana"},"application/vnd.afpc.foca-charset":{source:"iana"},"application/vnd.afpc.foca-codedfont":{source:"iana"},"application/vnd.afpc.foca-codepage":{source:"iana"},"application/vnd.afpc.modca":{source:"iana"},"application/vnd.afpc.modca-cmtable":{source:"iana"},"application/vnd.afpc.modca-formdef":{source:"iana"},"application/vnd.afpc.modca-mediummap":{source:"iana"},"application/vnd.afpc.modca-objectcontainer":{source:"iana"},"application/vnd.afpc.modca-overlay":{source:"iana"},"application/vnd.afpc.modca-pagesegment":{source:"iana"},"application/vnd.age":{source:"iana",extensions:["age"]},"application/vnd.ah-barcode":{source:"iana"},"application/vnd.ahead.space":{source:"iana",extensions:["ahead"]},"application/vnd.airzip.filesecure.azf":{source:"iana",extensions:["azf"]},"application/vnd.airzip.filesecure.azs":{source:"iana",extensions:["azs"]},"application/vnd.amadeus+json":{source:"iana",compressible:!0},"application/vnd.amazon.ebook":{source:"apache",extensions:["azw"]},"application/vnd.amazon.mobi8-ebook":{source:"iana"},"application/vnd.americandynamics.acc":{source:"iana",extensions:["acc"]},"application/vnd.amiga.ami":{source:"iana",extensions:["ami"]},"application/vnd.amundsen.maze+xml":{source:"iana",compressible:!0},"application/vnd.android.ota":{source:"iana"},"application/vnd.android.package-archive":{source:"apache",compressible:!1,extensions:["apk"]},"application/vnd.anki":{source:"iana"},"application/vnd.anser-web-certificate-issue-initiation":{source:"iana",extensions:["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{source:"apache",extensions:["fti"]},"application/vnd.antix.game-component":{source:"iana",extensions:["atx"]},"application/vnd.apache.arrow.file":{source:"iana"},"application/vnd.apache.arrow.stream":{source:"iana"},"application/vnd.apache.thrift.binary":{source:"iana"},"application/vnd.apache.thrift.compact":{source:"iana"},"application/vnd.apache.thrift.json":{source:"iana"},"application/vnd.api+json":{source:"iana",compressible:!0},"application/vnd.aplextor.warrp+json":{source:"iana",compressible:!0},"application/vnd.apothekende.reservation+json":{source:"iana",compressible:!0},"application/vnd.apple.installer+xml":{source:"iana",compressible:!0,extensions:["mpkg"]},"application/vnd.apple.keynote":{source:"iana",extensions:["key"]},"application/vnd.apple.mpegurl":{source:"iana",extensions:["m3u8"]},"application/vnd.apple.numbers":{source:"iana",extensions:["numbers"]},"application/vnd.apple.pages":{source:"iana",extensions:["pages"]},"application/vnd.apple.pkpass":{compressible:!1,extensions:["pkpass"]},"application/vnd.arastra.swi":{source:"iana"},"application/vnd.aristanetworks.swi":{source:"iana",extensions:["swi"]},"application/vnd.artisan+json":{source:"iana",compressible:!0},"application/vnd.artsquare":{source:"iana"},"application/vnd.astraea-software.iota":{source:"iana",extensions:["iota"]},"application/vnd.audiograph":{source:"iana",extensions:["aep"]},"application/vnd.autopackage":{source:"iana"},"application/vnd.avalon+json":{source:"iana",compressible:!0},"application/vnd.avistar+xml":{source:"iana",compressible:!0},"application/vnd.balsamiq.bmml+xml":{source:"iana",compressible:!0,extensions:["bmml"]},"application/vnd.balsamiq.bmpr":{source:"iana"},"application/vnd.banana-accounting":{source:"iana"},"application/vnd.bbf.usp.error":{source:"iana"},"application/vnd.bbf.usp.msg":{source:"iana"},"application/vnd.bbf.usp.msg+json":{source:"iana",compressible:!0},"application/vnd.bekitzur-stech+json":{source:"iana",compressible:!0},"application/vnd.bint.med-content":{source:"iana"},"application/vnd.biopax.rdf+xml":{source:"iana",compressible:!0},"application/vnd.blink-idb-value-wrapper":{source:"iana"},"application/vnd.blueice.multipass":{source:"iana",extensions:["mpm"]},"application/vnd.bluetooth.ep.oob":{source:"iana"},"application/vnd.bluetooth.le.oob":{source:"iana"},"application/vnd.bmi":{source:"iana",extensions:["bmi"]},"application/vnd.bpf":{source:"iana"},"application/vnd.bpf3":{source:"iana"},"application/vnd.businessobjects":{source:"iana",extensions:["rep"]},"application/vnd.byu.uapi+json":{source:"iana",compressible:!0},"application/vnd.cab-jscript":{source:"iana"},"application/vnd.canon-cpdl":{source:"iana"},"application/vnd.canon-lips":{source:"iana"},"application/vnd.capasystems-pg+json":{source:"iana",compressible:!0},"application/vnd.cendio.thinlinc.clientconf":{source:"iana"},"application/vnd.century-systems.tcp_stream":{source:"iana"},"application/vnd.chemdraw+xml":{source:"iana",compressible:!0,extensions:["cdxml"]},"application/vnd.chess-pgn":{source:"iana"},"application/vnd.chipnuts.karaoke-mmd":{source:"iana",extensions:["mmd"]},"application/vnd.ciedi":{source:"iana"},"application/vnd.cinderella":{source:"iana",extensions:["cdy"]},"application/vnd.cirpack.isdn-ext":{source:"iana"},"application/vnd.citationstyles.style+xml":{source:"iana",compressible:!0,extensions:["csl"]},"application/vnd.claymore":{source:"iana",extensions:["cla"]},"application/vnd.cloanto.rp9":{source:"iana",extensions:["rp9"]},"application/vnd.clonk.c4group":{source:"iana",extensions:["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{source:"iana",extensions:["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{source:"iana",extensions:["c11amz"]},"application/vnd.coffeescript":{source:"iana"},"application/vnd.collabio.xodocuments.document":{source:"iana"},"application/vnd.collabio.xodocuments.document-template":{source:"iana"},"application/vnd.collabio.xodocuments.presentation":{source:"iana"},"application/vnd.collabio.xodocuments.presentation-template":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{source:"iana"},"application/vnd.collection+json":{source:"iana",compressible:!0},"application/vnd.collection.doc+json":{source:"iana",compressible:!0},"application/vnd.collection.next+json":{source:"iana",compressible:!0},"application/vnd.comicbook+zip":{source:"iana",compressible:!1},"application/vnd.comicbook-rar":{source:"iana"},"application/vnd.commerce-battelle":{source:"iana"},"application/vnd.commonspace":{source:"iana",extensions:["csp"]},"application/vnd.contact.cmsg":{source:"iana",extensions:["cdbcmsg"]},"application/vnd.coreos.ignition+json":{source:"iana",compressible:!0},"application/vnd.cosmocaller":{source:"iana",extensions:["cmc"]},"application/vnd.crick.clicker":{source:"iana",extensions:["clkx"]},"application/vnd.crick.clicker.keyboard":{source:"iana",extensions:["clkk"]},"application/vnd.crick.clicker.palette":{source:"iana",extensions:["clkp"]},"application/vnd.crick.clicker.template":{source:"iana",extensions:["clkt"]},"application/vnd.crick.clicker.wordbank":{source:"iana",extensions:["clkw"]},"application/vnd.criticaltools.wbs+xml":{source:"iana",compressible:!0,extensions:["wbs"]},"application/vnd.cryptii.pipe+json":{source:"iana",compressible:!0},"application/vnd.crypto-shade-file":{source:"iana"},"application/vnd.cryptomator.encrypted":{source:"iana"},"application/vnd.cryptomator.vault":{source:"iana"},"application/vnd.ctc-posml":{source:"iana",extensions:["pml"]},"application/vnd.ctct.ws+xml":{source:"iana",compressible:!0},"application/vnd.cups-pdf":{source:"iana"},"application/vnd.cups-postscript":{source:"iana"},"application/vnd.cups-ppd":{source:"iana",extensions:["ppd"]},"application/vnd.cups-raster":{source:"iana"},"application/vnd.cups-raw":{source:"iana"},"application/vnd.curl":{source:"iana"},"application/vnd.curl.car":{source:"apache",extensions:["car"]},"application/vnd.curl.pcurl":{source:"apache",extensions:["pcurl"]},"application/vnd.cyan.dean.root+xml":{source:"iana",compressible:!0},"application/vnd.cybank":{source:"iana"},"application/vnd.cyclonedx+json":{source:"iana",compressible:!0},"application/vnd.cyclonedx+xml":{source:"iana",compressible:!0},"application/vnd.d2l.coursepackage1p0+zip":{source:"iana",compressible:!1},"application/vnd.d3m-dataset":{source:"iana"},"application/vnd.d3m-problem":{source:"iana"},"application/vnd.dart":{source:"iana",compressible:!0,extensions:["dart"]},"application/vnd.data-vision.rdz":{source:"iana",extensions:["rdz"]},"application/vnd.datapackage+json":{source:"iana",compressible:!0},"application/vnd.dataresource+json":{source:"iana",compressible:!0},"application/vnd.dbf":{source:"iana",extensions:["dbf"]},"application/vnd.debian.binary-package":{source:"iana"},"application/vnd.dece.data":{source:"iana",extensions:["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{source:"iana",compressible:!0,extensions:["uvt","uvvt"]},"application/vnd.dece.unspecified":{source:"iana",extensions:["uvx","uvvx"]},"application/vnd.dece.zip":{source:"iana",extensions:["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{source:"iana",extensions:["fe_launch"]},"application/vnd.desmume.movie":{source:"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{source:"iana"},"application/vnd.dm.delegation+xml":{source:"iana",compressible:!0},"application/vnd.dna":{source:"iana",extensions:["dna"]},"application/vnd.document+json":{source:"iana",compressible:!0},"application/vnd.dolby.mlp":{source:"apache",extensions:["mlp"]},"application/vnd.dolby.mobile.1":{source:"iana"},"application/vnd.dolby.mobile.2":{source:"iana"},"application/vnd.doremir.scorecloud-binary-document":{source:"iana"},"application/vnd.dpgraph":{source:"iana",extensions:["dpg"]},"application/vnd.dreamfactory":{source:"iana",extensions:["dfac"]},"application/vnd.drive+json":{source:"iana",compressible:!0},"application/vnd.ds-keypoint":{source:"apache",extensions:["kpxx"]},"application/vnd.dtg.local":{source:"iana"},"application/vnd.dtg.local.flash":{source:"iana"},"application/vnd.dtg.local.html":{source:"iana"},"application/vnd.dvb.ait":{source:"iana",extensions:["ait"]},"application/vnd.dvb.dvbisl+xml":{source:"iana",compressible:!0},"application/vnd.dvb.dvbj":{source:"iana"},"application/vnd.dvb.esgcontainer":{source:"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess2":{source:"iana"},"application/vnd.dvb.ipdcesgpdd":{source:"iana"},"application/vnd.dvb.ipdcroaming":{source:"iana"},"application/vnd.dvb.iptv.alfec-base":{source:"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{source:"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-container+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-generic+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-msglist+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-request+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-response+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-init+xml":{source:"iana",compressible:!0},"application/vnd.dvb.pfr":{source:"iana"},"application/vnd.dvb.service":{source:"iana",extensions:["svc"]},"application/vnd.dxr":{source:"iana"},"application/vnd.dynageo":{source:"iana",extensions:["geo"]},"application/vnd.dzr":{source:"iana"},"application/vnd.easykaraoke.cdgdownload":{source:"iana"},"application/vnd.ecdis-update":{source:"iana"},"application/vnd.ecip.rlp":{source:"iana"},"application/vnd.eclipse.ditto+json":{source:"iana",compressible:!0},"application/vnd.ecowin.chart":{source:"iana",extensions:["mag"]},"application/vnd.ecowin.filerequest":{source:"iana"},"application/vnd.ecowin.fileupdate":{source:"iana"},"application/vnd.ecowin.series":{source:"iana"},"application/vnd.ecowin.seriesrequest":{source:"iana"},"application/vnd.ecowin.seriesupdate":{source:"iana"},"application/vnd.efi.img":{source:"iana"},"application/vnd.efi.iso":{source:"iana"},"application/vnd.emclient.accessrequest+xml":{source:"iana",compressible:!0},"application/vnd.enliven":{source:"iana",extensions:["nml"]},"application/vnd.enphase.envoy":{source:"iana"},"application/vnd.eprints.data+xml":{source:"iana",compressible:!0},"application/vnd.epson.esf":{source:"iana",extensions:["esf"]},"application/vnd.epson.msf":{source:"iana",extensions:["msf"]},"application/vnd.epson.quickanime":{source:"iana",extensions:["qam"]},"application/vnd.epson.salt":{source:"iana",extensions:["slt"]},"application/vnd.epson.ssf":{source:"iana",extensions:["ssf"]},"application/vnd.ericsson.quickcall":{source:"iana"},"application/vnd.espass-espass+zip":{source:"iana",compressible:!1},"application/vnd.eszigno3+xml":{source:"iana",compressible:!0,extensions:["es3","et3"]},"application/vnd.etsi.aoc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.asic-e+zip":{source:"iana",compressible:!1},"application/vnd.etsi.asic-s+zip":{source:"iana",compressible:!1},"application/vnd.etsi.cug+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvcommand+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-bc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-cod+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-npvr+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvservice+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsync+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvueprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mcid+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mheg5":{source:"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{source:"iana",compressible:!0},"application/vnd.etsi.pstn+xml":{source:"iana",compressible:!0},"application/vnd.etsi.sci+xml":{source:"iana",compressible:!0},"application/vnd.etsi.simservs+xml":{source:"iana",compressible:!0},"application/vnd.etsi.timestamp-token":{source:"iana"},"application/vnd.etsi.tsl+xml":{source:"iana",compressible:!0},"application/vnd.etsi.tsl.der":{source:"iana"},"application/vnd.eu.kasparian.car+json":{source:"iana",compressible:!0},"application/vnd.eudora.data":{source:"iana"},"application/vnd.evolv.ecig.profile":{source:"iana"},"application/vnd.evolv.ecig.settings":{source:"iana"},"application/vnd.evolv.ecig.theme":{source:"iana"},"application/vnd.exstream-empower+zip":{source:"iana",compressible:!1},"application/vnd.exstream-package":{source:"iana"},"application/vnd.ezpix-album":{source:"iana",extensions:["ez2"]},"application/vnd.ezpix-package":{source:"iana",extensions:["ez3"]},"application/vnd.f-secure.mobile":{source:"iana"},"application/vnd.familysearch.gedcom+zip":{source:"iana",compressible:!1},"application/vnd.fastcopy-disk-image":{source:"iana"},"application/vnd.fdf":{source:"iana",extensions:["fdf"]},"application/vnd.fdsn.mseed":{source:"iana",extensions:["mseed"]},"application/vnd.fdsn.seed":{source:"iana",extensions:["seed","dataless"]},"application/vnd.ffsns":{source:"iana"},"application/vnd.ficlab.flb+zip":{source:"iana",compressible:!1},"application/vnd.filmit.zfc":{source:"iana"},"application/vnd.fints":{source:"iana"},"application/vnd.firemonkeys.cloudcell":{source:"iana"},"application/vnd.flographit":{source:"iana",extensions:["gph"]},"application/vnd.fluxtime.clip":{source:"iana",extensions:["ftc"]},"application/vnd.font-fontforge-sfd":{source:"iana"},"application/vnd.framemaker":{source:"iana",extensions:["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{source:"iana",extensions:["fnc"]},"application/vnd.frogans.ltf":{source:"iana",extensions:["ltf"]},"application/vnd.fsc.weblaunch":{source:"iana",extensions:["fsc"]},"application/vnd.fujifilm.fb.docuworks":{source:"iana"},"application/vnd.fujifilm.fb.docuworks.binder":{source:"iana"},"application/vnd.fujifilm.fb.docuworks.container":{source:"iana"},"application/vnd.fujifilm.fb.jfi+xml":{source:"iana",compressible:!0},"application/vnd.fujitsu.oasys":{source:"iana",extensions:["oas"]},"application/vnd.fujitsu.oasys2":{source:"iana",extensions:["oa2"]},"application/vnd.fujitsu.oasys3":{source:"iana",extensions:["oa3"]},"application/vnd.fujitsu.oasysgp":{source:"iana",extensions:["fg5"]},"application/vnd.fujitsu.oasysprs":{source:"iana",extensions:["bh2"]},"application/vnd.fujixerox.art-ex":{source:"iana"},"application/vnd.fujixerox.art4":{source:"iana"},"application/vnd.fujixerox.ddd":{source:"iana",extensions:["ddd"]},"application/vnd.fujixerox.docuworks":{source:"iana",extensions:["xdw"]},"application/vnd.fujixerox.docuworks.binder":{source:"iana",extensions:["xbd"]},"application/vnd.fujixerox.docuworks.container":{source:"iana"},"application/vnd.fujixerox.hbpl":{source:"iana"},"application/vnd.fut-misnet":{source:"iana"},"application/vnd.futoin+cbor":{source:"iana"},"application/vnd.futoin+json":{source:"iana",compressible:!0},"application/vnd.fuzzysheet":{source:"iana",extensions:["fzs"]},"application/vnd.genomatix.tuxedo":{source:"iana",extensions:["txd"]},"application/vnd.gentics.grd+json":{source:"iana",compressible:!0},"application/vnd.geo+json":{source:"iana",compressible:!0},"application/vnd.geocube+xml":{source:"iana",compressible:!0},"application/vnd.geogebra.file":{source:"iana",extensions:["ggb"]},"application/vnd.geogebra.slides":{source:"iana"},"application/vnd.geogebra.tool":{source:"iana",extensions:["ggt"]},"application/vnd.geometry-explorer":{source:"iana",extensions:["gex","gre"]},"application/vnd.geonext":{source:"iana",extensions:["gxt"]},"application/vnd.geoplan":{source:"iana",extensions:["g2w"]},"application/vnd.geospace":{source:"iana",extensions:["g3w"]},"application/vnd.gerber":{source:"iana"},"application/vnd.globalplatform.card-content-mgt":{source:"iana"},"application/vnd.globalplatform.card-content-mgt-response":{source:"iana"},"application/vnd.gmx":{source:"iana",extensions:["gmx"]},"application/vnd.google-apps.document":{compressible:!1,extensions:["gdoc"]},"application/vnd.google-apps.presentation":{compressible:!1,extensions:["gslides"]},"application/vnd.google-apps.spreadsheet":{compressible:!1,extensions:["gsheet"]},"application/vnd.google-earth.kml+xml":{source:"iana",compressible:!0,extensions:["kml"]},"application/vnd.google-earth.kmz":{source:"iana",compressible:!1,extensions:["kmz"]},"application/vnd.gov.sk.e-form+xml":{source:"iana",compressible:!0},"application/vnd.gov.sk.e-form+zip":{source:"iana",compressible:!1},"application/vnd.gov.sk.xmldatacontainer+xml":{source:"iana",compressible:!0},"application/vnd.grafeq":{source:"iana",extensions:["gqf","gqs"]},"application/vnd.gridmp":{source:"iana"},"application/vnd.groove-account":{source:"iana",extensions:["gac"]},"application/vnd.groove-help":{source:"iana",extensions:["ghf"]},"application/vnd.groove-identity-message":{source:"iana",extensions:["gim"]},"application/vnd.groove-injector":{source:"iana",extensions:["grv"]},"application/vnd.groove-tool-message":{source:"iana",extensions:["gtm"]},"application/vnd.groove-tool-template":{source:"iana",extensions:["tpl"]},"application/vnd.groove-vcard":{source:"iana",extensions:["vcg"]},"application/vnd.hal+json":{source:"iana",compressible:!0},"application/vnd.hal+xml":{source:"iana",compressible:!0,extensions:["hal"]},"application/vnd.handheld-entertainment+xml":{source:"iana",compressible:!0,extensions:["zmm"]},"application/vnd.hbci":{source:"iana",extensions:["hbci"]},"application/vnd.hc+json":{source:"iana",compressible:!0},"application/vnd.hcl-bireports":{source:"iana"},"application/vnd.hdt":{source:"iana"},"application/vnd.heroku+json":{source:"iana",compressible:!0},"application/vnd.hhe.lesson-player":{source:"iana",extensions:["les"]},"application/vnd.hl7cda+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.hl7v2+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.hp-hpgl":{source:"iana",extensions:["hpgl"]},"application/vnd.hp-hpid":{source:"iana",extensions:["hpid"]},"application/vnd.hp-hps":{source:"iana",extensions:["hps"]},"application/vnd.hp-jlyt":{source:"iana",extensions:["jlt"]},"application/vnd.hp-pcl":{source:"iana",extensions:["pcl"]},"application/vnd.hp-pclxl":{source:"iana",extensions:["pclxl"]},"application/vnd.httphone":{source:"iana"},"application/vnd.hydrostatix.sof-data":{source:"iana",extensions:["sfd-hdstx"]},"application/vnd.hyper+json":{source:"iana",compressible:!0},"application/vnd.hyper-item+json":{source:"iana",compressible:!0},"application/vnd.hyperdrive+json":{source:"iana",compressible:!0},"application/vnd.hzn-3d-crossword":{source:"iana"},"application/vnd.ibm.afplinedata":{source:"iana"},"application/vnd.ibm.electronic-media":{source:"iana"},"application/vnd.ibm.minipay":{source:"iana",extensions:["mpy"]},"application/vnd.ibm.modcap":{source:"iana",extensions:["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{source:"iana",extensions:["irm"]},"application/vnd.ibm.secure-container":{source:"iana",extensions:["sc"]},"application/vnd.iccprofile":{source:"iana",extensions:["icc","icm"]},"application/vnd.ieee.1905":{source:"iana"},"application/vnd.igloader":{source:"iana",extensions:["igl"]},"application/vnd.imagemeter.folder+zip":{source:"iana",compressible:!1},"application/vnd.imagemeter.image+zip":{source:"iana",compressible:!1},"application/vnd.immervision-ivp":{source:"iana",extensions:["ivp"]},"application/vnd.immervision-ivu":{source:"iana",extensions:["ivu"]},"application/vnd.ims.imsccv1p1":{source:"iana"},"application/vnd.ims.imsccv1p2":{source:"iana"},"application/vnd.ims.imsccv1p3":{source:"iana"},"application/vnd.ims.lis.v2.result+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy.id+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings.simple+json":{source:"iana",compressible:!0},"application/vnd.informedcontrol.rms+xml":{source:"iana",compressible:!0},"application/vnd.informix-visionary":{source:"iana"},"application/vnd.infotech.project":{source:"iana"},"application/vnd.infotech.project+xml":{source:"iana",compressible:!0},"application/vnd.innopath.wamp.notification":{source:"iana"},"application/vnd.insors.igm":{source:"iana",extensions:["igm"]},"application/vnd.intercon.formnet":{source:"iana",extensions:["xpw","xpx"]},"application/vnd.intergeo":{source:"iana",extensions:["i2g"]},"application/vnd.intertrust.digibox":{source:"iana"},"application/vnd.intertrust.nncp":{source:"iana"},"application/vnd.intu.qbo":{source:"iana",extensions:["qbo"]},"application/vnd.intu.qfx":{source:"iana",extensions:["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.conceptitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.knowledgeitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsmessage+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.packageitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.planningitem+xml":{source:"iana",compressible:!0},"application/vnd.ipunplugged.rcprofile":{source:"iana",extensions:["rcprofile"]},"application/vnd.irepository.package+xml":{source:"iana",compressible:!0,extensions:["irp"]},"application/vnd.is-xpr":{source:"iana",extensions:["xpr"]},"application/vnd.isac.fcs":{source:"iana",extensions:["fcs"]},"application/vnd.iso11783-10+zip":{source:"iana",compressible:!1},"application/vnd.jam":{source:"iana",extensions:["jam"]},"application/vnd.japannet-directory-service":{source:"iana"},"application/vnd.japannet-jpnstore-wakeup":{source:"iana"},"application/vnd.japannet-payment-wakeup":{source:"iana"},"application/vnd.japannet-registration":{source:"iana"},"application/vnd.japannet-registration-wakeup":{source:"iana"},"application/vnd.japannet-setstore-wakeup":{source:"iana"},"application/vnd.japannet-verification":{source:"iana"},"application/vnd.japannet-verification-wakeup":{source:"iana"},"application/vnd.jcp.javame.midlet-rms":{source:"iana",extensions:["rms"]},"application/vnd.jisp":{source:"iana",extensions:["jisp"]},"application/vnd.joost.joda-archive":{source:"iana",extensions:["joda"]},"application/vnd.jsk.isdn-ngn":{source:"iana"},"application/vnd.kahootz":{source:"iana",extensions:["ktz","ktr"]},"application/vnd.kde.karbon":{source:"iana",extensions:["karbon"]},"application/vnd.kde.kchart":{source:"iana",extensions:["chrt"]},"application/vnd.kde.kformula":{source:"iana",extensions:["kfo"]},"application/vnd.kde.kivio":{source:"iana",extensions:["flw"]},"application/vnd.kde.kontour":{source:"iana",extensions:["kon"]},"application/vnd.kde.kpresenter":{source:"iana",extensions:["kpr","kpt"]},"application/vnd.kde.kspread":{source:"iana",extensions:["ksp"]},"application/vnd.kde.kword":{source:"iana",extensions:["kwd","kwt"]},"application/vnd.kenameaapp":{source:"iana",extensions:["htke"]},"application/vnd.kidspiration":{source:"iana",extensions:["kia"]},"application/vnd.kinar":{source:"iana",extensions:["kne","knp"]},"application/vnd.koan":{source:"iana",extensions:["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{source:"iana",extensions:["sse"]},"application/vnd.las":{source:"iana"},"application/vnd.las.las+json":{source:"iana",compressible:!0},"application/vnd.las.las+xml":{source:"iana",compressible:!0,extensions:["lasxml"]},"application/vnd.laszip":{source:"iana"},"application/vnd.leap+json":{source:"iana",compressible:!0},"application/vnd.liberty-request+xml":{source:"iana",compressible:!0},"application/vnd.llamagraphics.life-balance.desktop":{source:"iana",extensions:["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{source:"iana",compressible:!0,extensions:["lbe"]},"application/vnd.logipipe.circuit+zip":{source:"iana",compressible:!1},"application/vnd.loom":{source:"iana"},"application/vnd.lotus-1-2-3":{source:"iana",extensions:["123"]},"application/vnd.lotus-approach":{source:"iana",extensions:["apr"]},"application/vnd.lotus-freelance":{source:"iana",extensions:["pre"]},"application/vnd.lotus-notes":{source:"iana",extensions:["nsf"]},"application/vnd.lotus-organizer":{source:"iana",extensions:["org"]},"application/vnd.lotus-screencam":{source:"iana",extensions:["scm"]},"application/vnd.lotus-wordpro":{source:"iana",extensions:["lwp"]},"application/vnd.macports.portpkg":{source:"iana",extensions:["portpkg"]},"application/vnd.mapbox-vector-tile":{source:"iana",extensions:["mvt"]},"application/vnd.marlin.drm.actiontoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.conftoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.license+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.mdcf":{source:"iana"},"application/vnd.mason+json":{source:"iana",compressible:!0},"application/vnd.maxar.archive.3tz+zip":{source:"iana",compressible:!1},"application/vnd.maxmind.maxmind-db":{source:"iana"},"application/vnd.mcd":{source:"iana",extensions:["mcd"]},"application/vnd.medcalcdata":{source:"iana",extensions:["mc1"]},"application/vnd.mediastation.cdkey":{source:"iana",extensions:["cdkey"]},"application/vnd.meridian-slingshot":{source:"iana"},"application/vnd.mfer":{source:"iana",extensions:["mwf"]},"application/vnd.mfmp":{source:"iana",extensions:["mfm"]},"application/vnd.micro+json":{source:"iana",compressible:!0},"application/vnd.micrografx.flo":{source:"iana",extensions:["flo"]},"application/vnd.micrografx.igx":{source:"iana",extensions:["igx"]},"application/vnd.microsoft.portable-executable":{source:"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{source:"iana"},"application/vnd.miele+json":{source:"iana",compressible:!0},"application/vnd.mif":{source:"iana",extensions:["mif"]},"application/vnd.minisoft-hp3000-save":{source:"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{source:"iana"},"application/vnd.mobius.daf":{source:"iana",extensions:["daf"]},"application/vnd.mobius.dis":{source:"iana",extensions:["dis"]},"application/vnd.mobius.mbk":{source:"iana",extensions:["mbk"]},"application/vnd.mobius.mqy":{source:"iana",extensions:["mqy"]},"application/vnd.mobius.msl":{source:"iana",extensions:["msl"]},"application/vnd.mobius.plc":{source:"iana",extensions:["plc"]},"application/vnd.mobius.txf":{source:"iana",extensions:["txf"]},"application/vnd.mophun.application":{source:"iana",extensions:["mpn"]},"application/vnd.mophun.certificate":{source:"iana",extensions:["mpc"]},"application/vnd.motorola.flexsuite":{source:"iana"},"application/vnd.motorola.flexsuite.adsi":{source:"iana"},"application/vnd.motorola.flexsuite.fis":{source:"iana"},"application/vnd.motorola.flexsuite.gotap":{source:"iana"},"application/vnd.motorola.flexsuite.kmr":{source:"iana"},"application/vnd.motorola.flexsuite.ttc":{source:"iana"},"application/vnd.motorola.flexsuite.wem":{source:"iana"},"application/vnd.motorola.iprm":{source:"iana"},"application/vnd.mozilla.xul+xml":{source:"iana",compressible:!0,extensions:["xul"]},"application/vnd.ms-3mfdocument":{source:"iana"},"application/vnd.ms-artgalry":{source:"iana",extensions:["cil"]},"application/vnd.ms-asf":{source:"iana"},"application/vnd.ms-cab-compressed":{source:"iana",extensions:["cab"]},"application/vnd.ms-color.iccprofile":{source:"apache"},"application/vnd.ms-excel":{source:"iana",compressible:!1,extensions:["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{source:"iana",extensions:["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{source:"iana",extensions:["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{source:"iana",extensions:["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{source:"iana",extensions:["xltm"]},"application/vnd.ms-fontobject":{source:"iana",compressible:!0,extensions:["eot"]},"application/vnd.ms-htmlhelp":{source:"iana",extensions:["chm"]},"application/vnd.ms-ims":{source:"iana",extensions:["ims"]},"application/vnd.ms-lrm":{source:"iana",extensions:["lrm"]},"application/vnd.ms-office.activex+xml":{source:"iana",compressible:!0},"application/vnd.ms-officetheme":{source:"iana",extensions:["thmx"]},"application/vnd.ms-opentype":{source:"apache",compressible:!0},"application/vnd.ms-outlook":{compressible:!1,extensions:["msg"]},"application/vnd.ms-package.obfuscated-opentype":{source:"apache"},"application/vnd.ms-pki.seccat":{source:"apache",extensions:["cat"]},"application/vnd.ms-pki.stl":{source:"apache",extensions:["stl"]},"application/vnd.ms-playready.initiator+xml":{source:"iana",compressible:!0},"application/vnd.ms-powerpoint":{source:"iana",compressible:!1,extensions:["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{source:"iana",extensions:["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{source:"iana",extensions:["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{source:"iana",extensions:["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{source:"iana",extensions:["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{source:"iana",extensions:["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{source:"iana",compressible:!0},"application/vnd.ms-printing.printticket+xml":{source:"apache",compressible:!0},"application/vnd.ms-printschematicket+xml":{source:"iana",compressible:!0},"application/vnd.ms-project":{source:"iana",extensions:["mpp","mpt"]},"application/vnd.ms-tnef":{source:"iana"},"application/vnd.ms-windows.devicepairing":{source:"iana"},"application/vnd.ms-windows.nwprinting.oob":{source:"iana"},"application/vnd.ms-windows.printerpairing":{source:"iana"},"application/vnd.ms-windows.wsd.oob":{source:"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.lic-resp":{source:"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.meter-resp":{source:"iana"},"application/vnd.ms-word.document.macroenabled.12":{source:"iana",extensions:["docm"]},"application/vnd.ms-word.template.macroenabled.12":{source:"iana",extensions:["dotm"]},"application/vnd.ms-works":{source:"iana",extensions:["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{source:"iana",extensions:["wpl"]},"application/vnd.ms-xpsdocument":{source:"iana",compressible:!1,extensions:["xps"]},"application/vnd.msa-disk-image":{source:"iana"},"application/vnd.mseq":{source:"iana",extensions:["mseq"]},"application/vnd.msign":{source:"iana"},"application/vnd.multiad.creator":{source:"iana"},"application/vnd.multiad.creator.cif":{source:"iana"},"application/vnd.music-niff":{source:"iana"},"application/vnd.musician":{source:"iana",extensions:["mus"]},"application/vnd.muvee.style":{source:"iana",extensions:["msty"]},"application/vnd.mynfc":{source:"iana",extensions:["taglet"]},"application/vnd.nacamar.ybrid+json":{source:"iana",compressible:!0},"application/vnd.ncd.control":{source:"iana"},"application/vnd.ncd.reference":{source:"iana"},"application/vnd.nearst.inv+json":{source:"iana",compressible:!0},"application/vnd.nebumind.line":{source:"iana"},"application/vnd.nervana":{source:"iana"},"application/vnd.netfpx":{source:"iana"},"application/vnd.neurolanguage.nlu":{source:"iana",extensions:["nlu"]},"application/vnd.nimn":{source:"iana"},"application/vnd.nintendo.nitro.rom":{source:"iana"},"application/vnd.nintendo.snes.rom":{source:"iana"},"application/vnd.nitf":{source:"iana",extensions:["ntf","nitf"]},"application/vnd.noblenet-directory":{source:"iana",extensions:["nnd"]},"application/vnd.noblenet-sealer":{source:"iana",extensions:["nns"]},"application/vnd.noblenet-web":{source:"iana",extensions:["nnw"]},"application/vnd.nokia.catalogs":{source:"iana"},"application/vnd.nokia.conml+wbxml":{source:"iana"},"application/vnd.nokia.conml+xml":{source:"iana",compressible:!0},"application/vnd.nokia.iptv.config+xml":{source:"iana",compressible:!0},"application/vnd.nokia.isds-radio-presets":{source:"iana"},"application/vnd.nokia.landmark+wbxml":{source:"iana"},"application/vnd.nokia.landmark+xml":{source:"iana",compressible:!0},"application/vnd.nokia.landmarkcollection+xml":{source:"iana",compressible:!0},"application/vnd.nokia.n-gage.ac+xml":{source:"iana",compressible:!0,extensions:["ac"]},"application/vnd.nokia.n-gage.data":{source:"iana",extensions:["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{source:"iana",extensions:["n-gage"]},"application/vnd.nokia.ncd":{source:"iana"},"application/vnd.nokia.pcd+wbxml":{source:"iana"},"application/vnd.nokia.pcd+xml":{source:"iana",compressible:!0},"application/vnd.nokia.radio-preset":{source:"iana",extensions:["rpst"]},"application/vnd.nokia.radio-presets":{source:"iana",extensions:["rpss"]},"application/vnd.novadigm.edm":{source:"iana",extensions:["edm"]},"application/vnd.novadigm.edx":{source:"iana",extensions:["edx"]},"application/vnd.novadigm.ext":{source:"iana",extensions:["ext"]},"application/vnd.ntt-local.content-share":{source:"iana"},"application/vnd.ntt-local.file-transfer":{source:"iana"},"application/vnd.ntt-local.ogw_remote-access":{source:"iana"},"application/vnd.ntt-local.sip-ta_remote":{source:"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{source:"iana"},"application/vnd.oasis.opendocument.chart":{source:"iana",extensions:["odc"]},"application/vnd.oasis.opendocument.chart-template":{source:"iana",extensions:["otc"]},"application/vnd.oasis.opendocument.database":{source:"iana",extensions:["odb"]},"application/vnd.oasis.opendocument.formula":{source:"iana",extensions:["odf"]},"application/vnd.oasis.opendocument.formula-template":{source:"iana",extensions:["odft"]},"application/vnd.oasis.opendocument.graphics":{source:"iana",compressible:!1,extensions:["odg"]},"application/vnd.oasis.opendocument.graphics-template":{source:"iana",extensions:["otg"]},"application/vnd.oasis.opendocument.image":{source:"iana",extensions:["odi"]},"application/vnd.oasis.opendocument.image-template":{source:"iana",extensions:["oti"]},"application/vnd.oasis.opendocument.presentation":{source:"iana",compressible:!1,extensions:["odp"]},"application/vnd.oasis.opendocument.presentation-template":{source:"iana",extensions:["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{source:"iana",compressible:!1,extensions:["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{source:"iana",extensions:["ots"]},"application/vnd.oasis.opendocument.text":{source:"iana",compressible:!1,extensions:["odt"]},"application/vnd.oasis.opendocument.text-master":{source:"iana",extensions:["odm"]},"application/vnd.oasis.opendocument.text-template":{source:"iana",extensions:["ott"]},"application/vnd.oasis.opendocument.text-web":{source:"iana",extensions:["oth"]},"application/vnd.obn":{source:"iana"},"application/vnd.ocf+cbor":{source:"iana"},"application/vnd.oci.image.manifest.v1+json":{source:"iana",compressible:!0},"application/vnd.oftn.l10n+json":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessdownload+xml":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessstreaming+xml":{source:"iana",compressible:!0},"application/vnd.oipf.cspg-hexbinary":{source:"iana"},"application/vnd.oipf.dae.svg+xml":{source:"iana",compressible:!0},"application/vnd.oipf.dae.xhtml+xml":{source:"iana",compressible:!0},"application/vnd.oipf.mippvcontrolmessage+xml":{source:"iana",compressible:!0},"application/vnd.oipf.pae.gem":{source:"iana"},"application/vnd.oipf.spdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.oipf.spdlist+xml":{source:"iana",compressible:!0},"application/vnd.oipf.ueprofile+xml":{source:"iana",compressible:!0},"application/vnd.oipf.userprofile+xml":{source:"iana",compressible:!0},"application/vnd.olpc-sugar":{source:"iana",extensions:["xo"]},"application/vnd.oma-scws-config":{source:"iana"},"application/vnd.oma-scws-http-request":{source:"iana"},"application/vnd.oma-scws-http-response":{source:"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.drm-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.imd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.ltkm":{source:"iana"},"application/vnd.oma.bcast.notification+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.provisioningtrigger":{source:"iana"},"application/vnd.oma.bcast.sgboot":{source:"iana"},"application/vnd.oma.bcast.sgdd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sgdu":{source:"iana"},"application/vnd.oma.bcast.simple-symbol-container":{source:"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sprov+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.stkm":{source:"iana"},"application/vnd.oma.cab-address-book+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-feature-handler+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-pcc+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-subs-invite+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-user-prefs+xml":{source:"iana",compressible:!0},"application/vnd.oma.dcd":{source:"iana"},"application/vnd.oma.dcdc":{source:"iana"},"application/vnd.oma.dd2+xml":{source:"iana",compressible:!0,extensions:["dd2"]},"application/vnd.oma.drm.risd+xml":{source:"iana",compressible:!0},"application/vnd.oma.group-usage-list+xml":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+cbor":{source:"iana"},"application/vnd.oma.lwm2m+json":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+tlv":{source:"iana"},"application/vnd.oma.pal+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.detailed-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.final-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.groups+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.invocation-descriptor+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.optimized-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.push":{source:"iana"},"application/vnd.oma.scidm.messages+xml":{source:"iana",compressible:!0},"application/vnd.oma.xcap-directory+xml":{source:"iana",compressible:!0},"application/vnd.omads-email+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omads-file+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omads-folder+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omaloc-supl-init":{source:"iana"},"application/vnd.onepager":{source:"iana"},"application/vnd.onepagertamp":{source:"iana"},"application/vnd.onepagertamx":{source:"iana"},"application/vnd.onepagertat":{source:"iana"},"application/vnd.onepagertatp":{source:"iana"},"application/vnd.onepagertatx":{source:"iana"},"application/vnd.openblox.game+xml":{source:"iana",compressible:!0,extensions:["obgx"]},"application/vnd.openblox.game-binary":{source:"iana"},"application/vnd.openeye.oeb":{source:"iana"},"application/vnd.openofficeorg.extension":{source:"apache",extensions:["oxt"]},"application/vnd.openstreetmap.data+xml":{source:"iana",compressible:!0,extensions:["osm"]},"application/vnd.opentimestamps.ots":{source:"iana"},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawing+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{source:"iana",compressible:!1,extensions:["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slide":{source:"iana",extensions:["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{source:"iana",extensions:["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.template":{source:"iana",extensions:["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{source:"iana",compressible:!1,extensions:["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{source:"iana",extensions:["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.theme+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.vmldrawing":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{source:"iana",compressible:!1,extensions:["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{source:"iana",extensions:["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.core-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.relationships+xml":{source:"iana",compressible:!0},"application/vnd.oracle.resource+json":{source:"iana",compressible:!0},"application/vnd.orange.indata":{source:"iana"},"application/vnd.osa.netdeploy":{source:"iana"},"application/vnd.osgeo.mapguide.package":{source:"iana",extensions:["mgp"]},"application/vnd.osgi.bundle":{source:"iana"},"application/vnd.osgi.dp":{source:"iana",extensions:["dp"]},"application/vnd.osgi.subsystem":{source:"iana",extensions:["esa"]},"application/vnd.otps.ct-kip+xml":{source:"iana",compressible:!0},"application/vnd.oxli.countgraph":{source:"iana"},"application/vnd.pagerduty+json":{source:"iana",compressible:!0},"application/vnd.palm":{source:"iana",extensions:["pdb","pqa","oprc"]},"application/vnd.panoply":{source:"iana"},"application/vnd.paos.xml":{source:"iana"},"application/vnd.patentdive":{source:"iana"},"application/vnd.patientecommsdoc":{source:"iana"},"application/vnd.pawaafile":{source:"iana",extensions:["paw"]},"application/vnd.pcos":{source:"iana"},"application/vnd.pg.format":{source:"iana",extensions:["str"]},"application/vnd.pg.osasli":{source:"iana",extensions:["ei6"]},"application/vnd.piaccess.application-licence":{source:"iana"},"application/vnd.picsel":{source:"iana",extensions:["efif"]},"application/vnd.pmi.widget":{source:"iana",extensions:["wg"]},"application/vnd.poc.group-advertisement+xml":{source:"iana",compressible:!0},"application/vnd.pocketlearn":{source:"iana",extensions:["plf"]},"application/vnd.powerbuilder6":{source:"iana",extensions:["pbd"]},"application/vnd.powerbuilder6-s":{source:"iana"},"application/vnd.powerbuilder7":{source:"iana"},"application/vnd.powerbuilder7-s":{source:"iana"},"application/vnd.powerbuilder75":{source:"iana"},"application/vnd.powerbuilder75-s":{source:"iana"},"application/vnd.preminet":{source:"iana"},"application/vnd.previewsystems.box":{source:"iana",extensions:["box"]},"application/vnd.proteus.magazine":{source:"iana",extensions:["mgz"]},"application/vnd.psfs":{source:"iana"},"application/vnd.publishare-delta-tree":{source:"iana",extensions:["qps"]},"application/vnd.pvi.ptid1":{source:"iana",extensions:["ptid"]},"application/vnd.pwg-multiplexed":{source:"iana"},"application/vnd.pwg-xhtml-print+xml":{source:"iana",compressible:!0},"application/vnd.qualcomm.brew-app-res":{source:"iana"},"application/vnd.quarantainenet":{source:"iana"},"application/vnd.quark.quarkxpress":{source:"iana",extensions:["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{source:"iana"},"application/vnd.radisys.moml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conn+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-stream+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-base+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-detect+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-group+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-speech+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-transform+xml":{source:"iana",compressible:!0},"application/vnd.rainstor.data":{source:"iana"},"application/vnd.rapid":{source:"iana"},"application/vnd.rar":{source:"iana",extensions:["rar"]},"application/vnd.realvnc.bed":{source:"iana",extensions:["bed"]},"application/vnd.recordare.musicxml":{source:"iana",extensions:["mxl"]},"application/vnd.recordare.musicxml+xml":{source:"iana",compressible:!0,extensions:["musicxml"]},"application/vnd.renlearn.rlprint":{source:"iana"},"application/vnd.resilient.logic":{source:"iana"},"application/vnd.restful+json":{source:"iana",compressible:!0},"application/vnd.rig.cryptonote":{source:"iana",extensions:["cryptonote"]},"application/vnd.rim.cod":{source:"apache",extensions:["cod"]},"application/vnd.rn-realmedia":{source:"apache",extensions:["rm"]},"application/vnd.rn-realmedia-vbr":{source:"apache",extensions:["rmvb"]},"application/vnd.route66.link66+xml":{source:"iana",compressible:!0,extensions:["link66"]},"application/vnd.rs-274x":{source:"iana"},"application/vnd.ruckus.download":{source:"iana"},"application/vnd.s3sms":{source:"iana"},"application/vnd.sailingtracker.track":{source:"iana",extensions:["st"]},"application/vnd.sar":{source:"iana"},"application/vnd.sbm.cid":{source:"iana"},"application/vnd.sbm.mid2":{source:"iana"},"application/vnd.scribus":{source:"iana"},"application/vnd.sealed.3df":{source:"iana"},"application/vnd.sealed.csf":{source:"iana"},"application/vnd.sealed.doc":{source:"iana"},"application/vnd.sealed.eml":{source:"iana"},"application/vnd.sealed.mht":{source:"iana"},"application/vnd.sealed.net":{source:"iana"},"application/vnd.sealed.ppt":{source:"iana"},"application/vnd.sealed.tiff":{source:"iana"},"application/vnd.sealed.xls":{source:"iana"},"application/vnd.sealedmedia.softseal.html":{source:"iana"},"application/vnd.sealedmedia.softseal.pdf":{source:"iana"},"application/vnd.seemail":{source:"iana",extensions:["see"]},"application/vnd.seis+json":{source:"iana",compressible:!0},"application/vnd.sema":{source:"iana",extensions:["sema"]},"application/vnd.semd":{source:"iana",extensions:["semd"]},"application/vnd.semf":{source:"iana",extensions:["semf"]},"application/vnd.shade-save-file":{source:"iana"},"application/vnd.shana.informed.formdata":{source:"iana",extensions:["ifm"]},"application/vnd.shana.informed.formtemplate":{source:"iana",extensions:["itp"]},"application/vnd.shana.informed.interchange":{source:"iana",extensions:["iif"]},"application/vnd.shana.informed.package":{source:"iana",extensions:["ipk"]},"application/vnd.shootproof+json":{source:"iana",compressible:!0},"application/vnd.shopkick+json":{source:"iana",compressible:!0},"application/vnd.shp":{source:"iana"},"application/vnd.shx":{source:"iana"},"application/vnd.sigrok.session":{source:"iana"},"application/vnd.simtech-mindmapper":{source:"iana",extensions:["twd","twds"]},"application/vnd.siren+json":{source:"iana",compressible:!0},"application/vnd.smaf":{source:"iana",extensions:["mmf"]},"application/vnd.smart.notebook":{source:"iana"},"application/vnd.smart.teacher":{source:"iana",extensions:["teacher"]},"application/vnd.snesdev-page-table":{source:"iana"},"application/vnd.software602.filler.form+xml":{source:"iana",compressible:!0,extensions:["fo"]},"application/vnd.software602.filler.form-xml-zip":{source:"iana"},"application/vnd.solent.sdkm+xml":{source:"iana",compressible:!0,extensions:["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{source:"iana",extensions:["dxp"]},"application/vnd.spotfire.sfs":{source:"iana",extensions:["sfs"]},"application/vnd.sqlite3":{source:"iana"},"application/vnd.sss-cod":{source:"iana"},"application/vnd.sss-dtf":{source:"iana"},"application/vnd.sss-ntf":{source:"iana"},"application/vnd.stardivision.calc":{source:"apache",extensions:["sdc"]},"application/vnd.stardivision.draw":{source:"apache",extensions:["sda"]},"application/vnd.stardivision.impress":{source:"apache",extensions:["sdd"]},"application/vnd.stardivision.math":{source:"apache",extensions:["smf"]},"application/vnd.stardivision.writer":{source:"apache",extensions:["sdw","vor"]},"application/vnd.stardivision.writer-global":{source:"apache",extensions:["sgl"]},"application/vnd.stepmania.package":{source:"iana",extensions:["smzip"]},"application/vnd.stepmania.stepchart":{source:"iana",extensions:["sm"]},"application/vnd.street-stream":{source:"iana"},"application/vnd.sun.wadl+xml":{source:"iana",compressible:!0,extensions:["wadl"]},"application/vnd.sun.xml.calc":{source:"apache",extensions:["sxc"]},"application/vnd.sun.xml.calc.template":{source:"apache",extensions:["stc"]},"application/vnd.sun.xml.draw":{source:"apache",extensions:["sxd"]},"application/vnd.sun.xml.draw.template":{source:"apache",extensions:["std"]},"application/vnd.sun.xml.impress":{source:"apache",extensions:["sxi"]},"application/vnd.sun.xml.impress.template":{source:"apache",extensions:["sti"]},"application/vnd.sun.xml.math":{source:"apache",extensions:["sxm"]},"application/vnd.sun.xml.writer":{source:"apache",extensions:["sxw"]},"application/vnd.sun.xml.writer.global":{source:"apache",extensions:["sxg"]},"application/vnd.sun.xml.writer.template":{source:"apache",extensions:["stw"]},"application/vnd.sus-calendar":{source:"iana",extensions:["sus","susp"]},"application/vnd.svd":{source:"iana",extensions:["svd"]},"application/vnd.swiftview-ics":{source:"iana"},"application/vnd.sycle+xml":{source:"iana",compressible:!0},"application/vnd.syft+json":{source:"iana",compressible:!0},"application/vnd.symbian.install":{source:"apache",extensions:["sis","sisx"]},"application/vnd.syncml+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["xsm"]},"application/vnd.syncml.dm+wbxml":{source:"iana",charset:"UTF-8",extensions:["bdm"]},"application/vnd.syncml.dm+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["xdm"]},"application/vnd.syncml.dm.notification":{source:"iana"},"application/vnd.syncml.dmddf+wbxml":{source:"iana"},"application/vnd.syncml.dmddf+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{source:"iana"},"application/vnd.syncml.dmtnds+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.syncml.ds.notification":{source:"iana"},"application/vnd.tableschema+json":{source:"iana",compressible:!0},"application/vnd.tao.intent-module-archive":{source:"iana",extensions:["tao"]},"application/vnd.tcpdump.pcap":{source:"iana",extensions:["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{source:"iana",compressible:!0},"application/vnd.tmd.mediaflex.api+xml":{source:"iana",compressible:!0},"application/vnd.tml":{source:"iana"},"application/vnd.tmobile-livetv":{source:"iana",extensions:["tmo"]},"application/vnd.tri.onesource":{source:"iana"},"application/vnd.trid.tpt":{source:"iana",extensions:["tpt"]},"application/vnd.triscape.mxs":{source:"iana",extensions:["mxs"]},"application/vnd.trueapp":{source:"iana",extensions:["tra"]},"application/vnd.truedoc":{source:"iana"},"application/vnd.ubisoft.webplayer":{source:"iana"},"application/vnd.ufdl":{source:"iana",extensions:["ufd","ufdl"]},"application/vnd.uiq.theme":{source:"iana",extensions:["utz"]},"application/vnd.umajin":{source:"iana",extensions:["umj"]},"application/vnd.unity":{source:"iana",extensions:["unityweb"]},"application/vnd.uoml+xml":{source:"iana",compressible:!0,extensions:["uoml"]},"application/vnd.uplanet.alert":{source:"iana"},"application/vnd.uplanet.alert-wbxml":{source:"iana"},"application/vnd.uplanet.bearer-choice":{source:"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{source:"iana"},"application/vnd.uplanet.cacheop":{source:"iana"},"application/vnd.uplanet.cacheop-wbxml":{source:"iana"},"application/vnd.uplanet.channel":{source:"iana"},"application/vnd.uplanet.channel-wbxml":{source:"iana"},"application/vnd.uplanet.list":{source:"iana"},"application/vnd.uplanet.list-wbxml":{source:"iana"},"application/vnd.uplanet.listcmd":{source:"iana"},"application/vnd.uplanet.listcmd-wbxml":{source:"iana"},"application/vnd.uplanet.signal":{source:"iana"},"application/vnd.uri-map":{source:"iana"},"application/vnd.valve.source.material":{source:"iana"},"application/vnd.vcx":{source:"iana",extensions:["vcx"]},"application/vnd.vd-study":{source:"iana"},"application/vnd.vectorworks":{source:"iana"},"application/vnd.vel+json":{source:"iana",compressible:!0},"application/vnd.verimatrix.vcas":{source:"iana"},"application/vnd.veritone.aion+json":{source:"iana",compressible:!0},"application/vnd.veryant.thin":{source:"iana"},"application/vnd.ves.encrypted":{source:"iana"},"application/vnd.vidsoft.vidconference":{source:"iana"},"application/vnd.visio":{source:"iana",extensions:["vsd","vst","vss","vsw"]},"application/vnd.visionary":{source:"iana",extensions:["vis"]},"application/vnd.vividence.scriptfile":{source:"iana"},"application/vnd.vsf":{source:"iana",extensions:["vsf"]},"application/vnd.wap.sic":{source:"iana"},"application/vnd.wap.slc":{source:"iana"},"application/vnd.wap.wbxml":{source:"iana",charset:"UTF-8",extensions:["wbxml"]},"application/vnd.wap.wmlc":{source:"iana",extensions:["wmlc"]},"application/vnd.wap.wmlscriptc":{source:"iana",extensions:["wmlsc"]},"application/vnd.webturbo":{source:"iana",extensions:["wtb"]},"application/vnd.wfa.dpp":{source:"iana"},"application/vnd.wfa.p2p":{source:"iana"},"application/vnd.wfa.wsc":{source:"iana"},"application/vnd.windows.devicepairing":{source:"iana"},"application/vnd.wmc":{source:"iana"},"application/vnd.wmf.bootstrap":{source:"iana"},"application/vnd.wolfram.mathematica":{source:"iana"},"application/vnd.wolfram.mathematica.package":{source:"iana"},"application/vnd.wolfram.player":{source:"iana",extensions:["nbp"]},"application/vnd.wordperfect":{source:"iana",extensions:["wpd"]},"application/vnd.wqd":{source:"iana",extensions:["wqd"]},"application/vnd.wrq-hp3000-labelled":{source:"iana"},"application/vnd.wt.stf":{source:"iana",extensions:["stf"]},"application/vnd.wv.csp+wbxml":{source:"iana"},"application/vnd.wv.csp+xml":{source:"iana",compressible:!0},"application/vnd.wv.ssp+xml":{source:"iana",compressible:!0},"application/vnd.xacml+json":{source:"iana",compressible:!0},"application/vnd.xara":{source:"iana",extensions:["xar"]},"application/vnd.xfdl":{source:"iana",extensions:["xfdl"]},"application/vnd.xfdl.webform":{source:"iana"},"application/vnd.xmi+xml":{source:"iana",compressible:!0},"application/vnd.xmpie.cpkg":{source:"iana"},"application/vnd.xmpie.dpkg":{source:"iana"},"application/vnd.xmpie.plan":{source:"iana"},"application/vnd.xmpie.ppkg":{source:"iana"},"application/vnd.xmpie.xlim":{source:"iana"},"application/vnd.yamaha.hv-dic":{source:"iana",extensions:["hvd"]},"application/vnd.yamaha.hv-script":{source:"iana",extensions:["hvs"]},"application/vnd.yamaha.hv-voice":{source:"iana",extensions:["hvp"]},"application/vnd.yamaha.openscoreformat":{source:"iana",extensions:["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{source:"iana",compressible:!0,extensions:["osfpvg"]},"application/vnd.yamaha.remote-setup":{source:"iana"},"application/vnd.yamaha.smaf-audio":{source:"iana",extensions:["saf"]},"application/vnd.yamaha.smaf-phrase":{source:"iana",extensions:["spf"]},"application/vnd.yamaha.through-ngn":{source:"iana"},"application/vnd.yamaha.tunnel-udpencap":{source:"iana"},"application/vnd.yaoweme":{source:"iana"},"application/vnd.yellowriver-custom-menu":{source:"iana",extensions:["cmp"]},"application/vnd.youtube.yt":{source:"iana"},"application/vnd.zul":{source:"iana",extensions:["zir","zirz"]},"application/vnd.zzazz.deck+xml":{source:"iana",compressible:!0,extensions:["zaz"]},"application/voicexml+xml":{source:"iana",compressible:!0,extensions:["vxml"]},"application/voucher-cms+json":{source:"iana",compressible:!0},"application/vq-rtcpxr":{source:"iana"},"application/wasm":{source:"iana",compressible:!0,extensions:["wasm"]},"application/watcherinfo+xml":{source:"iana",compressible:!0,extensions:["wif"]},"application/webpush-options+json":{source:"iana",compressible:!0},"application/whoispp-query":{source:"iana"},"application/whoispp-response":{source:"iana"},"application/widget":{source:"iana",extensions:["wgt"]},"application/winhlp":{source:"apache",extensions:["hlp"]},"application/wita":{source:"iana"},"application/wordperfect5.1":{source:"iana"},"application/wsdl+xml":{source:"iana",compressible:!0,extensions:["wsdl"]},"application/wspolicy+xml":{source:"iana",compressible:!0,extensions:["wspolicy"]},"application/x-7z-compressed":{source:"apache",compressible:!1,extensions:["7z"]},"application/x-abiword":{source:"apache",extensions:["abw"]},"application/x-ace-compressed":{source:"apache",extensions:["ace"]},"application/x-amf":{source:"apache"},"application/x-apple-diskimage":{source:"apache",extensions:["dmg"]},"application/x-arj":{compressible:!1,extensions:["arj"]},"application/x-authorware-bin":{source:"apache",extensions:["aab","x32","u32","vox"]},"application/x-authorware-map":{source:"apache",extensions:["aam"]},"application/x-authorware-seg":{source:"apache",extensions:["aas"]},"application/x-bcpio":{source:"apache",extensions:["bcpio"]},"application/x-bdoc":{compressible:!1,extensions:["bdoc"]},"application/x-bittorrent":{source:"apache",extensions:["torrent"]},"application/x-blorb":{source:"apache",extensions:["blb","blorb"]},"application/x-bzip":{source:"apache",compressible:!1,extensions:["bz"]},"application/x-bzip2":{source:"apache",compressible:!1,extensions:["bz2","boz"]},"application/x-cbr":{source:"apache",extensions:["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{source:"apache",extensions:["vcd"]},"application/x-cfs-compressed":{source:"apache",extensions:["cfs"]},"application/x-chat":{source:"apache",extensions:["chat"]},"application/x-chess-pgn":{source:"apache",extensions:["pgn"]},"application/x-chrome-extension":{extensions:["crx"]},"application/x-cocoa":{source:"nginx",extensions:["cco"]},"application/x-compress":{source:"apache"},"application/x-conference":{source:"apache",extensions:["nsc"]},"application/x-cpio":{source:"apache",extensions:["cpio"]},"application/x-csh":{source:"apache",extensions:["csh"]},"application/x-deb":{compressible:!1},"application/x-debian-package":{source:"apache",extensions:["deb","udeb"]},"application/x-dgc-compressed":{source:"apache",extensions:["dgc"]},"application/x-director":{source:"apache",extensions:["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{source:"apache",extensions:["wad"]},"application/x-dtbncx+xml":{source:"apache",compressible:!0,extensions:["ncx"]},"application/x-dtbook+xml":{source:"apache",compressible:!0,extensions:["dtb"]},"application/x-dtbresource+xml":{source:"apache",compressible:!0,extensions:["res"]},"application/x-dvi":{source:"apache",compressible:!1,extensions:["dvi"]},"application/x-envoy":{source:"apache",extensions:["evy"]},"application/x-eva":{source:"apache",extensions:["eva"]},"application/x-font-bdf":{source:"apache",extensions:["bdf"]},"application/x-font-dos":{source:"apache"},"application/x-font-framemaker":{source:"apache"},"application/x-font-ghostscript":{source:"apache",extensions:["gsf"]},"application/x-font-libgrx":{source:"apache"},"application/x-font-linux-psf":{source:"apache",extensions:["psf"]},"application/x-font-pcf":{source:"apache",extensions:["pcf"]},"application/x-font-snf":{source:"apache",extensions:["snf"]},"application/x-font-speedo":{source:"apache"},"application/x-font-sunos-news":{source:"apache"},"application/x-font-type1":{source:"apache",extensions:["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{source:"apache"},"application/x-freearc":{source:"apache",extensions:["arc"]},"application/x-futuresplash":{source:"apache",extensions:["spl"]},"application/x-gca-compressed":{source:"apache",extensions:["gca"]},"application/x-glulx":{source:"apache",extensions:["ulx"]},"application/x-gnumeric":{source:"apache",extensions:["gnumeric"]},"application/x-gramps-xml":{source:"apache",extensions:["gramps"]},"application/x-gtar":{source:"apache",extensions:["gtar"]},"application/x-gzip":{source:"apache"},"application/x-hdf":{source:"apache",extensions:["hdf"]},"application/x-httpd-php":{compressible:!0,extensions:["php"]},"application/x-install-instructions":{source:"apache",extensions:["install"]},"application/x-iso9660-image":{source:"apache",extensions:["iso"]},"application/x-iwork-keynote-sffkey":{extensions:["key"]},"application/x-iwork-numbers-sffnumbers":{extensions:["numbers"]},"application/x-iwork-pages-sffpages":{extensions:["pages"]},"application/x-java-archive-diff":{source:"nginx",extensions:["jardiff"]},"application/x-java-jnlp-file":{source:"apache",compressible:!1,extensions:["jnlp"]},"application/x-javascript":{compressible:!0},"application/x-keepass2":{extensions:["kdbx"]},"application/x-latex":{source:"apache",compressible:!1,extensions:["latex"]},"application/x-lua-bytecode":{extensions:["luac"]},"application/x-lzh-compressed":{source:"apache",extensions:["lzh","lha"]},"application/x-makeself":{source:"nginx",extensions:["run"]},"application/x-mie":{source:"apache",extensions:["mie"]},"application/x-mobipocket-ebook":{source:"apache",extensions:["prc","mobi"]},"application/x-mpegurl":{compressible:!1},"application/x-ms-application":{source:"apache",extensions:["application"]},"application/x-ms-shortcut":{source:"apache",extensions:["lnk"]},"application/x-ms-wmd":{source:"apache",extensions:["wmd"]},"application/x-ms-wmz":{source:"apache",extensions:["wmz"]},"application/x-ms-xbap":{source:"apache",extensions:["xbap"]},"application/x-msaccess":{source:"apache",extensions:["mdb"]},"application/x-msbinder":{source:"apache",extensions:["obd"]},"application/x-mscardfile":{source:"apache",extensions:["crd"]},"application/x-msclip":{source:"apache",extensions:["clp"]},"application/x-msdos-program":{extensions:["exe"]},"application/x-msdownload":{source:"apache",extensions:["exe","dll","com","bat","msi"]},"application/x-msmediaview":{source:"apache",extensions:["mvb","m13","m14"]},"application/x-msmetafile":{source:"apache",extensions:["wmf","wmz","emf","emz"]},"application/x-msmoney":{source:"apache",extensions:["mny"]},"application/x-mspublisher":{source:"apache",extensions:["pub"]},"application/x-msschedule":{source:"apache",extensions:["scd"]},"application/x-msterminal":{source:"apache",extensions:["trm"]},"application/x-mswrite":{source:"apache",extensions:["wri"]},"application/x-netcdf":{source:"apache",extensions:["nc","cdf"]},"application/x-ns-proxy-autoconfig":{compressible:!0,extensions:["pac"]},"application/x-nzb":{source:"apache",extensions:["nzb"]},"application/x-perl":{source:"nginx",extensions:["pl","pm"]},"application/x-pilot":{source:"nginx",extensions:["prc","pdb"]},"application/x-pkcs12":{source:"apache",compressible:!1,extensions:["p12","pfx"]},"application/x-pkcs7-certificates":{source:"apache",extensions:["p7b","spc"]},"application/x-pkcs7-certreqresp":{source:"apache",extensions:["p7r"]},"application/x-pki-message":{source:"iana"},"application/x-rar-compressed":{source:"apache",compressible:!1,extensions:["rar"]},"application/x-redhat-package-manager":{source:"nginx",extensions:["rpm"]},"application/x-research-info-systems":{source:"apache",extensions:["ris"]},"application/x-sea":{source:"nginx",extensions:["sea"]},"application/x-sh":{source:"apache",compressible:!0,extensions:["sh"]},"application/x-shar":{source:"apache",extensions:["shar"]},"application/x-shockwave-flash":{source:"apache",compressible:!1,extensions:["swf"]},"application/x-silverlight-app":{source:"apache",extensions:["xap"]},"application/x-sql":{source:"apache",extensions:["sql"]},"application/x-stuffit":{source:"apache",compressible:!1,extensions:["sit"]},"application/x-stuffitx":{source:"apache",extensions:["sitx"]},"application/x-subrip":{source:"apache",extensions:["srt"]},"application/x-sv4cpio":{source:"apache",extensions:["sv4cpio"]},"application/x-sv4crc":{source:"apache",extensions:["sv4crc"]},"application/x-t3vm-image":{source:"apache",extensions:["t3"]},"application/x-tads":{source:"apache",extensions:["gam"]},"application/x-tar":{source:"apache",compressible:!0,extensions:["tar"]},"application/x-tcl":{source:"apache",extensions:["tcl","tk"]},"application/x-tex":{source:"apache",extensions:["tex"]},"application/x-tex-tfm":{source:"apache",extensions:["tfm"]},"application/x-texinfo":{source:"apache",extensions:["texinfo","texi"]},"application/x-tgif":{source:"apache",extensions:["obj"]},"application/x-ustar":{source:"apache",extensions:["ustar"]},"application/x-virtualbox-hdd":{compressible:!0,extensions:["hdd"]},"application/x-virtualbox-ova":{compressible:!0,extensions:["ova"]},"application/x-virtualbox-ovf":{compressible:!0,extensions:["ovf"]},"application/x-virtualbox-vbox":{compressible:!0,extensions:["vbox"]},"application/x-virtualbox-vbox-extpack":{compressible:!1,extensions:["vbox-extpack"]},"application/x-virtualbox-vdi":{compressible:!0,extensions:["vdi"]},"application/x-virtualbox-vhd":{compressible:!0,extensions:["vhd"]},"application/x-virtualbox-vmdk":{compressible:!0,extensions:["vmdk"]},"application/x-wais-source":{source:"apache",extensions:["src"]},"application/x-web-app-manifest+json":{compressible:!0,extensions:["webapp"]},"application/x-www-form-urlencoded":{source:"iana",compressible:!0},"application/x-x509-ca-cert":{source:"iana",extensions:["der","crt","pem"]},"application/x-x509-ca-ra-cert":{source:"iana"},"application/x-x509-next-ca-cert":{source:"iana"},"application/x-xfig":{source:"apache",extensions:["fig"]},"application/x-xliff+xml":{source:"apache",compressible:!0,extensions:["xlf"]},"application/x-xpinstall":{source:"apache",compressible:!1,extensions:["xpi"]},"application/x-xz":{source:"apache",extensions:["xz"]},"application/x-zmachine":{source:"apache",extensions:["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{source:"iana"},"application/xacml+xml":{source:"iana",compressible:!0},"application/xaml+xml":{source:"apache",compressible:!0,extensions:["xaml"]},"application/xcap-att+xml":{source:"iana",compressible:!0,extensions:["xav"]},"application/xcap-caps+xml":{source:"iana",compressible:!0,extensions:["xca"]},"application/xcap-diff+xml":{source:"iana",compressible:!0,extensions:["xdf"]},"application/xcap-el+xml":{source:"iana",compressible:!0,extensions:["xel"]},"application/xcap-error+xml":{source:"iana",compressible:!0},"application/xcap-ns+xml":{source:"iana",compressible:!0,extensions:["xns"]},"application/xcon-conference-info+xml":{source:"iana",compressible:!0},"application/xcon-conference-info-diff+xml":{source:"iana",compressible:!0},"application/xenc+xml":{source:"iana",compressible:!0,extensions:["xenc"]},"application/xhtml+xml":{source:"iana",compressible:!0,extensions:["xhtml","xht"]},"application/xhtml-voice+xml":{source:"apache",compressible:!0},"application/xliff+xml":{source:"iana",compressible:!0,extensions:["xlf"]},"application/xml":{source:"iana",compressible:!0,extensions:["xml","xsl","xsd","rng"]},"application/xml-dtd":{source:"iana",compressible:!0,extensions:["dtd"]},"application/xml-external-parsed-entity":{source:"iana"},"application/xml-patch+xml":{source:"iana",compressible:!0},"application/xmpp+xml":{source:"iana",compressible:!0},"application/xop+xml":{source:"iana",compressible:!0,extensions:["xop"]},"application/xproc+xml":{source:"apache",compressible:!0,extensions:["xpl"]},"application/xslt+xml":{source:"iana",compressible:!0,extensions:["xsl","xslt"]},"application/xspf+xml":{source:"apache",compressible:!0,extensions:["xspf"]},"application/xv+xml":{source:"iana",compressible:!0,extensions:["mxml","xhvml","xvml","xvm"]},"application/yang":{source:"iana",extensions:["yang"]},"application/yang-data+json":{source:"iana",compressible:!0},"application/yang-data+xml":{source:"iana",compressible:!0},"application/yang-patch+json":{source:"iana",compressible:!0},"application/yang-patch+xml":{source:"iana",compressible:!0},"application/yin+xml":{source:"iana",compressible:!0,extensions:["yin"]},"application/zip":{source:"iana",compressible:!1,extensions:["zip"]},"application/zlib":{source:"iana"},"application/zstd":{source:"iana"},"audio/1d-interleaved-parityfec":{source:"iana"},"audio/32kadpcm":{source:"iana"},"audio/3gpp":{source:"iana",compressible:!1,extensions:["3gpp"]},"audio/3gpp2":{source:"iana"},"audio/aac":{source:"iana"},"audio/ac3":{source:"iana"},"audio/adpcm":{source:"apache",extensions:["adp"]},"audio/amr":{source:"iana",extensions:["amr"]},"audio/amr-wb":{source:"iana"},"audio/amr-wb+":{source:"iana"},"audio/aptx":{source:"iana"},"audio/asc":{source:"iana"},"audio/atrac-advanced-lossless":{source:"iana"},"audio/atrac-x":{source:"iana"},"audio/atrac3":{source:"iana"},"audio/basic":{source:"iana",compressible:!1,extensions:["au","snd"]},"audio/bv16":{source:"iana"},"audio/bv32":{source:"iana"},"audio/clearmode":{source:"iana"},"audio/cn":{source:"iana"},"audio/dat12":{source:"iana"},"audio/dls":{source:"iana"},"audio/dsr-es201108":{source:"iana"},"audio/dsr-es202050":{source:"iana"},"audio/dsr-es202211":{source:"iana"},"audio/dsr-es202212":{source:"iana"},"audio/dv":{source:"iana"},"audio/dvi4":{source:"iana"},"audio/eac3":{source:"iana"},"audio/encaprtp":{source:"iana"},"audio/evrc":{source:"iana"},"audio/evrc-qcp":{source:"iana"},"audio/evrc0":{source:"iana"},"audio/evrc1":{source:"iana"},"audio/evrcb":{source:"iana"},"audio/evrcb0":{source:"iana"},"audio/evrcb1":{source:"iana"},"audio/evrcnw":{source:"iana"},"audio/evrcnw0":{source:"iana"},"audio/evrcnw1":{source:"iana"},"audio/evrcwb":{source:"iana"},"audio/evrcwb0":{source:"iana"},"audio/evrcwb1":{source:"iana"},"audio/evs":{source:"iana"},"audio/flexfec":{source:"iana"},"audio/fwdred":{source:"iana"},"audio/g711-0":{source:"iana"},"audio/g719":{source:"iana"},"audio/g722":{source:"iana"},"audio/g7221":{source:"iana"},"audio/g723":{source:"iana"},"audio/g726-16":{source:"iana"},"audio/g726-24":{source:"iana"},"audio/g726-32":{source:"iana"},"audio/g726-40":{source:"iana"},"audio/g728":{source:"iana"},"audio/g729":{source:"iana"},"audio/g7291":{source:"iana"},"audio/g729d":{source:"iana"},"audio/g729e":{source:"iana"},"audio/gsm":{source:"iana"},"audio/gsm-efr":{source:"iana"},"audio/gsm-hr-08":{source:"iana"},"audio/ilbc":{source:"iana"},"audio/ip-mr_v2.5":{source:"iana"},"audio/isac":{source:"apache"},"audio/l16":{source:"iana"},"audio/l20":{source:"iana"},"audio/l24":{source:"iana",compressible:!1},"audio/l8":{source:"iana"},"audio/lpc":{source:"iana"},"audio/melp":{source:"iana"},"audio/melp1200":{source:"iana"},"audio/melp2400":{source:"iana"},"audio/melp600":{source:"iana"},"audio/mhas":{source:"iana"},"audio/midi":{source:"apache",extensions:["mid","midi","kar","rmi"]},"audio/mobile-xmf":{source:"iana",extensions:["mxmf"]},"audio/mp3":{compressible:!1,extensions:["mp3"]},"audio/mp4":{source:"iana",compressible:!1,extensions:["m4a","mp4a"]},"audio/mp4a-latm":{source:"iana"},"audio/mpa":{source:"iana"},"audio/mpa-robust":{source:"iana"},"audio/mpeg":{source:"iana",compressible:!1,extensions:["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{source:"iana"},"audio/musepack":{source:"apache"},"audio/ogg":{source:"iana",compressible:!1,extensions:["oga","ogg","spx","opus"]},"audio/opus":{source:"iana"},"audio/parityfec":{source:"iana"},"audio/pcma":{source:"iana"},"audio/pcma-wb":{source:"iana"},"audio/pcmu":{source:"iana"},"audio/pcmu-wb":{source:"iana"},"audio/prs.sid":{source:"iana"},"audio/qcelp":{source:"iana"},"audio/raptorfec":{source:"iana"},"audio/red":{source:"iana"},"audio/rtp-enc-aescm128":{source:"iana"},"audio/rtp-midi":{source:"iana"},"audio/rtploopback":{source:"iana"},"audio/rtx":{source:"iana"},"audio/s3m":{source:"apache",extensions:["s3m"]},"audio/scip":{source:"iana"},"audio/silk":{source:"apache",extensions:["sil"]},"audio/smv":{source:"iana"},"audio/smv-qcp":{source:"iana"},"audio/smv0":{source:"iana"},"audio/sofa":{source:"iana"},"audio/sp-midi":{source:"iana"},"audio/speex":{source:"iana"},"audio/t140c":{source:"iana"},"audio/t38":{source:"iana"},"audio/telephone-event":{source:"iana"},"audio/tetra_acelp":{source:"iana"},"audio/tetra_acelp_bb":{source:"iana"},"audio/tone":{source:"iana"},"audio/tsvcis":{source:"iana"},"audio/uemclip":{source:"iana"},"audio/ulpfec":{source:"iana"},"audio/usac":{source:"iana"},"audio/vdvi":{source:"iana"},"audio/vmr-wb":{source:"iana"},"audio/vnd.3gpp.iufp":{source:"iana"},"audio/vnd.4sb":{source:"iana"},"audio/vnd.audiokoz":{source:"iana"},"audio/vnd.celp":{source:"iana"},"audio/vnd.cisco.nse":{source:"iana"},"audio/vnd.cmles.radio-events":{source:"iana"},"audio/vnd.cns.anp1":{source:"iana"},"audio/vnd.cns.inf1":{source:"iana"},"audio/vnd.dece.audio":{source:"iana",extensions:["uva","uvva"]},"audio/vnd.digital-winds":{source:"iana",extensions:["eol"]},"audio/vnd.dlna.adts":{source:"iana"},"audio/vnd.dolby.heaac.1":{source:"iana"},"audio/vnd.dolby.heaac.2":{source:"iana"},"audio/vnd.dolby.mlp":{source:"iana"},"audio/vnd.dolby.mps":{source:"iana"},"audio/vnd.dolby.pl2":{source:"iana"},"audio/vnd.dolby.pl2x":{source:"iana"},"audio/vnd.dolby.pl2z":{source:"iana"},"audio/vnd.dolby.pulse.1":{source:"iana"},"audio/vnd.dra":{source:"iana",extensions:["dra"]},"audio/vnd.dts":{source:"iana",extensions:["dts"]},"audio/vnd.dts.hd":{source:"iana",extensions:["dtshd"]},"audio/vnd.dts.uhd":{source:"iana"},"audio/vnd.dvb.file":{source:"iana"},"audio/vnd.everad.plj":{source:"iana"},"audio/vnd.hns.audio":{source:"iana"},"audio/vnd.lucent.voice":{source:"iana",extensions:["lvp"]},"audio/vnd.ms-playready.media.pya":{source:"iana",extensions:["pya"]},"audio/vnd.nokia.mobile-xmf":{source:"iana"},"audio/vnd.nortel.vbk":{source:"iana"},"audio/vnd.nuera.ecelp4800":{source:"iana",extensions:["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{source:"iana",extensions:["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{source:"iana",extensions:["ecelp9600"]},"audio/vnd.octel.sbc":{source:"iana"},"audio/vnd.presonus.multitrack":{source:"iana"},"audio/vnd.qcelp":{source:"iana"},"audio/vnd.rhetorex.32kadpcm":{source:"iana"},"audio/vnd.rip":{source:"iana",extensions:["rip"]},"audio/vnd.rn-realaudio":{compressible:!1},"audio/vnd.sealedmedia.softseal.mpeg":{source:"iana"},"audio/vnd.vmx.cvsd":{source:"iana"},"audio/vnd.wave":{compressible:!1},"audio/vorbis":{source:"iana",compressible:!1},"audio/vorbis-config":{source:"iana"},"audio/wav":{compressible:!1,extensions:["wav"]},"audio/wave":{compressible:!1,extensions:["wav"]},"audio/webm":{source:"apache",compressible:!1,extensions:["weba"]},"audio/x-aac":{source:"apache",compressible:!1,extensions:["aac"]},"audio/x-aiff":{source:"apache",extensions:["aif","aiff","aifc"]},"audio/x-caf":{source:"apache",compressible:!1,extensions:["caf"]},"audio/x-flac":{source:"apache",extensions:["flac"]},"audio/x-m4a":{source:"nginx",extensions:["m4a"]},"audio/x-matroska":{source:"apache",extensions:["mka"]},"audio/x-mpegurl":{source:"apache",extensions:["m3u"]},"audio/x-ms-wax":{source:"apache",extensions:["wax"]},"audio/x-ms-wma":{source:"apache",extensions:["wma"]},"audio/x-pn-realaudio":{source:"apache",extensions:["ram","ra"]},"audio/x-pn-realaudio-plugin":{source:"apache",extensions:["rmp"]},"audio/x-realaudio":{source:"nginx",extensions:["ra"]},"audio/x-tta":{source:"apache"},"audio/x-wav":{source:"apache",extensions:["wav"]},"audio/xm":{source:"apache",extensions:["xm"]},"chemical/x-cdx":{source:"apache",extensions:["cdx"]},"chemical/x-cif":{source:"apache",extensions:["cif"]},"chemical/x-cmdf":{source:"apache",extensions:["cmdf"]},"chemical/x-cml":{source:"apache",extensions:["cml"]},"chemical/x-csml":{source:"apache",extensions:["csml"]},"chemical/x-pdb":{source:"apache"},"chemical/x-xyz":{source:"apache",extensions:["xyz"]},"font/collection":{source:"iana",extensions:["ttc"]},"font/otf":{source:"iana",compressible:!0,extensions:["otf"]},"font/sfnt":{source:"iana"},"font/ttf":{source:"iana",compressible:!0,extensions:["ttf"]},"font/woff":{source:"iana",extensions:["woff"]},"font/woff2":{source:"iana",extensions:["woff2"]},"image/aces":{source:"iana",extensions:["exr"]},"image/apng":{compressible:!1,extensions:["apng"]},"image/avci":{source:"iana",extensions:["avci"]},"image/avcs":{source:"iana",extensions:["avcs"]},"image/avif":{source:"iana",compressible:!1,extensions:["avif"]},"image/bmp":{source:"iana",compressible:!0,extensions:["bmp"]},"image/cgm":{source:"iana",extensions:["cgm"]},"image/dicom-rle":{source:"iana",extensions:["drle"]},"image/emf":{source:"iana",extensions:["emf"]},"image/fits":{source:"iana",extensions:["fits"]},"image/g3fax":{source:"iana",extensions:["g3"]},"image/gif":{source:"iana",compressible:!1,extensions:["gif"]},"image/heic":{source:"iana",extensions:["heic"]},"image/heic-sequence":{source:"iana",extensions:["heics"]},"image/heif":{source:"iana",extensions:["heif"]},"image/heif-sequence":{source:"iana",extensions:["heifs"]},"image/hej2k":{source:"iana",extensions:["hej2"]},"image/hsj2":{source:"iana",extensions:["hsj2"]},"image/ief":{source:"iana",extensions:["ief"]},"image/jls":{source:"iana",extensions:["jls"]},"image/jp2":{source:"iana",compressible:!1,extensions:["jp2","jpg2"]},"image/jpeg":{source:"iana",compressible:!1,extensions:["jpeg","jpg","jpe"]},"image/jph":{source:"iana",extensions:["jph"]},"image/jphc":{source:"iana",extensions:["jhc"]},"image/jpm":{source:"iana",compressible:!1,extensions:["jpm"]},"image/jpx":{source:"iana",compressible:!1,extensions:["jpx","jpf"]},"image/jxr":{source:"iana",extensions:["jxr"]},"image/jxra":{source:"iana",extensions:["jxra"]},"image/jxrs":{source:"iana",extensions:["jxrs"]},"image/jxs":{source:"iana",extensions:["jxs"]},"image/jxsc":{source:"iana",extensions:["jxsc"]},"image/jxsi":{source:"iana",extensions:["jxsi"]},"image/jxss":{source:"iana",extensions:["jxss"]},"image/ktx":{source:"iana",extensions:["ktx"]},"image/ktx2":{source:"iana",extensions:["ktx2"]},"image/naplps":{source:"iana"},"image/pjpeg":{compressible:!1},"image/png":{source:"iana",compressible:!1,extensions:["png"]},"image/prs.btif":{source:"iana",extensions:["btif"]},"image/prs.pti":{source:"iana",extensions:["pti"]},"image/pwg-raster":{source:"iana"},"image/sgi":{source:"apache",extensions:["sgi"]},"image/svg+xml":{source:"iana",compressible:!0,extensions:["svg","svgz"]},"image/t38":{source:"iana",extensions:["t38"]},"image/tiff":{source:"iana",compressible:!1,extensions:["tif","tiff"]},"image/tiff-fx":{source:"iana",extensions:["tfx"]},"image/vnd.adobe.photoshop":{source:"iana",compressible:!0,extensions:["psd"]},"image/vnd.airzip.accelerator.azv":{source:"iana",extensions:["azv"]},"image/vnd.cns.inf2":{source:"iana"},"image/vnd.dece.graphic":{source:"iana",extensions:["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{source:"iana",extensions:["djvu","djv"]},"image/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"image/vnd.dwg":{source:"iana",extensions:["dwg"]},"image/vnd.dxf":{source:"iana",extensions:["dxf"]},"image/vnd.fastbidsheet":{source:"iana",extensions:["fbs"]},"image/vnd.fpx":{source:"iana",extensions:["fpx"]},"image/vnd.fst":{source:"iana",extensions:["fst"]},"image/vnd.fujixerox.edmics-mmr":{source:"iana",extensions:["mmr"]},"image/vnd.fujixerox.edmics-rlc":{source:"iana",extensions:["rlc"]},"image/vnd.globalgraphics.pgb":{source:"iana"},"image/vnd.microsoft.icon":{source:"iana",compressible:!0,extensions:["ico"]},"image/vnd.mix":{source:"iana"},"image/vnd.mozilla.apng":{source:"iana"},"image/vnd.ms-dds":{compressible:!0,extensions:["dds"]},"image/vnd.ms-modi":{source:"iana",extensions:["mdi"]},"image/vnd.ms-photo":{source:"apache",extensions:["wdp"]},"image/vnd.net-fpx":{source:"iana",extensions:["npx"]},"image/vnd.pco.b16":{source:"iana",extensions:["b16"]},"image/vnd.radiance":{source:"iana"},"image/vnd.sealed.png":{source:"iana"},"image/vnd.sealedmedia.softseal.gif":{source:"iana"},"image/vnd.sealedmedia.softseal.jpg":{source:"iana"},"image/vnd.svf":{source:"iana"},"image/vnd.tencent.tap":{source:"iana",extensions:["tap"]},"image/vnd.valve.source.texture":{source:"iana",extensions:["vtf"]},"image/vnd.wap.wbmp":{source:"iana",extensions:["wbmp"]},"image/vnd.xiff":{source:"iana",extensions:["xif"]},"image/vnd.zbrush.pcx":{source:"iana",extensions:["pcx"]},"image/webp":{source:"apache",extensions:["webp"]},"image/wmf":{source:"iana",extensions:["wmf"]},"image/x-3ds":{source:"apache",extensions:["3ds"]},"image/x-cmu-raster":{source:"apache",extensions:["ras"]},"image/x-cmx":{source:"apache",extensions:["cmx"]},"image/x-freehand":{source:"apache",extensions:["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{source:"apache",compressible:!0,extensions:["ico"]},"image/x-jng":{source:"nginx",extensions:["jng"]},"image/x-mrsid-image":{source:"apache",extensions:["sid"]},"image/x-ms-bmp":{source:"nginx",compressible:!0,extensions:["bmp"]},"image/x-pcx":{source:"apache",extensions:["pcx"]},"image/x-pict":{source:"apache",extensions:["pic","pct"]},"image/x-portable-anymap":{source:"apache",extensions:["pnm"]},"image/x-portable-bitmap":{source:"apache",extensions:["pbm"]},"image/x-portable-graymap":{source:"apache",extensions:["pgm"]},"image/x-portable-pixmap":{source:"apache",extensions:["ppm"]},"image/x-rgb":{source:"apache",extensions:["rgb"]},"image/x-tga":{source:"apache",extensions:["tga"]},"image/x-xbitmap":{source:"apache",extensions:["xbm"]},"image/x-xcf":{compressible:!1},"image/x-xpixmap":{source:"apache",extensions:["xpm"]},"image/x-xwindowdump":{source:"apache",extensions:["xwd"]},"message/cpim":{source:"iana"},"message/delivery-status":{source:"iana"},"message/disposition-notification":{source:"iana",extensions:["disposition-notification"]},"message/external-body":{source:"iana"},"message/feedback-report":{source:"iana"},"message/global":{source:"iana",extensions:["u8msg"]},"message/global-delivery-status":{source:"iana",extensions:["u8dsn"]},"message/global-disposition-notification":{source:"iana",extensions:["u8mdn"]},"message/global-headers":{source:"iana",extensions:["u8hdr"]},"message/http":{source:"iana",compressible:!1},"message/imdn+xml":{source:"iana",compressible:!0},"message/news":{source:"iana"},"message/partial":{source:"iana",compressible:!1},"message/rfc822":{source:"iana",compressible:!0,extensions:["eml","mime"]},"message/s-http":{source:"iana"},"message/sip":{source:"iana"},"message/sipfrag":{source:"iana"},"message/tracking-status":{source:"iana"},"message/vnd.si.simp":{source:"iana"},"message/vnd.wfa.wsc":{source:"iana",extensions:["wsc"]},"model/3mf":{source:"iana",extensions:["3mf"]},"model/e57":{source:"iana"},"model/gltf+json":{source:"iana",compressible:!0,extensions:["gltf"]},"model/gltf-binary":{source:"iana",compressible:!0,extensions:["glb"]},"model/iges":{source:"iana",compressible:!1,extensions:["igs","iges"]},"model/mesh":{source:"iana",compressible:!1,extensions:["msh","mesh","silo"]},"model/mtl":{source:"iana",extensions:["mtl"]},"model/obj":{source:"iana",extensions:["obj"]},"model/step":{source:"iana"},"model/step+xml":{source:"iana",compressible:!0,extensions:["stpx"]},"model/step+zip":{source:"iana",compressible:!1,extensions:["stpz"]},"model/step-xml+zip":{source:"iana",compressible:!1,extensions:["stpxz"]},"model/stl":{source:"iana",extensions:["stl"]},"model/vnd.collada+xml":{source:"iana",compressible:!0,extensions:["dae"]},"model/vnd.dwf":{source:"iana",extensions:["dwf"]},"model/vnd.flatland.3dml":{source:"iana"},"model/vnd.gdl":{source:"iana",extensions:["gdl"]},"model/vnd.gs-gdl":{source:"apache"},"model/vnd.gs.gdl":{source:"iana"},"model/vnd.gtw":{source:"iana",extensions:["gtw"]},"model/vnd.moml+xml":{source:"iana",compressible:!0},"model/vnd.mts":{source:"iana",extensions:["mts"]},"model/vnd.opengex":{source:"iana",extensions:["ogex"]},"model/vnd.parasolid.transmit.binary":{source:"iana",extensions:["x_b"]},"model/vnd.parasolid.transmit.text":{source:"iana",extensions:["x_t"]},"model/vnd.pytha.pyox":{source:"iana"},"model/vnd.rosette.annotated-data-model":{source:"iana"},"model/vnd.sap.vds":{source:"iana",extensions:["vds"]},"model/vnd.usdz+zip":{source:"iana",compressible:!1,extensions:["usdz"]},"model/vnd.valve.source.compiled-map":{source:"iana",extensions:["bsp"]},"model/vnd.vtu":{source:"iana",extensions:["vtu"]},"model/vrml":{source:"iana",compressible:!1,extensions:["wrl","vrml"]},"model/x3d+binary":{source:"apache",compressible:!1,extensions:["x3db","x3dbz"]},"model/x3d+fastinfoset":{source:"iana",extensions:["x3db"]},"model/x3d+vrml":{source:"apache",compressible:!1,extensions:["x3dv","x3dvz"]},"model/x3d+xml":{source:"iana",compressible:!0,extensions:["x3d","x3dz"]},"model/x3d-vrml":{source:"iana",extensions:["x3dv"]},"multipart/alternative":{source:"iana",compressible:!1},"multipart/appledouble":{source:"iana"},"multipart/byteranges":{source:"iana"},"multipart/digest":{source:"iana"},"multipart/encrypted":{source:"iana",compressible:!1},"multipart/form-data":{source:"iana",compressible:!1},"multipart/header-set":{source:"iana"},"multipart/mixed":{source:"iana"},"multipart/multilingual":{source:"iana"},"multipart/parallel":{source:"iana"},"multipart/related":{source:"iana",compressible:!1},"multipart/report":{source:"iana"},"multipart/signed":{source:"iana",compressible:!1},"multipart/vnd.bint.med-plus":{source:"iana"},"multipart/voice-message":{source:"iana"},"multipart/x-mixed-replace":{source:"iana"},"text/1d-interleaved-parityfec":{source:"iana"},"text/cache-manifest":{source:"iana",compressible:!0,extensions:["appcache","manifest"]},"text/calendar":{source:"iana",extensions:["ics","ifb"]},"text/calender":{compressible:!0},"text/cmd":{compressible:!0},"text/coffeescript":{extensions:["coffee","litcoffee"]},"text/cql":{source:"iana"},"text/cql-expression":{source:"iana"},"text/cql-identifier":{source:"iana"},"text/css":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["css"]},"text/csv":{source:"iana",compressible:!0,extensions:["csv"]},"text/csv-schema":{source:"iana"},"text/directory":{source:"iana"},"text/dns":{source:"iana"},"text/ecmascript":{source:"iana"},"text/encaprtp":{source:"iana"},"text/enriched":{source:"iana"},"text/fhirpath":{source:"iana"},"text/flexfec":{source:"iana"},"text/fwdred":{source:"iana"},"text/gff3":{source:"iana"},"text/grammar-ref-list":{source:"iana"},"text/html":{source:"iana",compressible:!0,extensions:["html","htm","shtml"]},"text/jade":{extensions:["jade"]},"text/javascript":{source:"iana",compressible:!0},"text/jcr-cnd":{source:"iana"},"text/jsx":{compressible:!0,extensions:["jsx"]},"text/less":{compressible:!0,extensions:["less"]},"text/markdown":{source:"iana",compressible:!0,extensions:["markdown","md"]},"text/mathml":{source:"nginx",extensions:["mml"]},"text/mdx":{compressible:!0,extensions:["mdx"]},"text/mizar":{source:"iana"},"text/n3":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["n3"]},"text/parameters":{source:"iana",charset:"UTF-8"},"text/parityfec":{source:"iana"},"text/plain":{source:"iana",compressible:!0,extensions:["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{source:"iana",charset:"UTF-8"},"text/prs.fallenstein.rst":{source:"iana"},"text/prs.lines.tag":{source:"iana",extensions:["dsc"]},"text/prs.prop.logic":{source:"iana"},"text/raptorfec":{source:"iana"},"text/red":{source:"iana"},"text/rfc822-headers":{source:"iana"},"text/richtext":{source:"iana",compressible:!0,extensions:["rtx"]},"text/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"text/rtp-enc-aescm128":{source:"iana"},"text/rtploopback":{source:"iana"},"text/rtx":{source:"iana"},"text/sgml":{source:"iana",extensions:["sgml","sgm"]},"text/shaclc":{source:"iana"},"text/shex":{source:"iana",extensions:["shex"]},"text/slim":{extensions:["slim","slm"]},"text/spdx":{source:"iana",extensions:["spdx"]},"text/strings":{source:"iana"},"text/stylus":{extensions:["stylus","styl"]},"text/t140":{source:"iana"},"text/tab-separated-values":{source:"iana",compressible:!0,extensions:["tsv"]},"text/troff":{source:"iana",extensions:["t","tr","roff","man","me","ms"]},"text/turtle":{source:"iana",charset:"UTF-8",extensions:["ttl"]},"text/ulpfec":{source:"iana"},"text/uri-list":{source:"iana",compressible:!0,extensions:["uri","uris","urls"]},"text/vcard":{source:"iana",compressible:!0,extensions:["vcard"]},"text/vnd.a":{source:"iana"},"text/vnd.abc":{source:"iana"},"text/vnd.ascii-art":{source:"iana"},"text/vnd.curl":{source:"iana",extensions:["curl"]},"text/vnd.curl.dcurl":{source:"apache",extensions:["dcurl"]},"text/vnd.curl.mcurl":{source:"apache",extensions:["mcurl"]},"text/vnd.curl.scurl":{source:"apache",extensions:["scurl"]},"text/vnd.debian.copyright":{source:"iana",charset:"UTF-8"},"text/vnd.dmclientscript":{source:"iana"},"text/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"text/vnd.esmertec.theme-descriptor":{source:"iana",charset:"UTF-8"},"text/vnd.familysearch.gedcom":{source:"iana",extensions:["ged"]},"text/vnd.ficlab.flt":{source:"iana"},"text/vnd.fly":{source:"iana",extensions:["fly"]},"text/vnd.fmi.flexstor":{source:"iana",extensions:["flx"]},"text/vnd.gml":{source:"iana"},"text/vnd.graphviz":{source:"iana",extensions:["gv"]},"text/vnd.hans":{source:"iana"},"text/vnd.hgl":{source:"iana"},"text/vnd.in3d.3dml":{source:"iana",extensions:["3dml"]},"text/vnd.in3d.spot":{source:"iana",extensions:["spot"]},"text/vnd.iptc.newsml":{source:"iana"},"text/vnd.iptc.nitf":{source:"iana"},"text/vnd.latex-z":{source:"iana"},"text/vnd.motorola.reflex":{source:"iana"},"text/vnd.ms-mediapackage":{source:"iana"},"text/vnd.net2phone.commcenter.command":{source:"iana"},"text/vnd.radisys.msml-basic-layout":{source:"iana"},"text/vnd.senx.warpscript":{source:"iana"},"text/vnd.si.uricatalogue":{source:"iana"},"text/vnd.sosi":{source:"iana"},"text/vnd.sun.j2me.app-descriptor":{source:"iana",charset:"UTF-8",extensions:["jad"]},"text/vnd.trolltech.linguist":{source:"iana",charset:"UTF-8"},"text/vnd.wap.si":{source:"iana"},"text/vnd.wap.sl":{source:"iana"},"text/vnd.wap.wml":{source:"iana",extensions:["wml"]},"text/vnd.wap.wmlscript":{source:"iana",extensions:["wmls"]},"text/vtt":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["vtt"]},"text/x-asm":{source:"apache",extensions:["s","asm"]},"text/x-c":{source:"apache",extensions:["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{source:"nginx",extensions:["htc"]},"text/x-fortran":{source:"apache",extensions:["f","for","f77","f90"]},"text/x-gwt-rpc":{compressible:!0},"text/x-handlebars-template":{extensions:["hbs"]},"text/x-java-source":{source:"apache",extensions:["java"]},"text/x-jquery-tmpl":{compressible:!0},"text/x-lua":{extensions:["lua"]},"text/x-markdown":{compressible:!0,extensions:["mkd"]},"text/x-nfo":{source:"apache",extensions:["nfo"]},"text/x-opml":{source:"apache",extensions:["opml"]},"text/x-org":{compressible:!0,extensions:["org"]},"text/x-pascal":{source:"apache",extensions:["p","pas"]},"text/x-processing":{compressible:!0,extensions:["pde"]},"text/x-sass":{extensions:["sass"]},"text/x-scss":{extensions:["scss"]},"text/x-setext":{source:"apache",extensions:["etx"]},"text/x-sfv":{source:"apache",extensions:["sfv"]},"text/x-suse-ymp":{compressible:!0,extensions:["ymp"]},"text/x-uuencode":{source:"apache",extensions:["uu"]},"text/x-vcalendar":{source:"apache",extensions:["vcs"]},"text/x-vcard":{source:"apache",extensions:["vcf"]},"text/xml":{source:"iana",compressible:!0,extensions:["xml"]},"text/xml-external-parsed-entity":{source:"iana"},"text/yaml":{compressible:!0,extensions:["yaml","yml"]},"video/1d-interleaved-parityfec":{source:"iana"},"video/3gpp":{source:"iana",extensions:["3gp","3gpp"]},"video/3gpp-tt":{source:"iana"},"video/3gpp2":{source:"iana",extensions:["3g2"]},"video/av1":{source:"iana"},"video/bmpeg":{source:"iana"},"video/bt656":{source:"iana"},"video/celb":{source:"iana"},"video/dv":{source:"iana"},"video/encaprtp":{source:"iana"},"video/ffv1":{source:"iana"},"video/flexfec":{source:"iana"},"video/h261":{source:"iana",extensions:["h261"]},"video/h263":{source:"iana",extensions:["h263"]},"video/h263-1998":{source:"iana"},"video/h263-2000":{source:"iana"},"video/h264":{source:"iana",extensions:["h264"]},"video/h264-rcdo":{source:"iana"},"video/h264-svc":{source:"iana"},"video/h265":{source:"iana"},"video/iso.segment":{source:"iana",extensions:["m4s"]},"video/jpeg":{source:"iana",extensions:["jpgv"]},"video/jpeg2000":{source:"iana"},"video/jpm":{source:"apache",extensions:["jpm","jpgm"]},"video/jxsv":{source:"iana"},"video/mj2":{source:"iana",extensions:["mj2","mjp2"]},"video/mp1s":{source:"iana"},"video/mp2p":{source:"iana"},"video/mp2t":{source:"iana",extensions:["ts"]},"video/mp4":{source:"iana",compressible:!1,extensions:["mp4","mp4v","mpg4"]},"video/mp4v-es":{source:"iana"},"video/mpeg":{source:"iana",compressible:!1,extensions:["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{source:"iana"},"video/mpv":{source:"iana"},"video/nv":{source:"iana"},"video/ogg":{source:"iana",compressible:!1,extensions:["ogv"]},"video/parityfec":{source:"iana"},"video/pointer":{source:"iana"},"video/quicktime":{source:"iana",compressible:!1,extensions:["qt","mov"]},"video/raptorfec":{source:"iana"},"video/raw":{source:"iana"},"video/rtp-enc-aescm128":{source:"iana"},"video/rtploopback":{source:"iana"},"video/rtx":{source:"iana"},"video/scip":{source:"iana"},"video/smpte291":{source:"iana"},"video/smpte292m":{source:"iana"},"video/ulpfec":{source:"iana"},"video/vc1":{source:"iana"},"video/vc2":{source:"iana"},"video/vnd.cctv":{source:"iana"},"video/vnd.dece.hd":{source:"iana",extensions:["uvh","uvvh"]},"video/vnd.dece.mobile":{source:"iana",extensions:["uvm","uvvm"]},"video/vnd.dece.mp4":{source:"iana"},"video/vnd.dece.pd":{source:"iana",extensions:["uvp","uvvp"]},"video/vnd.dece.sd":{source:"iana",extensions:["uvs","uvvs"]},"video/vnd.dece.video":{source:"iana",extensions:["uvv","uvvv"]},"video/vnd.directv.mpeg":{source:"iana"},"video/vnd.directv.mpeg-tts":{source:"iana"},"video/vnd.dlna.mpeg-tts":{source:"iana"},"video/vnd.dvb.file":{source:"iana",extensions:["dvb"]},"video/vnd.fvt":{source:"iana",extensions:["fvt"]},"video/vnd.hns.video":{source:"iana"},"video/vnd.iptvforum.1dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.1dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.2dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.2dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.ttsavc":{source:"iana"},"video/vnd.iptvforum.ttsmpeg2":{source:"iana"},"video/vnd.motorola.video":{source:"iana"},"video/vnd.motorola.videop":{source:"iana"},"video/vnd.mpegurl":{source:"iana",extensions:["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{source:"iana",extensions:["pyv"]},"video/vnd.nokia.interleaved-multimedia":{source:"iana"},"video/vnd.nokia.mp4vr":{source:"iana"},"video/vnd.nokia.videovoip":{source:"iana"},"video/vnd.objectvideo":{source:"iana"},"video/vnd.radgamettools.bink":{source:"iana"},"video/vnd.radgamettools.smacker":{source:"iana"},"video/vnd.sealed.mpeg1":{source:"iana"},"video/vnd.sealed.mpeg4":{source:"iana"},"video/vnd.sealed.swf":{source:"iana"},"video/vnd.sealedmedia.softseal.mov":{source:"iana"},"video/vnd.uvvu.mp4":{source:"iana",extensions:["uvu","uvvu"]},"video/vnd.vivo":{source:"iana",extensions:["viv"]},"video/vnd.youtube.yt":{source:"iana"},"video/vp8":{source:"iana"},"video/vp9":{source:"iana"},"video/webm":{source:"apache",compressible:!1,extensions:["webm"]},"video/x-f4v":{source:"apache",extensions:["f4v"]},"video/x-fli":{source:"apache",extensions:["fli"]},"video/x-flv":{source:"apache",compressible:!1,extensions:["flv"]},"video/x-m4v":{source:"apache",extensions:["m4v"]},"video/x-matroska":{source:"apache",compressible:!1,extensions:["mkv","mk3d","mks"]},"video/x-mng":{source:"apache",extensions:["mng"]},"video/x-ms-asf":{source:"apache",extensions:["asf","asx"]},"video/x-ms-vob":{source:"apache",extensions:["vob"]},"video/x-ms-wm":{source:"apache",extensions:["wm"]},"video/x-ms-wmv":{source:"apache",compressible:!1,extensions:["wmv"]},"video/x-ms-wmx":{source:"apache",extensions:["wmx"]},"video/x-ms-wvx":{source:"apache",extensions:["wvx"]},"video/x-msvideo":{source:"apache",extensions:["avi"]},"video/x-sgi-movie":{source:"apache",extensions:["movie"]},"video/x-smv":{source:"apache",extensions:["smv"]},"x-conference/x-cooltalk":{source:"apache",extensions:["ice"]},"x-shader/x-fragment":{compressible:!0},"x-shader/x-vertex":{compressible:!0}}})),$p=t((function(e,n){var t,a,i,o=Mp.extname,s=/^\s*([^;\s]*)(?:;|\s|$)/,r=/^text\//i;function c(e){if(!e||"string"!=typeof e)return!1;var n=s.exec(e),t=n&&Ip[n[1].toLowerCase()];return t&&t.charset?t.charset:!(!n||!r.test(n[1]))&&"UTF-8"}n.charset=c,n.charsets={lookup:c},n.contentType=function(e){if(!e||"string"!=typeof e)return!1;var t=-1===e.indexOf("/")?n.lookup(e):e;if(!t)return!1;if(-1===t.indexOf("charset")){var a=n.charset(t);a&&(t+="; charset="+a.toLowerCase())}return t},n.extension=function(e){if(!e||"string"!=typeof e)return!1;var t=s.exec(e),a=t&&n.extensions[t[1].toLowerCase()];return!(!a||!a.length)&&a[0]},n.extensions=Object.create(null),n.lookup=function(e){if(!e||"string"!=typeof e)return!1;var t=o("x."+e).toLowerCase().substr(1);return t&&n.types[t]||!1},n.types=Object.create(null),t=n.extensions,a=n.types,i=["nginx","apache",void 0,"iana"],Object.keys(Ip).forEach((function(e){var n=Ip[e],o=n.extensions;if(o&&o.length){t[e]=o;for(var s=0;s<o.length;s++){var r=o[s];if(a[r]){var c=i.indexOf(Ip[a[r]].source),p=i.indexOf(n.source);if("application/octet-stream"!==a[r]&&(c>p||c===p&&"application/"===a[r].substr(0,12)))continue}a[r]=e}}}))}));$p.charset,$p.charsets,$p.contentType,$p.extension,$p.extensions,$p.lookup,$p.types;var Dp=function(e){var n="function"==typeof setImmediate?setImmediate:"object"==typeof H&&"function"==typeof H.nextTick?H.nextTick:null;n?n(e):setTimeout(e,0)},Zp=function(e){var n=!1;return Dp((function(){n=!0})),function(t,a){n?e(t,a):Dp((function(){e(t,a)}))}},Hp=function(e){Object.keys(e.jobs).forEach(Yp.bind(e)),e.jobs={}};function Yp(e){"function"==typeof this.jobs[e]&&this.jobs[e]()}var Vp=function(e,n,t,a){var i=t.keyedList?t.keyedList[t.index]:t.index;t.jobs[i]=function(e,n,t,a){return 2==e.length?e(t,Zp(a)):e(t,n,Zp(a))}(n,i,e[i],(function(e,n){i in t.jobs&&(delete t.jobs[i],e?Hp(t):t.results[i]=n,a(e,t.results))}))},Wp=function(e,n){var t=!Array.isArray(e),a={index:0,keyedList:t||n?Object.keys(e):null,jobs:{},results:t?{}:[],size:t?Object.keys(e).length:e.length};return n&&a.keyedList.sort(t?n:function(t,a){return n(e[t],e[a])}),a},Kp=function(e){Object.keys(this.jobs).length&&(this.index=this.size,Hp(this),Zp(e)(null,this.results))},Gp=function(e,n,t,a){var i=Wp(e,t);return Vp(e,n,i,(function t(o,s){o?a(o,s):(i.index++,i.index<(i.keyedList||e).length?Vp(e,n,i,t):a(null,i.results))})),Kp.bind(i,a)};function Jp(e,n){return e<n?-1:e>n?1:0}Gp.ascending=Jp,Gp.descending=function(e,n){return-1*Jp(e,n)};var Xp=function(e,n,t){for(var a=Wp(e);a.index<(a.keyedList||e).length;)Vp(e,n,a,(function(e,n){e?t(e,n):0!==Object.keys(a.jobs).length||t(null,a.results)})),a.index++;return Kp.bind(a,t)},Qp=function(e,n){return Object.keys(n).forEach((function(t){e[t]=e[t]||n[t]})),e},el=va.parse,nl=It.Stream,tl=al;function al(e){if(!(this instanceof al))return new al(e);for(var n in this._overheadLength=0,this._valueLength=0,this._valuesToMeasure=[],Cp.call(this),e=e||{})this[n]=e[n]}Zn.inherits(al,Cp),al.LINE_BREAK="\r\n",al.DEFAULT_CONTENT_TYPE="application/octet-stream",al.prototype.append=function(e,n,t){"string"==typeof(t=t||{})&&(t={filename:t});var a=Cp.prototype.append.bind(this);if("number"==typeof n&&(n=""+n),Zn.isArray(n))this._error(new Error("Arrays are not supported."));else{var i=this._multiPartHeader(e,n,t),o=this._multiPartFooter();a(i),a(n),a(o),this._trackLength(i,n,t)}},al.prototype._trackLength=function(e,n,t){var a=0;null!=t.knownLength?a+=+t.knownLength:me.isBuffer(n)?a=n.length:"string"==typeof n&&(a=me.byteLength(n)),this._valueLength+=a,this._overheadLength+=me.byteLength(e)+al.LINE_BREAK.length,n&&(n.path||n.readable&&n.hasOwnProperty("httpVersion")||n instanceof nl)&&(t.knownLength||this._valuesToMeasure.push(n))},al.prototype._lengthRetriever=function(e,n){e.hasOwnProperty("fd")?null!=e.end&&e.end!=1/0&&null!=e.start?n(null,e.end+1-(e.start?e.start:0)):Np.stat(e.path,(function(t,a){var i;t?n(t):(i=a.size-(e.start?e.start:0),n(null,i))})):e.hasOwnProperty("httpVersion")?n(null,+e.headers["content-length"]):e.hasOwnProperty("httpModule")?(e.on("response",(function(t){e.pause(),n(null,+t.headers["content-length"])})),e.resume()):n("Unknown stream")},al.prototype._multiPartHeader=function(e,n,t){if("string"==typeof t.header)return t.header;var a,i=this._getContentDisposition(n,t),o=this._getContentType(n,t),s="",r={"Content-Disposition":["form-data",'name="'+e+'"'].concat(i||[]),"Content-Type":[].concat(o||[])};for(var c in"object"==typeof t.header&&Qp(r,t.header),r)r.hasOwnProperty(c)&&null!=(a=r[c])&&(Array.isArray(a)||(a=[a]),a.length&&(s+=c+": "+a.join("; ")+al.LINE_BREAK));return"--"+this.getBoundary()+al.LINE_BREAK+s+al.LINE_BREAK},al.prototype._getContentDisposition=function(e,n){var t,a;return"string"==typeof n.filepath?t=Mp.normalize(n.filepath).replace(/\\/g,"/"):n.filename||e.name||e.path?t=Mp.basename(n.filename||e.name||e.path):e.readable&&e.hasOwnProperty("httpVersion")&&(t=Mp.basename(e.client._httpMessage.path||"")),t&&(a='filename="'+t+'"'),a},al.prototype._getContentType=function(e,n){var t=n.contentType;return!t&&e.name&&(t=$p.lookup(e.name)),!t&&e.path&&(t=$p.lookup(e.path)),!t&&e.readable&&e.hasOwnProperty("httpVersion")&&(t=e.headers["content-type"]),t||!n.filepath&&!n.filename||(t=$p.lookup(n.filepath||n.filename)),t||"object"!=typeof e||(t=al.DEFAULT_CONTENT_TYPE),t},al.prototype._multiPartFooter=function(){return function(e){var n=al.LINE_BREAK;0===this._streams.length&&(n+=this._lastBoundary()),e(n)}.bind(this)},al.prototype._lastBoundary=function(){return"--"+this.getBoundary()+"--"+al.LINE_BREAK},al.prototype.getHeaders=function(e){var n,t={"content-type":"multipart/form-data; boundary="+this.getBoundary()};for(n in e)e.hasOwnProperty(n)&&(t[n.toLowerCase()]=e[n]);return t},al.prototype.setBoundary=function(e){this._boundary=e},al.prototype.getBoundary=function(){return this._boundary||this._generateBoundary(),this._boundary},al.prototype.getBuffer=function(){for(var e=new me.alloc(0),n=this.getBoundary(),t=0,a=this._streams.length;t<a;t++)"function"!=typeof this._streams[t]&&(e=me.isBuffer(this._streams[t])?me.concat([e,this._streams[t]]):me.concat([e,me.from(this._streams[t])]),"string"==typeof this._streams[t]&&this._streams[t].substring(2,n.length+2)===n||(e=me.concat([e,me.from(al.LINE_BREAK)])));return me.concat([e,me.from(this._lastBoundary())])},al.prototype._generateBoundary=function(){for(var e="--------------------------",n=0;n<24;n++)e+=Math.floor(10*Math.random()).toString(16);this._boundary=e},al.prototype.getLengthSync=function(){var e=this._overheadLength+this._valueLength;return this._streams.length&&(e+=this._lastBoundary().length),this.hasKnownLength()||this._error(new Error("Cannot calculate proper length in synchronous way.")),e},al.prototype.hasKnownLength=function(){var e=!0;return this._valuesToMeasure.length&&(e=!1),e},al.prototype.getLength=function(e){var n=this._overheadLength+this._valueLength;this._streams.length&&(n+=this._lastBoundary().length),this._valuesToMeasure.length?Xp(this._valuesToMeasure,this._lengthRetriever,(function(t,a){t?e(t):(a.forEach((function(e){n+=e})),e(null,n))})):H.nextTick(e.bind(this,null,n))},al.prototype.submit=function(e,n){var t,a,i={method:"post"};return"string"==typeof e?(e=el(e),a=Qp({port:e.port,path:e.pathname,host:e.hostname,protocol:e.protocol},i)):(a=Qp(e,i)).port||(a.port="https:"==a.protocol?443:80),a.headers=this.getHeaders(e.headers),a.protocol,t=Ma.request(a),this.getLength(function(e,a){if(e&&"Unknown stream"!==e)this._error(e);else if(a&&t.setHeader("Content-Length",a),this.pipe(t),n){var i,o=function(e,a){return t.removeListener("error",o),t.removeListener("response",i),n.call(this,e,a)};i=o.bind(this,null),t.on("error",o),t.on("response",i)}}.bind(this)),t},al.prototype._error=function(e){this.error||(this.error=e,this.pause(),this.emit("error",e))},al.prototype.toString=function(){return"[object FormData]"};var il=t((function(n,t){var a=e&&e.__awaiter||function(e,n,t,a){return new(t||(t=Promise))((function(i,o){function s(e){try{c(a.next(e))}catch(e){o(e)}}function r(e){try{c(a.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,r)}c((a=a.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(tl),r=o(i),c=o(xp);class p extends c.default{constructor(e,n){super(e,n),this.url=`${this.url}/archives`}sendFile(e,n){return a(this,void 0,void 0,(function*(){const t=new s.default;return n.org&&t.append("org",n.org),n.orgUnit&&t.append("orgUnit",n.orgUnit),n.session&&t.append("session",n.session),n.type&&t.append("type",n.type),t.append("filename",e),this.request.post(`${this.url}`,t,{headers:Object.assign({Authorization:this.token?`Bearer ${this.token}`:""},t.getHeaders())}).then((e=>e.data)).catch((e=>{throw new r.default(e.response.data,e.response.status)}))}))}get(e){return a(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new r.default(e.response.data,e.response.status)}))}))}download(e){return a(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}/download`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new r.default(e.response.data,e.response.status)}))}))}}t.default=p}));n(il);var ol=t((function(n,t){var a=e&&e.__createBinding||(Object.create?function(e,n,t,a){void 0===a&&(a=t);var i=Object.getOwnPropertyDescriptor(n,t);i&&!("get"in i?!n.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,a,i)}:function(e,n,t,a){void 0===a&&(a=t),e[a]=n[t]}),o=e&&e.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),s=e&&e.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&a(n,e,t);return o(n,e),n},r=e&&e.__awaiter||function(e,n,t,a){return new(t||(t=Promise))((function(i,o){function s(e){try{c(a.next(e))}catch(e){o(e)}}function r(e){try{c(a.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,r)}c((a=a.apply(e,n||[])).next())}))},c=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const p=s(vp),l=c(i);t.default=class{constructor(e){this.url=e,this.request=new p.Request}loginByOrg(e){return r(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/auth/org`,e).then((e=>e.data)).catch((e=>{throw new l.default(e.response.data,e.response.status)}))}))}loginByUser(e){return r(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/auth/user`,e).then((e=>e.data)).catch((e=>{throw new l.default(e.response.data,e.response.status)}))}))}}}));n(ol);var sl=t((function(n,t){var a=e&&e.__awaiter||function(e,n,t,a){return new(t||(t=Promise))((function(i,o){function s(e){try{c(a.next(e))}catch(e){o(e)}}function r(e){try{c(a.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,r)}c((a=a.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(i),r=o(xp);class c extends r.default{constructor(e,n){super(e,n),this.url=`${this.url}/users`}create(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}get(e){return a(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new s.default(e.response.data,e.response.status)}))}))}list(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/list`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}update(e,n){return a(this,void 0,void 0,(function*(){return this.request.patch(`${this.url}/${e}`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e){return a(this,void 0,void 0,(function*(){return this.request.delete(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}verify(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/verify`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}reactivate(e){return a(this,void 0,void 0,(function*(){return this.request.patch(`${this.url}/${e}/reactivate`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}}t.default=c}));n(sl);var rl=t((function(n,t){var a=e&&e.__awaiter||function(e,n,t,a){return new(t||(t=Promise))((function(i,o){function s(e){try{c(a.next(e))}catch(e){o(e)}}function r(e){try{c(a.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,r)}c((a=a.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(i),r=o(xp);class c extends r.default{constructor(e,n){super(e,n),this.url=`${this.url}/prescriptions`}create(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}createCustom(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/custom`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:"","Content-Type":"multipart/form-data"}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}get(e){return a(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}list(e){return a(this,void 0,void 0,(function*(){return this.request.get(`${this.url}`,{params:e,headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}update(e,n){return a(this,void 0,void 0,(function*(){return this.request.patch(`${this.url}/${e}`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e){return a(this,void 0,void 0,(function*(){return this.request.delete(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}listCertificates(){return a(this,void 0,void 0,(function*(){return this.request.get("http://localhost:8791/api/certificates").then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}signLocal(e,n){return a(this,void 0,void 0,(function*(){return this.request.post("http://localhost:8791/api/sign",{certId:e,algorithm:"SHA256",dataToSignArray:[{key:1,dataToSign:n}]}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}sign(e,n){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/${e}/sign`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}download(e){return a(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}/download`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""},responseType:"arraybuffer"}).then((e=>nn.Buffer.from(e.data,"base64"))).catch((e=>{throw console.log(e),new s.default(e.response&&e.response.data?e.response.data:"Could not download file",e.response&&e.response.status?e.response.status:500)}))}))}}t.default=c}));n(rl);var cl=t((function(n,t){var a=e&&e.__awaiter||function(e,n,t,a){return new(t||(t=Promise))((function(i,o){function s(e){try{c(a.next(e))}catch(e){o(e)}}function r(e){try{c(a.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,r)}c((a=a.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(i),r=o(xp);class c extends r.default{constructor(e,n){super(e,n),this.url=`${this.url}/recordings`}get(e){return a(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new s.default(e.response.data,e.response.status)}))}))}list(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/list`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e){return a(this,void 0,void 0,(function*(){return this.request.delete(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}download(e){return a(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}/download`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new s.default(e.response.data,e.response.status)}))}))}}t.default=c}));n(cl);var pl=t((function(n,t){var a=e&&e.__awaiter||function(e,n,t,a){return new(t||(t=Promise))((function(i,o){function s(e){try{c(a.next(e))}catch(e){o(e)}}function r(e){try{c(a.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,r)}c((a=a.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(i),r=o(xp);class c extends r.default{constructor(e,n){super(e,n),this.url=`${this.url}/skins`}create(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}get(e){return a(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new s.default(e.response.data,e.response.status)}))}))}list(){return a(this,void 0,void 0,(function*(){return this.request.get(`${this.url}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}update(e,n){return a(this,void 0,void 0,(function*(){return this.request.put(`${this.url}/${e}`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e){return a(this,void 0,void 0,(function*(){return this.request.delete(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}}t.default=c}));n(pl);var ll=t((function(n,t){var a=e&&e.__awaiter||function(e,n,t,a){return new(t||(t=Promise))((function(i,o){function s(e){try{c(a.next(e))}catch(e){o(e)}}function r(e){try{c(a.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,r)}c((a=a.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(i),r=o(xp);class c extends r.default{constructor(e,n){super(e,n),this.url=`${this.url}/Profiles`}create(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}get(e){return a(this,void 0,void 0,(function*(){return this.request.get(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw console.log(e),new s.default(e.response.data,e.response.status)}))}))}list(){return a(this,void 0,void 0,(function*(){return this.request.get(`${this.url}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}update(e,n){return a(this,void 0,void 0,(function*(){return this.request.put(`${this.url}/${e}`,n,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}delete(e){return a(this,void 0,void 0,(function*(){return this.request.delete(`${this.url}/${e}`,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>204===e.status)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}}t.default=c}));n(ll);var ul=t((function(n,t){var a=e&&e.__awaiter||function(e,n,t,a){return new(t||(t=Promise))((function(i,o){function s(e){try{c(a.next(e))}catch(e){o(e)}}function r(e){try{c(a.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,r)}c((a=a.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(i),r=o(xp);class c extends r.default{constructor(e,n,t){super(e,n),this.url=`${this.url}/invoices`,this.domain=t}list(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/list`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}getOrgUnitView(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/orgunit`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}getOrgUnitAndServiceView(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/orgunit/service`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}getDayView(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/day`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}getServiceView(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/service`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}getServiceAndDayView(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/service/day`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}getUserView(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/user`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}getUserAndServiceView(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/user/service`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}getDetailView(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/detail`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}}t.default=c}));n(ul);var dl=t((function(n,t){var a=e&&e.__awaiter||function(e,n,t,a){return new(t||(t=Promise))((function(i,o){function s(e){try{c(a.next(e))}catch(e){o(e)}}function r(e){try{c(a.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,r)}c((a=a.apply(e,n||[])).next())}))},o=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(i),r=o(xp);class c extends r.default{constructor(e,n){super(e,n),this.url=`${this.url}/dashboard`}info(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}history(e){return a(this,void 0,void 0,(function*(){return this.request.post(`${this.url}/history`,e,{headers:{Authorization:this.token?`Bearer ${this.token}`:""}}).then((e=>e.data)).catch((e=>{throw new s.default(e.response.data,e.response.status)}))}))}}t.default=c}));n(dl);var hl=t((function(n,t){var a=e&&e.__awaiter||function(e,n,t,a){return new(t||(t=Promise))((function(i,o){function s(e){try{c(a.next(e))}catch(e){o(e)}}function r(e){try{c(a.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,r)}c((a=a.apply(e,n||[])).next())}))},i=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(_p),s=i(yp),r=i(kp),c=i(Ep),p=i(il),l=i(ol),u=i(sl),d=i(rl),h=i(cl),m=i(pl),f=i(ll),v=i(ul),x=i(dl),g=i(gp);class b{setup(e){return a(this,void 0,void 0,(function*(){this.baseUrl=e&&e.baseUrl?e.baseUrl:g.default.App.baseUrl,e&&e.token&&(this.token=e.token),e&&e.login&&e.password&&(yield this.loginByUser(e.login,e.password)),e&&e.apiKey&&(yield this.loginByOrg(e.apiKey,e.login)),this.org=new r.default(this.token,this.baseUrl),this.orgUnit=new c.default(this.token,this.baseUrl),this.session=new o.default(this.token,this.baseUrl,e.domain),this.room=new s.default(this.token,this.baseUrl),this.archive=new p.default(this.token,this.baseUrl),this.user=new u.default(this.token,this.baseUrl),this.prescription=new d.default(this.token,this.baseUrl),this.recording=new h.default(this.token,this.baseUrl),this.profile=new f.default(this.token,this.baseUrl),this.skin=new m.default(this.token,this.baseUrl),this.invoice=new v.default(this.token,this.baseUrl),this.dashboard=new x.default(this.token,this.baseUrl)}))}loginByOrg(e,n){return a(this,void 0,void 0,(function*(){const t=new l.default(this.baseUrl),a=yield t.loginByOrg({apiKey:e,user:n});this.token=a.access.token}))}loginByUser(e,n){return a(this,void 0,void 0,(function*(){const t=new l.default(this.baseUrl),a=yield t.loginByUser({login:e,password:n});this.token=a.access.token}))}}const w=e=>a(void 0,void 0,void 0,(function*(){const n=new b;return yield n.setup(e),n}));n.exports=w,t.default=w}));return n(hl)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
